
/Users/darwinwang/Documents/IoT/FinalProject/target/3.3.0/argon/FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000085b0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bc5d0  000bc5d0  0000c5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bc5f4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  2003e3e0  000bc5f8  0001e3e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000230  2003e5c0  2003e5c0  0002e5c0  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000bc7d8  000bc7d8  0002c7d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bc800  000bc800  0002c800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001575cf  00000000  00000000  0002c804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001828b  00000000  00000000  00183dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00045905  00000000  00000000  0019c05e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003340  00000000  00000000  001e1963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000b340  00000000  00000000  001e4ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044bb7  00000000  00000000  001effe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0005532b  00000000  00000000  00234b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013b691  00000000  00000000  00289ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00009ed4  00000000  00000000  003c5558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f004 fee2 	bl	b8dfa <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f004 feea 	bl	b8e16 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e3e0 	.word	0x2003e3e0
   b404c:	000bc5f8 	.word	0x000bc5f8
   b4050:	2003e5c0 	.word	0x2003e5c0
   b4054:	2003e5c0 	.word	0x2003e5c0
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f003 ff1d 	bl	b7ea0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bc5a4 	.word	0x000bc5a4
   b4080:	000bc5c8 	.word	0x000bc5c8

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bcf4 	b.w	b4a70 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fea7 	bl	b4ddc <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f003 bebd 	b.w	b7e10 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 bdb5 	b.w	b6c04 <malloc>

000b409a <_Znaj>:
   b409a:	f002 bdb3 	b.w	b6c04 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f002 bdb9 	b.w	b6c14 <free>
	...

000b40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f002 fcfe 	bl	b6aac <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b672d 	.word	0x000b672d
   b40b8:	000bae50 	.word	0x000bae50

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b40cc:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b40ce:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b40d0:	4606      	mov	r6, r0
   b40d2:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b40d4:	da0b      	bge.n	b40ee <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b40d6:	2a0a      	cmp	r2, #10
   b40d8:	d109      	bne.n	b40ee <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b40da:	212d      	movs	r1, #45	; 0x2d
   b40dc:	f003 f82a 	bl	b7134 <_ZN5Print5printEc>
            val = -n;
   b40e0:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b40e2:	b2ea      	uxtb	r2, r5
   b40e4:	4630      	mov	r0, r6
    }
}
   b40e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b40ea:	f003 b83c 	b.w	b7166 <_ZN5Print11printNumberEmh>
            val = n;
   b40ee:	4621      	mov	r1, r4
   b40f0:	e7f7      	b.n	b40e2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>
	...

000b40f4 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   b40f4:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b40f6:	f002 fb21 	bl	b673c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b40fa:	4b03      	ldr	r3, [pc, #12]	; (b4108 <_ZN10CloudClass7processEv+0x14>)
   b40fc:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   b40fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   b4102:	f002 bd0f 	b.w	b6b24 <spark_process>
   b4106:	bf00      	nop
   b4108:	2003e728 	.word	0x2003e728

000b410c <_ZNK10BlynkParam8iterator7isValidEv>:
#endif
#if !defined(BLYNK_NO_FLOAT)
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b410c:	6803      	ldr	r3, [r0, #0]
   b410e:	b12b      	cbz	r3, b411c <_ZNK10BlynkParam8iterator7isValidEv+0x10>
   b4110:	6840      	ldr	r0, [r0, #4]
   b4112:	4283      	cmp	r3, r0
   b4114:	bf2c      	ite	cs
   b4116:	2000      	movcs	r0, #0
   b4118:	2001      	movcc	r0, #1
   b411a:	4770      	bx	lr
   b411c:	4618      	mov	r0, r3
   b411e:	4770      	bx	lr

000b4120 <_ZNK10BlynkParam8iterator7asFloatEv>:
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
   b4120:	b510      	push	{r4, lr}
   b4122:	4604      	mov	r4, r0
   b4124:	f7ff fff2 	bl	b410c <_ZNK10BlynkParam8iterator7isValidEv>
   b4128:	b148      	cbz	r0, b413e <_ZNK10BlynkParam8iterator7asFloatEv+0x1e>
   b412a:	6820      	ldr	r0, [r4, #0]
   b412c:	f004 fe5a 	bl	b8de4 <atof>
   b4130:	ec51 0b10 	vmov	r0, r1, d0
   b4134:	f004 fde2 	bl	b8cfc <__aeabi_d2f>
   b4138:	ee00 0a10 	vmov	s0, r0
   b413c:	bd10      	pop	{r4, pc}
   b413e:	ed9f 0a01 	vldr	s0, [pc, #4]	; b4144 <_ZNK10BlynkParam8iterator7asFloatEv+0x24>
   b4142:	e7fb      	b.n	b413c <_ZNK10BlynkParam8iterator7asFloatEv+0x1c>
   b4144:	00000000 	.word	0x00000000

000b4148 <_ZNK10BlynkParam8iterator5asIntEv>:
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   b4148:	b510      	push	{r4, lr}
   b414a:	4604      	mov	r4, r0
   b414c:	f7ff ffde 	bl	b410c <_ZNK10BlynkParam8iterator7isValidEv>
   b4150:	b120      	cbz	r0, b415c <_ZNK10BlynkParam8iterator5asIntEv+0x14>
   b4152:	6820      	ldr	r0, [r4, #0]
   b4154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4158:	f004 be47 	b.w	b8dea <atoi>
   b415c:	bd10      	pop	{r4, pc}

000b415e <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   b415e:	b538      	push	{r3, r4, r5, lr}
   b4160:	4604      	mov	r4, r0
            if(isValid()) {
   b4162:	f7ff ffd3 	bl	b410c <_ZNK10BlynkParam8iterator7isValidEv>
   b4166:	b130      	cbz	r0, b4176 <_ZN10BlynkParam8iteratorppEv+0x18>
                ptr += strlen(ptr) + 1;
   b4168:	6825      	ldr	r5, [r4, #0]
   b416a:	4628      	mov	r0, r5
   b416c:	f004 fe94 	bl	b8e98 <strlen>
   b4170:	3001      	adds	r0, #1
   b4172:	4405      	add	r5, r0
   b4174:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   b4176:	4620      	mov	r0, r4
   b4178:	bd38      	pop	{r3, r4, r5, pc}

000b417a <_ZNK10BlynkParamixEi>:
    }
};

inline
BlynkParam::iterator BlynkParam::operator[](int index) const
{
   b417a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    iterator end() const   { return iterator(buff+len, buff+len); }
   b417c:	e9d1 3600 	ldrd	r3, r6, [r1]
   b4180:	441e      	add	r6, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b4182:	e9cd 3600 	strd	r3, r6, [sp]
{
   b4186:	4604      	mov	r4, r0
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b4188:	4615      	mov	r5, r2
   b418a:	466f      	mov	r7, sp
    const iterator e = end();
    for (iterator it = begin(); it < e; ++it) {
   b418c:	9b00      	ldr	r3, [sp, #0]
   b418e:	429e      	cmp	r6, r3
   b4190:	d90c      	bls.n	b41ac <_ZNK10BlynkParamixEi+0x32>
        if (!index--) {
   b4192:	b935      	cbnz	r5, b41a2 <_ZNK10BlynkParamixEi+0x28>
            return it;
   b4194:	e897 0003 	ldmia.w	r7, {r0, r1}
   b4198:	e884 0003 	stmia.w	r4, {r0, r1}
        }
    }
    return iterator::invalid();
}
   b419c:	4620      	mov	r0, r4
   b419e:	b003      	add	sp, #12
   b41a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (iterator it = begin(); it < e; ++it) {
   b41a2:	4638      	mov	r0, r7
   b41a4:	f7ff ffdb 	bl	b415e <_ZN10BlynkParam8iteratorppEv>
   b41a8:	3d01      	subs	r5, #1
   b41aa:	e7ef      	b.n	b418c <_ZNK10BlynkParamixEi+0x12>
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b41ac:	2300      	movs	r3, #0
   b41ae:	e9c4 3300 	strd	r3, r3, [r4]
        static iterator invalid() { return iterator(NULL, NULL); }
   b41b2:	e7f3      	b.n	b419c <_ZNK10BlynkParamixEi+0x22>

000b41b4 <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   b41b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b41b6:	4604      	mov	r4, r0
   b41b8:	6847      	ldr	r7, [r0, #4]
    if (str == NULL) {
   b41ba:	460d      	mov	r5, r1
   b41bc:	b921      	cbnz	r1, b41c8 <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   b41be:	6803      	ldr	r3, [r0, #0]
   b41c0:	1c7a      	adds	r2, r7, #1
   b41c2:	6042      	str	r2, [r0, #4]
   b41c4:	55d9      	strb	r1, [r3, r7]
        return;
    }
    add(str, strlen(str)+1);
}
   b41c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    add(str, strlen(str)+1);
   b41c8:	4608      	mov	r0, r1
   b41ca:	f004 fe65 	bl	b8e98 <strlen>
    if (len + l > buff_size)
   b41ce:	68a3      	ldr	r3, [r4, #8]
    add(str, strlen(str)+1);
   b41d0:	1c46      	adds	r6, r0, #1
    if (len + l > buff_size)
   b41d2:	19f2      	adds	r2, r6, r7
   b41d4:	429a      	cmp	r2, r3
   b41d6:	d8f6      	bhi.n	b41c6 <_ZN10BlynkParam3addEPKc+0x12>
    memcpy(buff+len, b, l);
   b41d8:	6820      	ldr	r0, [r4, #0]
   b41da:	4632      	mov	r2, r6
   b41dc:	4629      	mov	r1, r5
   b41de:	4438      	add	r0, r7
   b41e0:	f004 fe0b 	bl	b8dfa <memcpy>
    len += l;
   b41e4:	6860      	ldr	r0, [r4, #4]
   b41e6:	4430      	add	r0, r6
   b41e8:	6060      	str	r0, [r4, #4]
   b41ea:	e7ec      	b.n	b41c6 <_ZN10BlynkParam3addEPKc+0x12>

000b41ec <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   b41ec:	b538      	push	{r3, r4, r5, lr}
   b41ee:	4604      	mov	r4, r0
   b41f0:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   b41f2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b41f6:	6825      	ldr	r5, [r4, #0]
   b41f8:	4a04      	ldr	r2, [pc, #16]	; (b420c <_ZN10BlynkParam3addEi+0x20>)
   b41fa:	1a09      	subs	r1, r1, r0
   b41fc:	4428      	add	r0, r5
   b41fe:	f002 fd11 	bl	b6c24 <snprintf>
   b4202:	6863      	ldr	r3, [r4, #4]
   b4204:	3001      	adds	r0, #1
   b4206:	4403      	add	r3, r0
   b4208:	6063      	str	r3, [r4, #4]
    }
   b420a:	bd38      	pop	{r3, r4, r5, pc}
   b420c:	000bae65 	.word	0x000bae65

000b4210 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   b4210:	b538      	push	{r3, r4, r5, lr}
   b4212:	4604      	mov	r4, r0
   b4214:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   b4216:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b421a:	6825      	ldr	r5, [r4, #0]
   b421c:	4a04      	ldr	r2, [pc, #16]	; (b4230 <_ZN10BlynkParam3addEl+0x20>)
   b421e:	1a09      	subs	r1, r1, r0
   b4220:	4428      	add	r0, r5
   b4222:	f002 fcff 	bl	b6c24 <snprintf>
   b4226:	6863      	ldr	r3, [r4, #4]
   b4228:	3001      	adds	r0, #1
   b422a:	4403      	add	r3, r0
   b422c:	6063      	str	r3, [r4, #4]
    }
   b422e:	bd38      	pop	{r3, r4, r5, pc}
   b4230:	000bae68 	.word	0x000bae68

000b4234 <BlynkWidgetWrite1>:
float longitude;
float latitude;
float altitude;


BLYNK_WRITE(V1) {
   b4234:	b513      	push	{r0, r1, r4, lr}
    longitude = param[1].asFloat();
   b4236:	2201      	movs	r2, #1
   b4238:	4668      	mov	r0, sp
BLYNK_WRITE(V1) {
   b423a:	460c      	mov	r4, r1
    longitude = param[1].asFloat();
   b423c:	f7ff ff9d 	bl	b417a <_ZNK10BlynkParamixEi>
   b4240:	4668      	mov	r0, sp
   b4242:	f7ff ff6d 	bl	b4120 <_ZNK10BlynkParam8iterator7asFloatEv>
   b4246:	4b0d      	ldr	r3, [pc, #52]	; (b427c <BlynkWidgetWrite1+0x48>)
    latitude = param[0].asFloat();
   b4248:	4621      	mov	r1, r4
   b424a:	2200      	movs	r2, #0
   b424c:	4668      	mov	r0, sp
    longitude = param[1].asFloat();
   b424e:	ed83 0a00 	vstr	s0, [r3]
    latitude = param[0].asFloat();
   b4252:	f7ff ff92 	bl	b417a <_ZNK10BlynkParamixEi>
   b4256:	4668      	mov	r0, sp
   b4258:	f7ff ff62 	bl	b4120 <_ZNK10BlynkParam8iterator7asFloatEv>
   b425c:	4b08      	ldr	r3, [pc, #32]	; (b4280 <BlynkWidgetWrite1+0x4c>)
    altitude = param[2].asFloat();
   b425e:	2202      	movs	r2, #2
   b4260:	4621      	mov	r1, r4
   b4262:	4668      	mov	r0, sp
    latitude = param[0].asFloat();
   b4264:	ed83 0a00 	vstr	s0, [r3]
    altitude = param[2].asFloat();
   b4268:	f7ff ff87 	bl	b417a <_ZNK10BlynkParamixEi>
   b426c:	4668      	mov	r0, sp
   b426e:	f7ff ff57 	bl	b4120 <_ZNK10BlynkParam8iterator7asFloatEv>
   b4272:	4b04      	ldr	r3, [pc, #16]	; (b4284 <BlynkWidgetWrite1+0x50>)
   b4274:	ed83 0a00 	vstr	s0, [r3]
}
   b4278:	b002      	add	sp, #8
   b427a:	bd10      	pop	{r4, pc}
   b427c:	2003e6a0 	.word	0x2003e6a0
   b4280:	2003e69c 	.word	0x2003e69c
   b4284:	2003e61c 	.word	0x2003e61c

000b4288 <_Z11calibrationv>:
    display.display();
    delay(2000);
}

void calibration()
{
   b4288:	b510      	push	{r4, lr}
    if (digitalRead(button) == HIGH)
   b428a:	2005      	movs	r0, #5
   b428c:	f003 fea2 	bl	b7fd4 <digitalRead>
   b4290:	2801      	cmp	r0, #1
   b4292:	d116      	bne.n	b42c2 <_Z11calibrationv+0x3a>
    {
        if (minLight == true)
   b4294:	4c0b      	ldr	r4, [pc, #44]	; (b42c4 <_Z11calibrationv+0x3c>)
   b4296:	4a0c      	ldr	r2, [pc, #48]	; (b42c8 <_Z11calibrationv+0x40>)
   b4298:	7821      	ldrb	r1, [r4, #0]
   b429a:	4b0c      	ldr	r3, [pc, #48]	; (b42cc <_Z11calibrationv+0x44>)
   b429c:	b141      	cbz	r1, b42b0 <_Z11calibrationv+0x28>
        {
            minLight = false;
   b429e:	2100      	movs	r1, #0
   b42a0:	7021      	strb	r1, [r4, #0]
            maxLight = true;
   b42a2:	7010      	strb	r0, [r2, #0]
            done = false;
   b42a4:	7019      	strb	r1, [r3, #0]
        else if (done == true)
        {
            calibrate = true;
        }
    }
}
   b42a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delay(200);
   b42aa:	20c8      	movs	r0, #200	; 0xc8
   b42ac:	f002 bcf6 	b.w	b6c9c <delay>
        else if (maxLight == true)
   b42b0:	7814      	ldrb	r4, [r2, #0]
   b42b2:	b114      	cbz	r4, b42ba <_Z11calibrationv+0x32>
            maxLight = false;
   b42b4:	7011      	strb	r1, [r2, #0]
            done = true;
   b42b6:	7018      	strb	r0, [r3, #0]
   b42b8:	e7f5      	b.n	b42a6 <_Z11calibrationv+0x1e>
        else if (done == true)
   b42ba:	781b      	ldrb	r3, [r3, #0]
   b42bc:	b10b      	cbz	r3, b42c2 <_Z11calibrationv+0x3a>
            calibrate = true;
   b42be:	4b04      	ldr	r3, [pc, #16]	; (b42d0 <_Z11calibrationv+0x48>)
   b42c0:	7018      	strb	r0, [r3, #0]
}
   b42c2:	bd10      	pop	{r4, pc}
   b42c4:	2003e3e0 	.word	0x2003e3e0
   b42c8:	2003e6a4 	.word	0x2003e6a4
   b42cc:	2003e698 	.word	0x2003e698
   b42d0:	2003e624 	.word	0x2003e624

000b42d4 <_Z12displaySetupv>:
    display.display();
    delay(200);
}

void displaySetup()
{
   b42d4:	b508      	push	{r3, lr}
    display.clearDisplay();
   b42d6:	4805      	ldr	r0, [pc, #20]	; (b42ec <_Z12displaySetupv+0x18>)
   b42d8:	f001 fc8a 	bl	b5bf0 <_ZN16Adafruit_SSD130612clearDisplayEv>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b42dc:	4803      	ldr	r0, [pc, #12]	; (b42ec <_Z12displaySetupv+0x18>)
   b42de:	2300      	movs	r3, #0
   b42e0:	6103      	str	r3, [r0, #16]
    display.setCursor(0, 0);
    display.setTextSize(1);
}
   b42e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    display.setTextSize(1);
   b42e6:	2101      	movs	r1, #1
   b42e8:	f001 bac9 	b.w	b587e <_ZN12Adafruit_GFX11setTextSizeEh>
   b42ec:	2003e628 	.word	0x2003e628

000b42f0 <_Z4showv>:
{
   b42f0:	b5d0      	push	{r4, r6, r7, lr}
    uint64_t reading = analogRead(tempSensor);
   b42f2:	200f      	movs	r0, #15
   b42f4:	f003 fe81 	bl	b7ffa <analogRead>
    double voltage = (reading * 3.3) / 4095.0;
   b42f8:	17c1      	asrs	r1, r0, #31
   b42fa:	f004 f9d1 	bl	b86a0 <__aeabi_ul2d>
   b42fe:	a328      	add	r3, pc, #160	; (adr r3, b43a0 <_Z4showv+0xb0>)
   b4300:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4304:	f004 fa02 	bl	b870c <__aeabi_dmul>
   b4308:	a327      	add	r3, pc, #156	; (adr r3, b43a8 <_Z4showv+0xb8>)
   b430a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b430e:	f004 fb27 	bl	b8960 <__aeabi_ddiv>
    double temperature = (voltage - 0.5) * 100;
   b4312:	4b1d      	ldr	r3, [pc, #116]	; (b4388 <_Z4showv+0x98>)
    display.print(temperature);
   b4314:	4c1d      	ldr	r4, [pc, #116]	; (b438c <_Z4showv+0x9c>)
    double temperature = (voltage - 0.5) * 100;
   b4316:	2200      	movs	r2, #0
   b4318:	f004 f840 	bl	b839c <__aeabi_dsub>
   b431c:	4b1c      	ldr	r3, [pc, #112]	; (b4390 <_Z4showv+0xa0>)
   b431e:	2200      	movs	r2, #0
   b4320:	f004 f9f4 	bl	b870c <__aeabi_dmul>
   b4324:	4606      	mov	r6, r0
   b4326:	460f      	mov	r7, r1
    displaySetup();
   b4328:	f7ff ffd4 	bl	b42d4 <_Z12displaySetupv>
    display.print(temperature);
   b432c:	ec47 6b10 	vmov	d0, r6, r7
   b4330:	2102      	movs	r1, #2
   b4332:	4620      	mov	r0, r4
   b4334:	f002 fffe 	bl	b7334 <_ZN5Print5printEdi>
    display.println("C");
   b4338:	4916      	ldr	r1, [pc, #88]	; (b4394 <_Z4showv+0xa4>)
   b433a:	4620      	mov	r0, r4
   b433c:	f002 ff09 	bl	b7152 <_ZN5Print7printlnEPKc>
    int farenheit = temperature * 1.8 + 32;
   b4340:	a30f      	add	r3, pc, #60	; (adr r3, b4380 <_Z4showv+0x90>)
   b4342:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4346:	4630      	mov	r0, r6
   b4348:	4639      	mov	r1, r7
   b434a:	f004 f9df 	bl	b870c <__aeabi_dmul>
   b434e:	4b12      	ldr	r3, [pc, #72]	; (b4398 <_Z4showv+0xa8>)
   b4350:	2200      	movs	r2, #0
   b4352:	f004 f825 	bl	b83a0 <__adddf3>
   b4356:	f004 fc89 	bl	b8c6c <__aeabi_d2iz>
   b435a:	220a      	movs	r2, #10
   b435c:	4601      	mov	r1, r0
   b435e:	4620      	mov	r0, r4
   b4360:	f7ff feb4 	bl	b40cc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
    display.print("F");
   b4364:	490d      	ldr	r1, [pc, #52]	; (b439c <_Z4showv+0xac>)
   b4366:	4620      	mov	r0, r4
   b4368:	f002 fee0 	bl	b712c <_ZN5Print5printEPKc>
    display.display();
   b436c:	4620      	mov	r0, r4
   b436e:	f001 fead 	bl	b60cc <_ZN16Adafruit_SSD13067displayEv>
}
   b4372:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
    delay(200);
   b4376:	20c8      	movs	r0, #200	; 0xc8
   b4378:	f002 bc90 	b.w	b6c9c <delay>
   b437c:	f3af 8000 	nop.w
   b4380:	cccccccd 	.word	0xcccccccd
   b4384:	3ffccccc 	.word	0x3ffccccc
   b4388:	3fe00000 	.word	0x3fe00000
   b438c:	2003e628 	.word	0x2003e628
   b4390:	40590000 	.word	0x40590000
   b4394:	000bae6c 	.word	0x000bae6c
   b4398:	40400000 	.word	0x40400000
   b439c:	000bae6e 	.word	0x000bae6e
   b43a0:	66666666 	.word	0x66666666
   b43a4:	400a6666 	.word	0x400a6666
   b43a8:	00000000 	.word	0x00000000
   b43ac:	40affe00 	.word	0x40affe00

000b43b0 <_Z10getAmbientv>:

void getAmbient()
{
   b43b0:	b510      	push	{r4, lr}
    displaySetup();
    display.print("Ambient light level: ");
   b43b2:	4c0a      	ldr	r4, [pc, #40]	; (b43dc <_Z10getAmbientv+0x2c>)
    displaySetup();
   b43b4:	f7ff ff8e 	bl	b42d4 <_Z12displaySetupv>
    display.print("Ambient light level: ");
   b43b8:	4909      	ldr	r1, [pc, #36]	; (b43e0 <_Z10getAmbientv+0x30>)
   b43ba:	4620      	mov	r0, r4
   b43bc:	f002 feb6 	bl	b712c <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b43c0:	4b08      	ldr	r3, [pc, #32]	; (b43e4 <_Z10getAmbientv+0x34>)
   b43c2:	220a      	movs	r2, #10
   b43c4:	6819      	ldr	r1, [r3, #0]
   b43c6:	4620      	mov	r0, r4
   b43c8:	f002 fecd 	bl	b7166 <_ZN5Print11printNumberEmh>
        n += println();
   b43cc:	4620      	mov	r0, r4
   b43ce:	f002 feb4 	bl	b713a <_ZN5Print7printlnEv>
    display.println(ambientValue);
    display.display();
   b43d2:	4620      	mov	r0, r4
}
   b43d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    display.display();
   b43d8:	f001 be78 	b.w	b60cc <_ZN16Adafruit_SSD13067displayEv>
   b43dc:	2003e628 	.word	0x2003e628
   b43e0:	000bae70 	.word	0x000bae70
   b43e4:	2003e620 	.word	0x2003e620

000b43e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   b43e8:	b508      	push	{r3, lr}
        state = CONNECTING;
   b43ea:	2300      	movs	r3, #0
   b43ec:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   b43ee:	6800      	ldr	r0, [r0, #0]
   b43f0:	f003 fb74 	bl	b7adc <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   b43f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   b43f8:	f002 b8bb 	b.w	b6572 <BlynkNoOpCbk>

000b43fc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b43fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   b4400:	188f      	adds	r7, r1, r2
   b4402:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   b4404:	42b9      	cmp	r1, r7
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b4406:	e9cd 1705 	strd	r1, r7, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b440a:	4606      	mov	r6, r0
   b440c:	4689      	mov	r9, r1
   b440e:	4690      	mov	r8, r2
    if (it >= param.end())
   b4410:	f080 80c2 	bcs.w	b4598 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   b4414:	a805      	add	r0, sp, #20
   b4416:	880d      	ldrh	r5, [r1, #0]
   b4418:	f7ff fea1 	bl	b415e <_ZN10BlynkParam8iteratorppEv>
   b441c:	6803      	ldr	r3, [r0, #0]
   b441e:	42bb      	cmp	r3, r7
   b4420:	f080 80ba 	bcs.w	b4598 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        const char* asStr() const       { return ptr; }
   b4424:	9805      	ldr	r0, [sp, #20]
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4426:	7803      	ldrb	r3, [r0, #0]
   b4428:	2b41      	cmp	r3, #65	; 0x41
   b442a:	d149      	bne.n	b44c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc4>
   b442c:	3001      	adds	r0, #1
   b442e:	f004 fcdc 	bl	b8dea <atoi>
   b4432:	2805      	cmp	r0, #5
   b4434:	dd37      	ble.n	b44a6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xaa>
   b4436:	24ff      	movs	r4, #255	; 0xff

    switch(cmd16) {
   b4438:	f247 2376 	movw	r3, #29302	; 0x7276
   b443c:	429d      	cmp	r5, r3
   b443e:	f000 80d3 	beq.w	b45e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>
   b4442:	d841      	bhi.n	b44c8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xcc>
   b4444:	f247 2361 	movw	r3, #29281	; 0x7261
   b4448:	429d      	cmp	r5, r3
   b444a:	f000 80a8 	beq.w	b459e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a2>
   b444e:	f247 2364 	movw	r3, #29284	; 0x7264
   b4452:	429d      	cmp	r5, r3
   b4454:	d06b      	beq.n	b452e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x132>
   b4456:	f646 5370 	movw	r3, #28016	; 0x6d70
   b445a:	429d      	cmp	r5, r3
   b445c:	d141      	bne.n	b44e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xe6>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   b445e:	4d78      	ldr	r5, [pc, #480]	; (b4640 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x244>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b4460:	4e78      	ldr	r6, [pc, #480]	; (b4644 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x248>)
   b4462:	f8df 81f4 	ldr.w	r8, [pc, #500]	; b4658 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25c>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
   b4466:	9805      	ldr	r0, [sp, #20]
        while (it < param.end()) {
   b4468:	42b8      	cmp	r0, r7
   b446a:	f080 8095 	bcs.w	b4598 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b446e:	7803      	ldrb	r3, [r0, #0]
   b4470:	2b41      	cmp	r3, #65	; 0x41
   b4472:	d14b      	bne.n	b450c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x110>
   b4474:	3001      	adds	r0, #1
   b4476:	f004 fcb8 	bl	b8dea <atoi>
   b447a:	2805      	cmp	r0, #5
   b447c:	dd39      	ble.n	b44f2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
   b447e:	24ff      	movs	r4, #255	; 0xff
            ++it;
   b4480:	a805      	add	r0, sp, #20
   b4482:	f7ff fe6c 	bl	b415e <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4486:	f8dd 9014 	ldr.w	r9, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   b448a:	4629      	mov	r1, r5
   b448c:	4648      	mov	r0, r9
   b448e:	f004 fcf9 	bl	b8e84 <strcmp>
   b4492:	4601      	mov	r1, r0
   b4494:	2800      	cmp	r0, #0
   b4496:	d13d      	bne.n	b4514 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x118>
                pinMode(pin, OUTPUT);
   b4498:	4620      	mov	r0, r4
   b449a:	f003 fd71 	bl	b7f80 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   b449e:	a805      	add	r0, sp, #20
   b44a0:	f7ff fe5d 	bl	b415e <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   b44a4:	e7df      	b.n	b4466 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x6a>
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b44a6:	9805      	ldr	r0, [sp, #20]
   b44a8:	3001      	adds	r0, #1
   b44aa:	f004 fc9e 	bl	b8dea <atoi>
   b44ae:	2800      	cmp	r0, #0
   b44b0:	dbc1      	blt.n	b4436 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3a>
   b44b2:	9805      	ldr	r0, [sp, #20]
   b44b4:	3001      	adds	r0, #1
   b44b6:	f004 fc98 	bl	b8dea <atoi>
   b44ba:	300e      	adds	r0, #14
   b44bc:	b2c4      	uxtb	r4, r0
   b44be:	e7bb      	b.n	b4438 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3c>
   b44c0:	a805      	add	r0, sp, #20
   b44c2:	f7ff fe41 	bl	b4148 <_ZNK10BlynkParam8iterator5asIntEv>
   b44c6:	e7f9      	b.n	b44bc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc0>
    switch(cmd16) {
   b44c8:	f247 7364 	movw	r3, #30564	; 0x7764
   b44cc:	429d      	cmp	r5, r3
   b44ce:	d04f      	beq.n	b4570 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x174>
   b44d0:	f247 7376 	movw	r3, #30582	; 0x7776
   b44d4:	429d      	cmp	r5, r3
   b44d6:	f000 8097 	beq.w	b4608 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>
   b44da:	f247 7361 	movw	r3, #30561	; 0x7761
   b44de:	429d      	cmp	r5, r3
   b44e0:	d06f      	beq.n	b45c2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1c6>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b44e2:	2300      	movs	r3, #0
   b44e4:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b44e8:	2202      	movs	r2, #2
   b44ea:	9200      	str	r2, [sp, #0]
   b44ec:	8b72      	ldrh	r2, [r6, #26]
   b44ee:	4619      	mov	r1, r3
   b44f0:	e03a      	b.n	b4568 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x16c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b44f2:	9805      	ldr	r0, [sp, #20]
   b44f4:	3001      	adds	r0, #1
   b44f6:	f004 fc78 	bl	b8dea <atoi>
   b44fa:	2800      	cmp	r0, #0
   b44fc:	dbbf      	blt.n	b447e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x82>
   b44fe:	9805      	ldr	r0, [sp, #20]
   b4500:	3001      	adds	r0, #1
   b4502:	f004 fc72 	bl	b8dea <atoi>
   b4506:	300e      	adds	r0, #14
   b4508:	b2c4      	uxtb	r4, r0
   b450a:	e7b9      	b.n	b4480 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x84>
   b450c:	a805      	add	r0, sp, #20
   b450e:	f7ff fe1b 	bl	b4148 <_ZNK10BlynkParam8iterator5asIntEv>
   b4512:	e7f9      	b.n	b4508 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10c>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b4514:	4631      	mov	r1, r6
   b4516:	4648      	mov	r0, r9
   b4518:	f004 fcb4 	bl	b8e84 <strcmp>
   b451c:	b128      	cbz	r0, b452a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x12e>
   b451e:	4641      	mov	r1, r8
   b4520:	4648      	mov	r0, r9
   b4522:	f004 fcaf 	bl	b8e84 <strcmp>
   b4526:	2800      	cmp	r0, #0
   b4528:	d1b9      	bne.n	b449e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa2>
                pinMode(pin, OUTPUT);
   b452a:	2101      	movs	r1, #1
   b452c:	e7b4      	b.n	b4498 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x9c>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b452e:	ab0a      	add	r3, sp, #40	; 0x28
        rsp.add("dw");
   b4530:	4945      	ldr	r1, [pc, #276]	; (b4648 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24c>)
   b4532:	9307      	str	r3, [sp, #28]
   b4534:	a807      	add	r0, sp, #28
   b4536:	2310      	movs	r3, #16
   b4538:	2500      	movs	r5, #0
   b453a:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b453e:	f7ff fe39 	bl	b41b4 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b4542:	a807      	add	r0, sp, #28
   b4544:	4621      	mov	r1, r4
   b4546:	f7ff fe51 	bl	b41ec <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   b454a:	4620      	mov	r0, r4
   b454c:	f003 fd42 	bl	b7fd4 <digitalRead>
        rsp.add(analogRead(pin));
   b4550:	4601      	mov	r1, r0
   b4552:	a807      	add	r0, sp, #28
   b4554:	f7ff fe5c 	bl	b4210 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   b4558:	9b08      	ldr	r3, [sp, #32]
   b455a:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b455e:	3b01      	subs	r3, #1
   b4560:	9300      	str	r3, [sp, #0]
   b4562:	9b07      	ldr	r3, [sp, #28]
   b4564:	462a      	mov	r2, r5
   b4566:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b4568:	4630      	mov	r0, r6
   b456a:	f000 fb0b 	bl	b4b84 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   b456e:	e013      	b.n	b4598 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        if (++it >= param.end())
   b4570:	a805      	add	r0, sp, #20
   b4572:	f7ff fdf4 	bl	b415e <_ZN10BlynkParam8iteratorppEv>
   b4576:	6803      	ldr	r3, [r0, #0]
   b4578:	429f      	cmp	r7, r3
   b457a:	d90d      	bls.n	b4598 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b457c:	b2a4      	uxth	r4, r4
   b457e:	2101      	movs	r1, #1
   b4580:	4620      	mov	r0, r4
   b4582:	f003 fcfd 	bl	b7f80 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   b4586:	a805      	add	r0, sp, #20
   b4588:	f7ff fdde 	bl	b4148 <_ZNK10BlynkParam8iterator5asIntEv>
   b458c:	1e01      	subs	r1, r0, #0
   b458e:	bf18      	it	ne
   b4590:	2101      	movne	r1, #1
   b4592:	4620      	mov	r0, r4
   b4594:	f003 fd05 	bl	b7fa2 <digitalWrite>
    }
}
   b4598:	b00f      	add	sp, #60	; 0x3c
   b459a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b459e:	ab0a      	add	r3, sp, #40	; 0x28
   b45a0:	9307      	str	r3, [sp, #28]
        rsp.add("aw");
   b45a2:	a807      	add	r0, sp, #28
   b45a4:	2310      	movs	r3, #16
   b45a6:	4929      	ldr	r1, [pc, #164]	; (b464c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x250>)
   b45a8:	2500      	movs	r5, #0
   b45aa:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b45ae:	f7ff fe01 	bl	b41b4 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b45b2:	a807      	add	r0, sp, #28
   b45b4:	4621      	mov	r1, r4
   b45b6:	f7ff fe19 	bl	b41ec <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   b45ba:	4620      	mov	r0, r4
   b45bc:	f003 fd1d 	bl	b7ffa <analogRead>
   b45c0:	e7c6      	b.n	b4550 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x154>
        if (++it >= param.end())
   b45c2:	a805      	add	r0, sp, #20
   b45c4:	f7ff fdcb 	bl	b415e <_ZN10BlynkParam8iteratorppEv>
   b45c8:	6803      	ldr	r3, [r0, #0]
   b45ca:	429f      	cmp	r7, r3
   b45cc:	d9e4      	bls.n	b4598 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b45ce:	b2a4      	uxth	r4, r4
   b45d0:	2101      	movs	r1, #1
   b45d2:	4620      	mov	r0, r4
   b45d4:	f003 fcd4 	bl	b7f80 <pinMode>
        analogWrite(pin, it.asInt());
   b45d8:	a805      	add	r0, sp, #20
   b45da:	f7ff fdb5 	bl	b4148 <_ZNK10BlynkParam8iterator5asIntEv>
   b45de:	4601      	mov	r1, r0
   b45e0:	4620      	mov	r0, r4
   b45e2:	f003 fd21 	bl	b8028 <_Z11analogWritetm>
    } break;
   b45e6:	e7d7      	b.n	b4598 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   b45e8:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   b45ea:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   b45ee:	f001 ffc1 	bl	b6574 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   b45f2:	4603      	mov	r3, r0
            handler(req);
   b45f4:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   b45f6:	b123      	cbz	r3, b4602 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
   b45f8:	4a15      	ldr	r2, [pc, #84]	; (b4650 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>)
   b45fa:	4293      	cmp	r3, r2
   b45fc:	d001      	beq.n	b4602 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
            handler(req);
   b45fe:	4798      	blx	r3
   b4600:	e7ca      	b.n	b4598 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        } else {
            BlynkWidgetReadDefault(req);
   b4602:	f001 ffb4 	bl	b656e <BlynkWidgetRead>
        }
    }
   b4606:	e7c7      	b.n	b4598 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        ++it;
   b4608:	a805      	add	r0, sp, #20
   b460a:	f7ff fda8 	bl	b415e <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b460e:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   b4610:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   b4614:	eba3 0109 	sub.w	r1, r3, r9
   b4618:	eba8 0101 	sub.w	r1, r8, r1
        WidgetWriteHandler handler = GetWriteHandler(pin);
   b461c:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   b461e:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
   b4622:	910c      	str	r1, [sp, #48]	; 0x30
   b4624:	f001 ffb0 	bl	b6588 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   b4628:	4603      	mov	r3, r0
            handler(req, param);
   b462a:	a90a      	add	r1, sp, #40	; 0x28
   b462c:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   b462e:	b123      	cbz	r3, b463a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
   b4630:	4a08      	ldr	r2, [pc, #32]	; (b4654 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x258>)
   b4632:	4293      	cmp	r3, r2
   b4634:	d001      	beq.n	b463a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
            handler(req, param);
   b4636:	4798      	blx	r3
   b4638:	e7ae      	b.n	b4598 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            BlynkWidgetWriteDefault(req, param);
   b463a:	f001 ff99 	bl	b6570 <BlynkWidgetWrite>
    } break;
   b463e:	e7ab      	b.n	b4598 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
   b4640:	000bae86 	.word	0x000bae86
   b4644:	000bae89 	.word	0x000bae89
   b4648:	000bae91 	.word	0x000bae91
   b464c:	000bae94 	.word	0x000bae94
   b4650:	000b656f 	.word	0x000b656f
   b4654:	000b6571 	.word	0x000b6571
   b4658:	000bae8d 	.word	0x000bae8d

000b465c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   b465c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4660:	b08c      	sub	sp, #48	; 0x30
   b4662:	af04      	add	r7, sp, #16
   b4664:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   b4666:	2205      	movs	r2, #5
   b4668:	6800      	ldr	r0, [r0, #0]
   b466a:	1d39      	adds	r1, r7, #4
   b466c:	f002 ff7d 	bl	b756a <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   b4670:	b398      	cbz	r0, b46da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x7e>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   b4672:	2805      	cmp	r0, #5
   b4674:	d004      	beq.n	b4680 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   b4676:	2000      	movs	r0, #0
}
   b4678:	3720      	adds	r7, #32
   b467a:	46bd      	mov	sp, r7
   b467c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
   b4680:	f8b7 3005 	ldrh.w	r3, [r7, #5]
   b4684:	ba5b      	rev16	r3, r3
   b4686:	b29a      	uxth	r2, r3
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   b4688:	f8a7 3005 	strh.w	r3, [r7, #5]
   b468c:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b4690:	ba5b      	rev16	r3, r3
   b4692:	fa1f f883 	uxth.w	r8, r3
    hdr.length = ntohs(hdr.length);
   b4696:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   b469a:	2a00      	cmp	r2, #0
   b469c:	d0eb      	beq.n	b4676 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   b469e:	793b      	ldrb	r3, [r7, #4]
   b46a0:	bb23      	cbnz	r3, b46ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
        lastActivityIn = BlynkMillis();
   b46a2:	f001 ff62 	bl	b656a <_Z11BlynkMillisv>
   b46a6:	4602      	mov	r2, r0
   b46a8:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   b46aa:	7f60      	ldrb	r0, [r4, #29]
   b46ac:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b46b0:	b9c0      	cbnz	r0, b46e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x88>
   b46b2:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   b46b6:	2901      	cmp	r1, #1
   b46b8:	d114      	bne.n	b46e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x88>
            switch (hdr.length) {
   b46ba:	2b09      	cmp	r3, #9
   b46bc:	d00f      	beq.n	b46de <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
   b46be:	2bc8      	cmp	r3, #200	; 0xc8
   b46c0:	d001      	beq.n	b46c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6a>
   b46c2:	2b04      	cmp	r3, #4
   b46c4:	d1d8      	bne.n	b4678 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   b46c6:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   b46c8:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   b46ca:	4620      	mov	r0, r4
                state = CONNECTED;
   b46cc:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   b46ce:	f000 fb07 	bl	b4ce0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   b46d2:	f7ff fd0f 	bl	b40f4 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   b46d6:	f001 ff4c 	bl	b6572 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   b46da:	2001      	movs	r0, #1
   b46dc:	e7cc      	b.n	b4678 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   b46de:	2303      	movs	r3, #3
   b46e0:	7763      	strb	r3, [r4, #29]
                break;
   b46e2:	e7c9      	b.n	b4678 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   b46e4:	1f58      	subs	r0, r3, #5
   b46e6:	bf18      	it	ne
   b46e8:	2001      	movne	r0, #1
   b46ea:	e7c5      	b.n	b4678 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   b46ec:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   b46f0:	d903      	bls.n	b46fa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x9e>
        internalReconnect();
   b46f2:	4620      	mov	r0, r4
   b46f4:	f7ff fe78 	bl	b43e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b46f8:	e7ef      	b.n	b46da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x7e>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   b46fa:	f108 0308 	add.w	r3, r8, #8
   b46fe:	466e      	mov	r6, sp
   b4700:	08db      	lsrs	r3, r3, #3
   b4702:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
   b4706:	469d      	mov	sp, r3
   b4708:	ad04      	add	r5, sp, #16
   b470a:	6820      	ldr	r0, [r4, #0]
   b470c:	4642      	mov	r2, r8
   b470e:	4629      	mov	r1, r5
   b4710:	f002 ff2b 	bl	b756a <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   b4714:	4580      	cmp	r8, r0
   b4716:	f04f 0000 	mov.w	r0, #0
   b471a:	d17f      	bne.n	b481c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
    inputBuffer[hdr.length] = '\0';
   b471c:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b4720:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   b4722:	f001 ff22 	bl	b656a <_Z11BlynkMillisv>
    switch (hdr.type)
   b4726:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   b4728:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   b472a:	2b14      	cmp	r3, #20
   b472c:	f000 80a5 	beq.w	b487a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21e>
   b4730:	d848      	bhi.n	b47c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x168>
   b4732:	2b0f      	cmp	r3, #15
   b4734:	f000 80a1 	beq.w	b487a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21e>
   b4738:	d807      	bhi.n	b474a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
   b473a:	2b02      	cmp	r3, #2
   b473c:	d048      	beq.n	b47d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x174>
   b473e:	2b06      	cmp	r3, #6
   b4740:	d051      	beq.n	b47e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18a>
        internalReconnect();
   b4742:	4620      	mov	r0, r4
   b4744:	f7ff fe50 	bl	b43e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b4748:	e058      	b.n	b47fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
    switch (hdr.type)
   b474a:	2b11      	cmp	r3, #17
   b474c:	d1f9      	bne.n	b4742 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe6>
        BlynkReq req = { 0 };
   b474e:	2300      	movs	r3, #0
   b4750:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   b4752:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b4756:	442b      	add	r3, r5
        if (it >= param.end())
   b4758:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b475a:	e9c7 5303 	strd	r5, r3, [r7, #12]
   b475e:	d24d      	bcs.n	b47fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
        ++it;
   b4760:	f107 000c 	add.w	r0, r7, #12
   b4764:	f8d5 8000 	ldr.w	r8, [r5]
   b4768:	f7ff fcf9 	bl	b415e <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b476c:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   b476e:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   b4772:	1b5d      	subs	r5, r3, r5
   b4774:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   b4776:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   b477a:	687b      	ldr	r3, [r7, #4]
   b477c:	61fd      	str	r5, [r7, #28]
   b477e:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b4782:	8363      	strh	r3, [r4, #26]
   b4784:	4b63      	ldr	r3, [pc, #396]	; (b4914 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b8>)
   b4786:	4598      	cmp	r8, r3
   b4788:	f000 80be 	beq.w	b4908 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2ac>
   b478c:	f200 808b 	bhi.w	b48a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24a>
   b4790:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   b4794:	f46f 7200 	mvn.w	r2, #512	; 0x200
   b4798:	4413      	add	r3, r2
   b479a:	4598      	cmp	r8, r3
   b479c:	f000 809c 	beq.w	b48d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x27c>
   b47a0:	d878      	bhi.n	b4894 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
   b47a2:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   b47a6:	3b06      	subs	r3, #6
   b47a8:	4598      	cmp	r8, r3
   b47aa:	f000 809b 	beq.w	b48e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x288>
   b47ae:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b47b2:	3303      	adds	r3, #3
   b47b4:	4598      	cmp	r8, r3
   b47b6:	d16a      	bne.n	b488e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x232>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   b47b8:	f107 0114 	add.w	r1, r7, #20
   b47bc:	4638      	mov	r0, r7
   b47be:	f001 fed7 	bl	b6570 <BlynkWidgetWrite>
   b47c2:	e064      	b.n	b488e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x232>
    switch (hdr.type)
   b47c4:	2b29      	cmp	r3, #41	; 0x29
   b47c6:	d01b      	beq.n	b4800 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b47c8:	2b37      	cmp	r3, #55	; 0x37
   b47ca:	d017      	beq.n	b47fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
   b47cc:	2b1d      	cmp	r3, #29
   b47ce:	d1b8      	bne.n	b4742 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe6>
        if (state == CONNECTING) {
   b47d0:	7f63      	ldrb	r3, [r4, #29]
   b47d2:	b943      	cbnz	r3, b47e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18a>
            state = CONNECTED;
   b47d4:	2301      	movs	r3, #1
   b47d6:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   b47d8:	4620      	mov	r0, r4
   b47da:	f000 fa81 	bl	b4ce0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   b47de:	f7ff fc89 	bl	b40f4 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   b47e2:	f001 fec6 	bl	b6572 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   b47e6:	2300      	movs	r3, #0
   b47e8:	21c8      	movs	r1, #200	; 0xc8
   b47ea:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   b47ee:	9100      	str	r1, [sp, #0]
   b47f0:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b47f4:	4619      	mov	r1, r3
   b47f6:	4620      	mov	r0, r4
   b47f8:	f000 f9c4 	bl	b4b84 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   b47fc:	2001      	movs	r0, #1
   b47fe:	e00d      	b.n	b481c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        if (!redir_serv) {
   b4800:	68a3      	ldr	r3, [r4, #8]
   b4802:	b91b      	cbnz	r3, b480c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b0>
             redir_serv = (char*)malloc(64);
   b4804:	2040      	movs	r0, #64	; 0x40
   b4806:	f002 f9fd 	bl	b6c04 <malloc>
   b480a:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   b480c:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b4810:	44a8      	add	r8, r5
        if (it >= param.end())
   b4812:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b4814:	e9c7 5805 	strd	r5, r8, [r7, #20]
   b4818:	d302      	bcc.n	b4820 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
            return false;
   b481a:	2000      	movs	r0, #0
   b481c:	46b5      	mov	sp, r6
   b481e:	e72b      	b.n	b4678 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   b4820:	2240      	movs	r2, #64	; 0x40
   b4822:	4629      	mov	r1, r5
   b4824:	68a0      	ldr	r0, [r4, #8]
   b4826:	f004 fb53 	bl	b8ed0 <strncpy>
        redir_serv[63] = '\0';
   b482a:	68a3      	ldr	r3, [r4, #8]
   b482c:	2200      	movs	r2, #0
   b482e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        if (++it < param.end())
   b4832:	f107 0014 	add.w	r0, r7, #20
   b4836:	f7ff fc92 	bl	b415e <_ZN10BlynkParam8iteratorppEv>
   b483a:	6803      	ldr	r3, [r0, #0]
   b483c:	4598      	cmp	r8, r3
   b483e:	d91a      	bls.n	b4876 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21a>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   b4840:	f107 0014 	add.w	r0, r7, #20
   b4844:	f7ff fc62 	bl	b410c <_ZNK10BlynkParam8iterator7isValidEv>
   b4848:	b110      	cbz	r0, b4850 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f4>
   b484a:	6978      	ldr	r0, [r7, #20]
   b484c:	f004 fad1 	bl	b8df2 <atol>
            redir_port = it.asLong();
   b4850:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   b4852:	6820      	ldr	r0, [r4, #0]
   b4854:	f003 f942 	bl	b7adc <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   b4858:	6823      	ldr	r3, [r4, #0]
   b485a:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   b485c:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   b485e:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   b4860:	2300      	movs	r3, #0
   b4862:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b4864:	f001 fe81 	bl	b656a <_Z11BlynkMillisv>
   b4868:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b486c:	3808      	subs	r0, #8
   b486e:	e9c4 0003 	strd	r0, r0, [r4, #12]
   b4872:	6160      	str	r0, [r4, #20]
   b4874:	e7c2      	b.n	b47fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   b4876:	2550      	movs	r5, #80	; 0x50
   b4878:	e7eb      	b.n	b4852 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f6>
        msgIdOutOverride = hdr.msg_id;
   b487a:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   b487c:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   b4880:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b4884:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   b4886:	4629      	mov	r1, r5
   b4888:	4620      	mov	r0, r4
   b488a:	f7ff fdb7 	bl	b43fc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   b488e:	2300      	movs	r3, #0
   b4890:	8363      	strh	r3, [r4, #26]
   b4892:	e7b3      	b.n	b47fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
   b4894:	4b20      	ldr	r3, [pc, #128]	; (b4918 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2bc>)
   b4896:	4598      	cmp	r8, r3
   b4898:	d1f9      	bne.n	b488e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x232>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   b489a:	f107 0114 	add.w	r1, r7, #20
   b489e:	4638      	mov	r0, r7
   b48a0:	f001 fe66 	bl	b6570 <BlynkWidgetWrite>
   b48a4:	e7f3      	b.n	b488e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x232>
   b48a6:	4b1d      	ldr	r3, [pc, #116]	; (b491c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c0>)
   b48a8:	4598      	cmp	r8, r3
   b48aa:	d021      	beq.n	b48f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x294>
   b48ac:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   b48b0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b48b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
   b48b8:	4598      	cmp	r8, r3
   b48ba:	d01f      	beq.n	b48fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2a0>
   b48bc:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   b48c0:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   b48c4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   b48c8:	4598      	cmp	r8, r3
   b48ca:	d1e0      	bne.n	b488e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x232>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   b48cc:	f107 0114 	add.w	r1, r7, #20
   b48d0:	4638      	mov	r0, r7
   b48d2:	f001 fe4d 	bl	b6570 <BlynkWidgetWrite>
   b48d6:	e7da      	b.n	b488e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x232>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   b48d8:	f107 0114 	add.w	r1, r7, #20
   b48dc:	4638      	mov	r0, r7
   b48de:	f001 fe47 	bl	b6570 <BlynkWidgetWrite>
   b48e2:	e7d4      	b.n	b488e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x232>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   b48e4:	f107 0114 	add.w	r1, r7, #20
   b48e8:	4638      	mov	r0, r7
   b48ea:	f001 fe41 	bl	b6570 <BlynkWidgetWrite>
   b48ee:	e7ce      	b.n	b488e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x232>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   b48f0:	f107 0114 	add.w	r1, r7, #20
   b48f4:	4638      	mov	r0, r7
   b48f6:	f001 fe3b 	bl	b6570 <BlynkWidgetWrite>
   b48fa:	e7c8      	b.n	b488e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x232>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   b48fc:	f107 0114 	add.w	r1, r7, #20
   b4900:	4638      	mov	r0, r7
   b4902:	f001 fe35 	bl	b6570 <BlynkWidgetWrite>
   b4906:	e7c2      	b.n	b488e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x232>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   b4908:	f107 0114 	add.w	r1, r7, #20
   b490c:	4638      	mov	r0, r7
   b490e:	f001 fe2f 	bl	b6570 <BlynkWidgetWrite>
   b4912:	e7bc      	b.n	b488e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x232>
   b4914:	00736676 	.word	0x00736676
   b4918:	00676264 	.word	0x00676264
   b491c:	6e6f6361 	.word	0x6e6f6361

000b4920 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>:
bool BlynkProtocol<Transp>::run(bool avail)
   b4920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4924:	4604      	mov	r4, r0
   b4926:	b08c      	sub	sp, #48	; 0x30
   b4928:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   b492a:	f7ff fbe3 	bl	b40f4 <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   b492e:	7f63      	ldrb	r3, [r4, #29]
   b4930:	2b02      	cmp	r3, #2
   b4932:	d01e      	beq.n	b4972 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x52>
    return false;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   b4934:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   b4936:	8b62      	ldrh	r2, [r4, #26]
   b4938:	3301      	adds	r3, #1
   b493a:	b2db      	uxtb	r3, r3
   b493c:	7723      	strb	r3, [r4, #28]
   b493e:	b9aa      	cbnz	r2, b496c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b4940:	2b02      	cmp	r3, #2
   b4942:	d813      	bhi.n	b496c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   b4944:	6820      	ldr	r0, [r4, #0]
   b4946:	f002 ff91 	bl	b786c <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   b494a:	b1a8      	cbz	r0, b4978 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
        while (avail || conn.available() > 0) {
   b494c:	b925      	cbnz	r5, b4958 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x38>
    int available() { return client.available(); }
   b494e:	6820      	ldr	r0, [r4, #0]
   b4950:	f003 f86a 	bl	b7a28 <_ZN9TCPClient9availableEv>
   b4954:	2800      	cmp	r0, #0
   b4956:	dd0f      	ble.n	b4978 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
            if (!processInput()) {
   b4958:	4620      	mov	r0, r4
   b495a:	f7ff fe7f 	bl	b465c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   b495e:	2800      	cmp	r0, #0
   b4960:	d1f5      	bne.n	b494e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x2e>
    void disconnect() { client.stop(); }
   b4962:	6820      	ldr	r0, [r4, #0]
   b4964:	f003 f8ba 	bl	b7adc <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   b4968:	f001 fe03 	bl	b6572 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   b496c:	7f23      	ldrb	r3, [r4, #28]
   b496e:	3b01      	subs	r3, #1
   b4970:	7723      	strb	r3, [r4, #28]
}
   b4972:	b00c      	add	sp, #48	; 0x30
   b4974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   b4978:	f001 fdf7 	bl	b656a <_Z11BlynkMillisv>
   b497c:	4605      	mov	r5, r0
    bool connected() { return client.connected(); }
   b497e:	6820      	ldr	r0, [r4, #0]
   b4980:	f002 ff74 	bl	b786c <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   b4984:	7f67      	ldrb	r7, [r4, #29]
   b4986:	2f01      	cmp	r7, #1
   b4988:	4606      	mov	r6, r0
   b498a:	d124      	bne.n	b49d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb6>
        if (!tconn) {
   b498c:	b920      	cbnz	r0, b4998 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x78>
            lastHeartbeat = t;
   b498e:	6165      	str	r5, [r4, #20]
            internalReconnect();
   b4990:	4620      	mov	r0, r4
   b4992:	f7ff fd29 	bl	b43e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   b4996:	e7e9      	b.n	b496c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   b4998:	68e3      	ldr	r3, [r4, #12]
   b499a:	f24f 6218 	movw	r2, #63000	; 0xf618
   b499e:	1aeb      	subs	r3, r5, r3
   b49a0:	4293      	cmp	r3, r2
   b49a2:	d8f5      	bhi.n	b4990 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x70>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b49a4:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   b49a8:	4293      	cmp	r3, r2
   b49aa:	d803      	bhi.n	b49b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x94>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b49ac:	6923      	ldr	r3, [r4, #16]
   b49ae:	1aeb      	subs	r3, r5, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b49b0:	4293      	cmp	r3, r2
   b49b2:	d9db      	bls.n	b496c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b49b4:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b49b6:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b49ba:	1aeb      	subs	r3, r5, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b49bc:	4293      	cmp	r3, r2
   b49be:	d9d5      	bls.n	b496c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
            sendCmd(BLYNK_CMD_PING);
   b49c0:	2300      	movs	r3, #0
   b49c2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b49c6:	9300      	str	r3, [sp, #0]
   b49c8:	461a      	mov	r2, r3
   b49ca:	2106      	movs	r1, #6
   b49cc:	4620      	mov	r0, r4
   b49ce:	f000 f8d9 	bl	b4b84 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
                lastLogin = t;
   b49d2:	6165      	str	r5, [r4, #20]
                return false;
   b49d4:	e7ca      	b.n	b496c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    } else if (state == CONNECTING) {
   b49d6:	2f00      	cmp	r7, #0
   b49d8:	d1c8      	bne.n	b496c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b49da:	6963      	ldr	r3, [r4, #20]
   b49dc:	1aeb      	subs	r3, r5, r3
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   b49de:	b140      	cbz	r0, b49f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xd2>
   b49e0:	f241 7270 	movw	r2, #6000	; 0x1770
   b49e4:	4293      	cmp	r3, r2
   b49e6:	d9c1      	bls.n	b496c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    void disconnect() { client.stop(); }
   b49e8:	6820      	ldr	r0, [r4, #0]
   b49ea:	f003 f877 	bl	b7adc <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b49ee:	7767      	strb	r7, [r4, #29]
            return false;
   b49f0:	e7bc      	b.n	b496c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   b49f2:	f241 3288 	movw	r2, #5000	; 0x1388
   b49f6:	4293      	cmp	r3, r2
   b49f8:	d9b8      	bls.n	b496c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b49fa:	6820      	ldr	r0, [r4, #0]
   b49fc:	f003 f86e 	bl	b7adc <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   b4a00:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   b4a04:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   b4a08:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   b4a0c:	f1be 0f00 	cmp.w	lr, #0
   b4a10:	d01b      	beq.n	b4a4a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x12a>
            return (1 == client.connect(domain, port));
   b4a12:	4633      	mov	r3, r6
   b4a14:	4642      	mov	r2, r8
   b4a16:	4671      	mov	r1, lr
   b4a18:	4660      	mov	r0, ip
   b4a1a:	f002 fea9 	bl	b7770 <_ZN9TCPClient7connectEPKctm>
   b4a1e:	2801      	cmp	r0, #1
   b4a20:	d1d7      	bne.n	b49d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb2>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4a22:	6863      	ldr	r3, [r4, #4]
   b4a24:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   b4a26:	2501      	movs	r5, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4a28:	4618      	mov	r0, r3
            msgIdOut = 1;
   b4a2a:	8325      	strh	r5, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4a2c:	f004 fa34 	bl	b8e98 <strlen>
   b4a30:	2200      	movs	r2, #0
   b4a32:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b4a36:	9b05      	ldr	r3, [sp, #20]
   b4a38:	9000      	str	r0, [sp, #0]
   b4a3a:	462a      	mov	r2, r5
   b4a3c:	211d      	movs	r1, #29
   b4a3e:	4620      	mov	r0, r4
   b4a40:	f000 f8a0 	bl	b4b84 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   b4a44:	6923      	ldr	r3, [r4, #16]
   b4a46:	6163      	str	r3, [r4, #20]
            return true;
   b4a48:	e790      	b.n	b496c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b4a4a:	4b08      	ldr	r3, [pc, #32]	; (b4a6c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x14c>)
   b4a4c:	9306      	str	r3, [sp, #24]
   b4a4e:	f10c 0720 	add.w	r7, ip, #32
   b4a52:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b4a54:	ae07      	add	r6, sp, #28
   b4a56:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b4a58:	683b      	ldr	r3, [r7, #0]
   b4a5a:	7033      	strb	r3, [r6, #0]
            return (1 == client.connect(addr, port));
   b4a5c:	4642      	mov	r2, r8
   b4a5e:	4673      	mov	r3, lr
   b4a60:	a906      	add	r1, sp, #24
   b4a62:	4660      	mov	r0, ip
   b4a64:	f002 ff64 	bl	b7930 <_ZN9TCPClient7connectE9IPAddresstm>
   b4a68:	e7d9      	b.n	b4a1e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xfe>
   b4a6a:	bf00      	nop
   b4a6c:	000bbf70 	.word	0x000bbf70

000b4a70 <setup>:

void setup()
{
   b4a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    display.setup();
   b4a74:	483f      	ldr	r0, [pc, #252]	; (b4b74 <setup+0x104>)
        this->authkey = auth;
   b4a76:	4d40      	ldr	r5, [pc, #256]	; (b4b78 <setup+0x108>)
{
   b4a78:	b094      	sub	sp, #80	; 0x50
    display.setup();
   b4a7a:	f001 fdd7 	bl	b662c <_ZN16OledWingAdafruit5setupEv>
    displaySetup();
   b4a7e:	f7ff fc29 	bl	b42d4 <_Z12displaySetupv>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4a82:	483c      	ldr	r0, [pc, #240]	; (b4b74 <setup+0x104>)
   b4a84:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b4a88:	6143      	str	r3, [r0, #20]
    display.setTextColor(WHITE);
    display.display();
   b4a8a:	f001 fb1f 	bl	b60cc <_ZN16Adafruit_SSD13067displayEv>
    Wire.begin();
   b4a8e:	f003 fb09 	bl	b80a4 <_Z19__fetch_global_Wirev>
   b4a92:	f002 f98f 	bl	b6db4 <_ZN7TwoWire5beginEv>
    proximitySensor.begin();
   b4a96:	f003 fb05 	bl	b80a4 <_Z19__fetch_global_Wirev>
   b4a9a:	4601      	mov	r1, r0
   b4a9c:	4837      	ldr	r0, [pc, #220]	; (b4b7c <setup+0x10c>)
   b4a9e:	f001 fd37 	bl	b6510 <_ZN8VCNL40405beginER7TwoWire>
    proximitySensor.powerOffProximity();
   b4aa2:	4836      	ldr	r0, [pc, #216]	; (b4b7c <setup+0x10c>)
   b4aa4:	f001 fceb 	bl	b647e <_ZN8VCNL404017powerOffProximityEv>
    proximitySensor.powerOnAmbient();
   b4aa8:	4834      	ldr	r0, [pc, #208]	; (b4b7c <setup+0x10c>)
   b4aaa:	f001 fcba 	bl	b6422 <_ZN8VCNL404014powerOnAmbientEv>
    pinMode(blue, OUTPUT);
   b4aae:	2101      	movs	r1, #1
   b4ab0:	2008      	movs	r0, #8
   b4ab2:	f003 fa65 	bl	b7f80 <pinMode>
    pinMode(green, OUTPUT);
   b4ab6:	2101      	movs	r1, #1
   b4ab8:	2007      	movs	r0, #7
   b4aba:	f003 fa61 	bl	b7f80 <pinMode>
    pinMode(red, OUTPUT);
   b4abe:	2101      	movs	r1, #1
   b4ac0:	2006      	movs	r0, #6
   b4ac2:	f003 fa5d 	bl	b7f80 <pinMode>
    pinMode(button, INPUT);
   b4ac6:	2100      	movs	r1, #0
   b4ac8:	2005      	movs	r0, #5
   b4aca:	f003 fa59 	bl	b7f80 <pinMode>
    pinMode(potentiometer, INPUT);
   b4ace:	2100      	movs	r1, #0
   b4ad0:	200e      	movs	r0, #14
   b4ad2:	f003 fa55 	bl	b7f80 <pinMode>
    Blynk.begin("Qoy41XMwJ0CLD926YLzIdrkFZaW1IvQX", IPAddress(167, 172, 234, 162), 8080);
   b4ad6:	23a2      	movs	r3, #162	; 0xa2
   b4ad8:	22ac      	movs	r2, #172	; 0xac
   b4ada:	21a7      	movs	r1, #167	; 0xa7
   b4adc:	9300      	str	r3, [sp, #0]
   b4ade:	a802      	add	r0, sp, #8
   b4ae0:	23ea      	movs	r3, #234	; 0xea
   b4ae2:	f002 fa25 	bl	b6f30 <_ZN9IPAddressC1Ehhhh>
   b4ae6:	ac03      	add	r4, sp, #12

    void begin( const char* auth,
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   b4ae8:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4aec:	f001 fd3b 	bl	b6566 <_Z10BlynkDelaym>
   b4af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4af2:	af09      	add	r7, sp, #36	; 0x24
   b4af4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b4af6:	6823      	ldr	r3, [r4, #0]
   b4af8:	703b      	strb	r3, [r7, #0]
   b4afa:	4b21      	ldr	r3, [pc, #132]	; (b4b80 <setup+0x110>)
   b4afc:	606b      	str	r3, [r5, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b4afe:	f001 fd34 	bl	b656a <_Z11BlynkMillisv>
   b4b02:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b4b06:	3808      	subs	r0, #8
   b4b08:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
   b4b0c:	e9c5 0003 	strd	r0, r0, [r5, #12]
   b4b10:	6168      	str	r0, [r5, #20]
   b4b12:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b4b16:	ae0f      	add	r6, sp, #60	; 0x3c
   b4b18:	c60f      	stmia	r6!, {r0, r1, r2, r3}
        this->conn.begin(addr, port);
   b4b1a:	682c      	ldr	r4, [r5, #0]
   b4b1c:	683b      	ldr	r3, [r7, #0]
   b4b1e:	7033      	strb	r3, [r6, #0]
   b4b20:	af0f      	add	r7, sp, #60	; 0x3c
        port = p;
   b4b22:	f641 7390 	movw	r3, #8080	; 0x1f90
   b4b26:	8723      	strh	r3, [r4, #56]	; 0x38
   b4b28:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
        domain = NULL;
   b4b2a:	f04f 0800 	mov.w	r8, #0
   b4b2e:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   b4b32:	3420      	adds	r4, #32
   b4b34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4b36:	6833      	ldr	r3, [r6, #0]
   b4b38:	7023      	strb	r3, [r4, #0]
        while ((state != CONNECTED) &&
   b4b3a:	f244 664f 	movw	r6, #17999	; 0x464f
    void disconnect() { client.stop(); }
   b4b3e:	6828      	ldr	r0, [r5, #0]
   b4b40:	f002 ffcc 	bl	b7adc <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   b4b44:	f885 801d 	strb.w	r8, [r5, #29]
        millis_time_t started = BlynkMillis();
   b4b48:	f001 fd0f 	bl	b656a <_Z11BlynkMillisv>
   b4b4c:	4604      	mov	r4, r0
        while ((state != CONNECTED) &&
   b4b4e:	7f6b      	ldrb	r3, [r5, #29]
   b4b50:	2b01      	cmp	r3, #1
   b4b52:	d00c      	beq.n	b4b6e <setup+0xfe>
               (BlynkMillis() - started < timeout))
   b4b54:	f001 fd09 	bl	b656a <_Z11BlynkMillisv>
   b4b58:	1b00      	subs	r0, r0, r4
        while ((state != CONNECTED) &&
   b4b5a:	42b0      	cmp	r0, r6
   b4b5c:	d804      	bhi.n	b4b68 <setup+0xf8>
            run();
   b4b5e:	2100      	movs	r1, #0
   b4b60:	4628      	mov	r0, r5
   b4b62:	f7ff fedd 	bl	b4920 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
        while ((state != CONNECTED) &&
   b4b66:	e7f2      	b.n	b4b4e <setup+0xde>
        config(auth, addr, port);
        while(this->connect() != true) {}
   b4b68:	7f6b      	ldrb	r3, [r5, #29]
   b4b6a:	2b01      	cmp	r3, #1
   b4b6c:	d1e7      	bne.n	b4b3e <setup+0xce>
}
   b4b6e:	b014      	add	sp, #80	; 0x50
   b4b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4b74:	2003e628 	.word	0x2003e628
   b4b78:	2003e5c0 	.word	0x2003e5c0
   b4b7c:	2003e6b4 	.word	0x2003e6b4
   b4b80:	000bae97 	.word	0x000bae97

000b4b84 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   b4b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4b88:	b083      	sub	sp, #12
   b4b8a:	af00      	add	r7, sp, #0
   b4b8c:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   b4b8e:	6800      	ldr	r0, [r0, #0]
   b4b90:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   b4b92:	4688      	mov	r8, r1
   b4b94:	4616      	mov	r6, r2
   b4b96:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   b4b98:	46eb      	mov	fp, sp
   b4b9a:	f002 fe67 	bl	b786c <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   b4b9e:	2800      	cmp	r0, #0
   b4ba0:	d07f      	beq.n	b4ca2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   b4ba2:	f1b8 0f1d 	cmp.w	r8, #29
   b4ba6:	d804      	bhi.n	b4bb2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
   b4ba8:	4b4c      	ldr	r3, [pc, #304]	; (b4cdc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
   b4baa:	fa23 f308 	lsr.w	r3, r3, r8
   b4bae:	07db      	lsls	r3, r3, #31
   b4bb0:	d402      	bmi.n	b4bb8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
   b4bb2:	7f63      	ldrb	r3, [r4, #29]
   b4bb4:	2b01      	cmp	r3, #1
   b4bb6:	d174      	bne.n	b4ca2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
   b4bb8:	b946      	cbnz	r6, b4bcc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   b4bba:	8b66      	ldrh	r6, [r4, #26]
   b4bbc:	b936      	cbnz	r6, b4bcc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   b4bbe:	8b23      	ldrh	r3, [r4, #24]
   b4bc0:	3301      	adds	r3, #1
   b4bc2:	b29b      	uxth	r3, r3
   b4bc4:	2b00      	cmp	r3, #0
   b4bc6:	d071      	beq.n	b4cac <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
   b4bc8:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   b4bca:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   b4bcc:	f1a8 030c 	sub.w	r3, r8, #12
   b4bd0:	2b08      	cmp	r3, #8
   b4bd2:	d816      	bhi.n	b4c02 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   b4bd4:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   b4bd8:	4293      	cmp	r3, r2
   b4bda:	bf38      	it	cc
   b4bdc:	4613      	movcc	r3, r2
   b4bde:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   b4be2:	f001 fcc2 	bl	b656a <_Z11BlynkMillisv>
   b4be6:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   b4bea:	2800      	cmp	r0, #0
   b4bec:	db60      	blt.n	b4cb0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
   b4bee:	2100      	movs	r1, #0
   b4bf0:	4620      	mov	r0, r4
   b4bf2:	f7ff fe95 	bl	b4920 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
                wait_time = allowed_time - BlynkMillis();
   b4bf6:	f001 fcb8 	bl	b656a <_Z11BlynkMillisv>
   b4bfa:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   b4bfe:	2800      	cmp	r0, #0
   b4c00:	daf5      	bge.n	b4bee <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4c02:	f1b9 0f00 	cmp.w	r9, #0
   b4c06:	d05a      	beq.n	b4cbe <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
   b4c08:	1d6b      	adds	r3, r5, #5
                               (data2 ? length2 : 0);
   b4c0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   b4c0c:	2a00      	cmp	r2, #0
   b4c0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   b4c10:	bf08      	it	eq
   b4c12:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4c14:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   b4c18:	f10a 0307 	add.w	r3, sl, #7
   b4c1c:	f023 0307 	bic.w	r3, r3, #7
   b4c20:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
   b4c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
   b4c26:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
   b4c2a:	18ea      	adds	r2, r5, r3
   b4c2c:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   b4c30:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   b4c32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
   b4c36:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
   b4c3a:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   b4c3e:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
   b4c42:	f1b9 0f00 	cmp.w	r9, #0
   b4c46:	d03c      	beq.n	b4cc2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   b4c48:	2d00      	cmp	r5, #0
   b4c4a:	d03a      	beq.n	b4cc2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
   b4c4c:	462a      	mov	r2, r5
   b4c4e:	4649      	mov	r1, r9
   b4c50:	f10d 0005 	add.w	r0, sp, #5
   b4c54:	f004 f8d1 	bl	b8dfa <memcpy>
        pos += length;
   b4c58:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   b4c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   b4c5c:	b13b      	cbz	r3, b4c6e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
   b4c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   b4c60:	b12b      	cbz	r3, b4c6e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
   b4c62:	461a      	mov	r2, r3
   b4c64:	687b      	ldr	r3, [r7, #4]
   b4c66:	6b79      	ldr	r1, [r7, #52]	; 0x34
   b4c68:	4418      	add	r0, r3
   b4c6a:	f004 f8c6 	bl	b8dfa <memcpy>
    size_t pos = sizeof(BlynkHeader);
   b4c6e:	2500      	movs	r5, #0
    while (wlen < full_length) {
   b4c70:	4555      	cmp	r5, sl
   b4c72:	d22a      	bcs.n	b4cca <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   b4c74:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   b4c78:	687b      	ldr	r3, [r7, #4]
   b4c7a:	6820      	ldr	r0, [r4, #0]
   b4c7c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   b4c80:	bf28      	it	cs
   b4c82:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   b4c86:	1959      	adds	r1, r3, r5
   b4c88:	f002 fca3 	bl	b75d2 <_ZN9TCPClient5writeEPKhj>
   b4c8c:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   b4c8e:	2000      	movs	r0, #0
   b4c90:	f001 fc69 	bl	b6566 <_Z10BlynkDelaym>
        if (w == 0) {
   b4c94:	b9be      	cbnz	r6, b4cc6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
   b4c96:	6820      	ldr	r0, [r4, #0]
   b4c98:	f002 ff20 	bl	b7adc <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b4c9c:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   b4c9e:	f001 fc68 	bl	b6572 <BlynkNoOpCbk>
}
   b4ca2:	370c      	adds	r7, #12
   b4ca4:	46dd      	mov	sp, fp
   b4ca6:	46bd      	mov	sp, r7
   b4ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   b4cac:	2301      	movs	r3, #1
   b4cae:	e78b      	b.n	b4bc8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
   b4cb0:	7f21      	ldrb	r1, [r4, #28]
   b4cb2:	2900      	cmp	r1, #0
   b4cb4:	d1a5      	bne.n	b4c02 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
   b4cb6:	4620      	mov	r0, r4
   b4cb8:	f7ff fe32 	bl	b4920 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
   b4cbc:	e7a1      	b.n	b4c02 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4cbe:	2305      	movs	r3, #5
   b4cc0:	e7a3      	b.n	b4c0a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
   b4cc2:	2005      	movs	r0, #5
   b4cc4:	e7c9      	b.n	b4c5a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
   b4cc6:	4435      	add	r5, r6
    while (wlen < full_length) {
   b4cc8:	e7d2      	b.n	b4c70 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
   b4cca:	d003      	beq.n	b4cd4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
   b4ccc:	4620      	mov	r0, r4
   b4cce:	f7ff fb8b 	bl	b43e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   b4cd2:	e7e6      	b.n	b4ca2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
   b4cd4:	f001 fc49 	bl	b656a <_Z11BlynkMillisv>
   b4cd8:	6120      	str	r0, [r4, #16]
   b4cda:	e7e2      	b.n	b4ca2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   b4cdc:	20000045 	.word	0x20000045

000b4ce0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   b4ce0:	b500      	push	{lr}
   b4ce2:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   b4ce4:	ab04      	add	r3, sp, #16
   b4ce6:	2200      	movs	r2, #0
   b4ce8:	9301      	str	r3, [sp, #4]
   b4cea:	234f      	movs	r3, #79	; 0x4f
   b4cec:	9300      	str	r3, [sp, #0]
   b4cee:	9202      	str	r2, [sp, #8]
   b4cf0:	4b03      	ldr	r3, [pc, #12]	; (b4d00 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   b4cf2:	2111      	movs	r1, #17
   b4cf4:	f7ff ff46 	bl	b4b84 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   b4cf8:	b015      	add	sp, #84	; 0x54
   b4cfa:	f85d fb04 	ldr.w	pc, [sp], #4
   b4cfe:	bf00      	nop
   b4d00:	000baf75 	.word	0x000baf75

000b4d04 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJjEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   b4d04:	b570      	push	{r4, r5, r6, lr}
   b4d06:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4d0a:	2400      	movs	r4, #0
   b4d0c:	9205      	str	r2, [sp, #20]
   b4d0e:	aa0a      	add	r2, sp, #40	; 0x28
   b4d10:	4605      	mov	r5, r0
   b4d12:	460e      	mov	r6, r1
   b4d14:	9207      	str	r2, [sp, #28]
        cmd.add("vw");
   b4d16:	a807      	add	r0, sp, #28
   b4d18:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b4d1c:	4911      	ldr	r1, [pc, #68]	; (b4d64 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJjEEEviDpT_+0x60>)
   b4d1e:	e9cd 4208 	strd	r4, r2, [sp, #32]
   b4d22:	f7ff fa47 	bl	b41b4 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   b4d26:	4631      	mov	r1, r6
   b4d28:	a807      	add	r0, sp, #28
   b4d2a:	f7ff fa5f 	bl	b41ec <_ZN10BlynkParam3addEi>
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
   b4d2e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b4d32:	9e07      	ldr	r6, [sp, #28]
   b4d34:	9b05      	ldr	r3, [sp, #20]
   b4d36:	4a0c      	ldr	r2, [pc, #48]	; (b4d68 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJjEEEviDpT_+0x64>)
   b4d38:	1a09      	subs	r1, r1, r0
   b4d3a:	4430      	add	r0, r6
   b4d3c:	f001 ff72 	bl	b6c24 <snprintf>
   b4d40:	1c43      	adds	r3, r0, #1
   b4d42:	9808      	ldr	r0, [sp, #32]
   b4d44:	4403      	add	r3, r0
   b4d46:	9308      	str	r3, [sp, #32]
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   b4d48:	3b01      	subs	r3, #1
   b4d4a:	9300      	str	r3, [sp, #0]
   b4d4c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b4d50:	9b07      	ldr	r3, [sp, #28]
   b4d52:	4622      	mov	r2, r4
   b4d54:	2114      	movs	r1, #20
   b4d56:	4628      	mov	r0, r5
   b4d58:	f7ff ff14 	bl	b4b84 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   b4d5c:	f50d 6d85 	add.w	sp, sp, #1064	; 0x428
   b4d60:	bd70      	pop	{r4, r5, r6, pc}
   b4d62:	bf00      	nop
   b4d64:	000baeb8 	.word	0x000baeb8
   b4d68:	000baebb 	.word	0x000baebb

000b4d6c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA57_cEEvRKT_>:
    }

    // Please use Blynk.logEvent("event", "Description")
    template<typename T>
    BLYNK_DEPRECATED
    void notify(const T& msg) {
   b4d6c:	b530      	push	{r4, r5, lr}
   b4d6e:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4d72:	ab08      	add	r3, sp, #32
   b4d74:	2400      	movs	r4, #0
   b4d76:	4605      	mov	r5, r0
   b4d78:	9305      	str	r3, [sp, #20]
#if defined(BLYNK_TEMPLATE_ID)
        logEvent("notify", msg);
#else
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(msg);
   b4d7a:	a805      	add	r0, sp, #20
   b4d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   b4d80:	e9cd 4306 	strd	r4, r3, [sp, #24]
   b4d84:	f7ff fa16 	bl	b41b4 <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_NOTIFY, 0, cmd.getBuffer(), cmd.getLength()-1);
   b4d88:	9b06      	ldr	r3, [sp, #24]
   b4d8a:	3b01      	subs	r3, #1
   b4d8c:	9300      	str	r3, [sp, #0]
   b4d8e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b4d92:	9b05      	ldr	r3, [sp, #20]
   b4d94:	4622      	mov	r2, r4
   b4d96:	210e      	movs	r1, #14
   b4d98:	4628      	mov	r0, r5
   b4d9a:	f7ff fef3 	bl	b4b84 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
#endif
    }
   b4d9e:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   b4da2:	bd30      	pop	{r4, r5, pc}

000b4da4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA33_cEEvRKT_>:
    void notify(const T& msg) {
   b4da4:	b530      	push	{r4, r5, lr}
   b4da6:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
   b4daa:	ab08      	add	r3, sp, #32
   b4dac:	2400      	movs	r4, #0
   b4dae:	4605      	mov	r5, r0
   b4db0:	9305      	str	r3, [sp, #20]
        cmd.add(msg);
   b4db2:	a805      	add	r0, sp, #20
   b4db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   b4db8:	e9cd 4306 	strd	r4, r3, [sp, #24]
   b4dbc:	f7ff f9fa 	bl	b41b4 <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_NOTIFY, 0, cmd.getBuffer(), cmd.getLength()-1);
   b4dc0:	9b06      	ldr	r3, [sp, #24]
   b4dc2:	3b01      	subs	r3, #1
   b4dc4:	9300      	str	r3, [sp, #0]
   b4dc6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b4dca:	9b05      	ldr	r3, [sp, #20]
   b4dcc:	4622      	mov	r2, r4
   b4dce:	210e      	movs	r1, #14
   b4dd0:	4628      	mov	r0, r5
   b4dd2:	f7ff fed7 	bl	b4b84 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   b4dd6:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   b4dda:	bd30      	pop	{r4, r5, pc}

000b4ddc <loop>:

void loop()
{
   b4ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    Blynk.run();
   b4dde:	2100      	movs	r1, #0
   b4de0:	486f      	ldr	r0, [pc, #444]	; (b4fa0 <loop+0x1c4>)
    display.loop();
    ambientValue = proximitySensor.getAmbient();
   b4de2:	4f70      	ldr	r7, [pc, #448]	; (b4fa4 <loop+0x1c8>)
   b4de4:	4d70      	ldr	r5, [pc, #448]	; (b4fa8 <loop+0x1cc>)
    Blynk.run();
   b4de6:	f7ff fd9b 	bl	b4920 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
    display.loop();
   b4dea:	4870      	ldr	r0, [pc, #448]	; (b4fac <loop+0x1d0>)
   b4dec:	f001 fc47 	bl	b667e <_ZN16OledWingAdafruit4loopEv>
    ambientValue = proximitySensor.getAmbient();
   b4df0:	486f      	ldr	r0, [pc, #444]	; (b4fb0 <loop+0x1d4>)
   b4df2:	f001 fa98 	bl	b6326 <_ZN8VCNL404010getAmbientEv>
    Blynk.virtualWrite(V0, ambientValue);
   b4df6:	2100      	movs	r1, #0
    ambientValue = proximitySensor.getAmbient();
   b4df8:	4602      	mov	r2, r0
   b4dfa:	6038      	str	r0, [r7, #0]
    Blynk.virtualWrite(V0, ambientValue);
   b4dfc:	4868      	ldr	r0, [pc, #416]	; (b4fa0 <loop+0x1c4>)
   b4dfe:	f7ff ff81 	bl	b4d04 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJjEEEviDpT_>
    if (display.pressedA())
   b4e02:	486a      	ldr	r0, [pc, #424]	; (b4fac <loop+0x1d0>)
   b4e04:	f001 fc54 	bl	b66b0 <_ZN16OledWingAdafruit8pressedAEv>
   b4e08:	4606      	mov	r6, r0
   b4e0a:	b190      	cbz	r0, b4e32 <loop+0x56>
    {
        mode = true;
   b4e0c:	2301      	movs	r3, #1
   b4e0e:	702b      	strb	r3, [r5, #0]
        digitalWrite(green, LOW);
        digitalWrite(blue, LOW);
    }
    if (mode == true)
    {
        show();
   b4e10:	f7ff fa6e 	bl	b42f0 <_Z4showv>
        digitalWrite(red, LOW);
   b4e14:	2100      	movs	r1, #0
   b4e16:	2006      	movs	r0, #6
   b4e18:	f003 f8c3 	bl	b7fa2 <digitalWrite>
        digitalWrite(green, LOW);
   b4e1c:	2100      	movs	r1, #0
   b4e1e:	2007      	movs	r0, #7
   b4e20:	f003 f8bf 	bl	b7fa2 <digitalWrite>
        digitalWrite(blue, LOW);
   b4e24:	2100      	movs	r1, #0
   b4e26:	2008      	movs	r0, #8
                notifyBright = false;
                notifyLow = true;
            }
        }
    }
   b4e28:	b003      	add	sp, #12
   b4e2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        digitalWrite(blue, LOW);
   b4e2e:	f003 b8b8 	b.w	b7fa2 <digitalWrite>
    else if (display.pressedB())
   b4e32:	485e      	ldr	r0, [pc, #376]	; (b4fac <loop+0x1d0>)
   b4e34:	f001 fc46 	bl	b66c4 <_ZN16OledWingAdafruit8pressedBEv>
   b4e38:	4604      	mov	r4, r0
   b4e3a:	b350      	cbz	r0, b4e92 <loop+0xb6>
        mode = false;
   b4e3c:	702e      	strb	r6, [r5, #0]
        if (calibrate == false)
   b4e3e:	4b5d      	ldr	r3, [pc, #372]	; (b4fb4 <loop+0x1d8>)
   b4e40:	781d      	ldrb	r5, [r3, #0]
   b4e42:	2d00      	cmp	r5, #0
   b4e44:	d156      	bne.n	b4ef4 <loop+0x118>
            calibration();
   b4e46:	f7ff fa1f 	bl	b4288 <_Z11calibrationv>
            if (minLight == true)
   b4e4a:	4b5b      	ldr	r3, [pc, #364]	; (b4fb8 <loop+0x1dc>)
   b4e4c:	781c      	ldrb	r4, [r3, #0]
   b4e4e:	2c00      	cmp	r4, #0
   b4e50:	d039      	beq.n	b4ec6 <loop+0xea>
                int unmapped_value = analogRead(potentiometer);
   b4e52:	200e      	movs	r0, #14
   b4e54:	f003 f8d1 	bl	b7ffa <analogRead>
                int value = map(unmapped_value, 0, 4095, 0, 65535);
   b4e58:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b4e5c:	4629      	mov	r1, r5
   b4e5e:	9300      	str	r3, [sp, #0]
   b4e60:	f640 72ff 	movw	r2, #4095	; 0xfff
   b4e64:	462b      	mov	r3, r5
   b4e66:	f001 ff0d 	bl	b6c84 <_Z3mapiiiii>
                minValue = value;
   b4e6a:	4b54      	ldr	r3, [pc, #336]	; (b4fbc <loop+0x1e0>)
                int value = map(unmapped_value, 0, 4095, 0, 65535);
   b4e6c:	4604      	mov	r4, r0
                minValue = value;
   b4e6e:	6018      	str	r0, [r3, #0]
                displaySetup();
   b4e70:	f7ff fa30 	bl	b42d4 <_Z12displaySetupv>
                display.println("Minimum Ambient Light:");
   b4e74:	4952      	ldr	r1, [pc, #328]	; (b4fc0 <loop+0x1e4>)
                display.println("Maximum Ambient Light:");
   b4e76:	484d      	ldr	r0, [pc, #308]	; (b4fac <loop+0x1d0>)
   b4e78:	f002 f96b 	bl	b7152 <_ZN5Print7printlnEPKc>
size_t Print::print(T n, int base)
   b4e7c:	484b      	ldr	r0, [pc, #300]	; (b4fac <loop+0x1d0>)
   b4e7e:	220a      	movs	r2, #10
   b4e80:	4621      	mov	r1, r4
   b4e82:	f7ff f923 	bl	b40cc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
                display.display();
   b4e86:	4849      	ldr	r0, [pc, #292]	; (b4fac <loop+0x1d0>)
   b4e88:	b003      	add	sp, #12
   b4e8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                display.display();
   b4e8e:	f001 b91d 	b.w	b60cc <_ZN16Adafruit_SSD13067displayEv>
    else if (display.pressedC())
   b4e92:	4846      	ldr	r0, [pc, #280]	; (b4fac <loop+0x1d0>)
   b4e94:	f001 fc20 	bl	b66d8 <_ZN16OledWingAdafruit8pressedCEv>
   b4e98:	b188      	cbz	r0, b4ebe <loop+0xe2>
        calibrate = false;
   b4e9a:	4b46      	ldr	r3, [pc, #280]	; (b4fb4 <loop+0x1d8>)
        mode = false;
   b4e9c:	702c      	strb	r4, [r5, #0]
        calibrate = false;
   b4e9e:	701c      	strb	r4, [r3, #0]
        minLight = true;
   b4ea0:	4b45      	ldr	r3, [pc, #276]	; (b4fb8 <loop+0x1dc>)
   b4ea2:	2201      	movs	r2, #1
        digitalWrite(red, LOW);
   b4ea4:	4621      	mov	r1, r4
   b4ea6:	2006      	movs	r0, #6
        minLight = true;
   b4ea8:	701a      	strb	r2, [r3, #0]
        digitalWrite(red, LOW);
   b4eaa:	f003 f87a 	bl	b7fa2 <digitalWrite>
        digitalWrite(green, LOW);
   b4eae:	4621      	mov	r1, r4
   b4eb0:	2007      	movs	r0, #7
   b4eb2:	f003 f876 	bl	b7fa2 <digitalWrite>
        digitalWrite(blue, LOW);
   b4eb6:	4621      	mov	r1, r4
   b4eb8:	2008      	movs	r0, #8
   b4eba:	f003 f872 	bl	b7fa2 <digitalWrite>
    if (mode == true)
   b4ebe:	782b      	ldrb	r3, [r5, #0]
   b4ec0:	2b00      	cmp	r3, #0
   b4ec2:	d0bc      	beq.n	b4e3e <loop+0x62>
   b4ec4:	e7a4      	b.n	b4e10 <loop+0x34>
            else if (maxLight == true)
   b4ec6:	4b3f      	ldr	r3, [pc, #252]	; (b4fc4 <loop+0x1e8>)
   b4ec8:	781b      	ldrb	r3, [r3, #0]
   b4eca:	2b00      	cmp	r3, #0
   b4ecc:	d034      	beq.n	b4f38 <loop+0x15c>
                int unmapped_value = analogRead(potentiometer);
   b4ece:	200e      	movs	r0, #14
   b4ed0:	f003 f893 	bl	b7ffa <analogRead>
                int value = map(unmapped_value, 0, 4095, 0, 65535);
   b4ed4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b4ed8:	4621      	mov	r1, r4
   b4eda:	9300      	str	r3, [sp, #0]
   b4edc:	f640 72ff 	movw	r2, #4095	; 0xfff
   b4ee0:	4623      	mov	r3, r4
   b4ee2:	f001 fecf 	bl	b6c84 <_Z3mapiiiii>
                maxValue = value;
   b4ee6:	4b38      	ldr	r3, [pc, #224]	; (b4fc8 <loop+0x1ec>)
                int value = map(unmapped_value, 0, 4095, 0, 65535);
   b4ee8:	4604      	mov	r4, r0
                maxValue = value;
   b4eea:	6018      	str	r0, [r3, #0]
                displaySetup();
   b4eec:	f7ff f9f2 	bl	b42d4 <_Z12displaySetupv>
                display.println("Maximum Ambient Light:");
   b4ef0:	4936      	ldr	r1, [pc, #216]	; (b4fcc <loop+0x1f0>)
   b4ef2:	e7c0      	b.n	b4e76 <loop+0x9a>
            if (notifyBright == true) {
   b4ef4:	4c36      	ldr	r4, [pc, #216]	; (b4fd0 <loop+0x1f4>)
            getAmbient();
   b4ef6:	f7ff fa5b 	bl	b43b0 <_Z10getAmbientv>
            if (notifyBright == true) {
   b4efa:	7823      	ldrb	r3, [r4, #0]
   b4efc:	b1f3      	cbz	r3, b4f3c <loop+0x160>
                Blynk.notify("Might want to check this out, ambient light is too high!");
   b4efe:	4935      	ldr	r1, [pc, #212]	; (b4fd4 <loop+0x1f8>)
   b4f00:	4827      	ldr	r0, [pc, #156]	; (b4fa0 <loop+0x1c4>)
   b4f02:	f7ff ff33 	bl	b4d6c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA57_cEEvRKT_>
            if (ambientValue < maxValue && ambientValue > minValue)
   b4f06:	4a30      	ldr	r2, [pc, #192]	; (b4fc8 <loop+0x1ec>)
   b4f08:	683b      	ldr	r3, [r7, #0]
   b4f0a:	6812      	ldr	r2, [r2, #0]
   b4f0c:	4293      	cmp	r3, r2
   b4f0e:	d21e      	bcs.n	b4f4e <loop+0x172>
   b4f10:	492a      	ldr	r1, [pc, #168]	; (b4fbc <loop+0x1e0>)
   b4f12:	6809      	ldr	r1, [r1, #0]
   b4f14:	428b      	cmp	r3, r1
   b4f16:	d91a      	bls.n	b4f4e <loop+0x172>
                digitalWrite(red, LOW);
   b4f18:	2100      	movs	r1, #0
   b4f1a:	2006      	movs	r0, #6
   b4f1c:	f003 f841 	bl	b7fa2 <digitalWrite>
                digitalWrite(green, HIGH);
   b4f20:	2101      	movs	r1, #1
   b4f22:	2007      	movs	r0, #7
   b4f24:	f003 f83d 	bl	b7fa2 <digitalWrite>
                digitalWrite(blue, LOW);
   b4f28:	2100      	movs	r1, #0
   b4f2a:	2008      	movs	r0, #8
   b4f2c:	f003 f839 	bl	b7fa2 <digitalWrite>
                notifyLow = false;
   b4f30:	4a29      	ldr	r2, [pc, #164]	; (b4fd8 <loop+0x1fc>)
                notifyBright = false;
   b4f32:	2300      	movs	r3, #0
   b4f34:	7023      	strb	r3, [r4, #0]
                notifyLow = false;
   b4f36:	7013      	strb	r3, [r2, #0]
   b4f38:	b003      	add	sp, #12
   b4f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else if (notifyLow == true) {
   b4f3c:	4b26      	ldr	r3, [pc, #152]	; (b4fd8 <loop+0x1fc>)
   b4f3e:	781b      	ldrb	r3, [r3, #0]
   b4f40:	2b00      	cmp	r3, #0
   b4f42:	d0e0      	beq.n	b4f06 <loop+0x12a>
                Blynk.notify("Watch out, ambient light too low");
   b4f44:	4925      	ldr	r1, [pc, #148]	; (b4fdc <loop+0x200>)
   b4f46:	4816      	ldr	r0, [pc, #88]	; (b4fa0 <loop+0x1c4>)
   b4f48:	f7ff ff2c 	bl	b4da4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA33_cEEvRKT_>
   b4f4c:	e7db      	b.n	b4f06 <loop+0x12a>
            else if (ambientValue > maxValue)
   b4f4e:	4293      	cmp	r3, r2
   b4f50:	d911      	bls.n	b4f76 <loop+0x19a>
                digitalWrite(red, HIGH);
   b4f52:	2101      	movs	r1, #1
   b4f54:	2006      	movs	r0, #6
   b4f56:	f003 f824 	bl	b7fa2 <digitalWrite>
                digitalWrite(green, LOW);
   b4f5a:	2100      	movs	r1, #0
   b4f5c:	2007      	movs	r0, #7
   b4f5e:	f003 f820 	bl	b7fa2 <digitalWrite>
                digitalWrite(blue, LOW);
   b4f62:	2100      	movs	r1, #0
   b4f64:	2008      	movs	r0, #8
   b4f66:	f003 f81c 	bl	b7fa2 <digitalWrite>
                notifyBright = true;
   b4f6a:	2301      	movs	r3, #1
   b4f6c:	7023      	strb	r3, [r4, #0]
                notifyLow = false;
   b4f6e:	4b1a      	ldr	r3, [pc, #104]	; (b4fd8 <loop+0x1fc>)
   b4f70:	2200      	movs	r2, #0
                notifyLow = true;
   b4f72:	701a      	strb	r2, [r3, #0]
   b4f74:	e7e0      	b.n	b4f38 <loop+0x15c>
            else if (ambientValue < minValue)
   b4f76:	4a11      	ldr	r2, [pc, #68]	; (b4fbc <loop+0x1e0>)
   b4f78:	6812      	ldr	r2, [r2, #0]
   b4f7a:	4293      	cmp	r3, r2
   b4f7c:	d2dc      	bcs.n	b4f38 <loop+0x15c>
                digitalWrite(red, LOW);
   b4f7e:	2100      	movs	r1, #0
   b4f80:	2006      	movs	r0, #6
   b4f82:	f003 f80e 	bl	b7fa2 <digitalWrite>
                digitalWrite(green, LOW);
   b4f86:	2100      	movs	r1, #0
   b4f88:	2007      	movs	r0, #7
   b4f8a:	f003 f80a 	bl	b7fa2 <digitalWrite>
                digitalWrite(blue, HIGH);
   b4f8e:	2101      	movs	r1, #1
   b4f90:	2008      	movs	r0, #8
   b4f92:	f003 f806 	bl	b7fa2 <digitalWrite>
                notifyBright = false;
   b4f96:	2300      	movs	r3, #0
   b4f98:	7023      	strb	r3, [r4, #0]
                notifyLow = true;
   b4f9a:	2201      	movs	r2, #1
   b4f9c:	4b0e      	ldr	r3, [pc, #56]	; (b4fd8 <loop+0x1fc>)
   b4f9e:	e7e8      	b.n	b4f72 <loop+0x196>
   b4fa0:	2003e5c0 	.word	0x2003e5c0
   b4fa4:	2003e620 	.word	0x2003e620
   b4fa8:	2003e3e1 	.word	0x2003e3e1
   b4fac:	2003e628 	.word	0x2003e628
   b4fb0:	2003e6b4 	.word	0x2003e6b4
   b4fb4:	2003e624 	.word	0x2003e624
   b4fb8:	2003e3e0 	.word	0x2003e3e0
   b4fbc:	2003e6ac 	.word	0x2003e6ac
   b4fc0:	000baebe 	.word	0x000baebe
   b4fc4:	2003e6a4 	.word	0x2003e6a4
   b4fc8:	2003e6a8 	.word	0x2003e6a8
   b4fcc:	000baed5 	.word	0x000baed5
   b4fd0:	2003e6b0 	.word	0x2003e6b0
   b4fd4:	000baeec 	.word	0x000baeec
   b4fd8:	2003e6b1 	.word	0x2003e6b1
   b4fdc:	000baf25 	.word	0x000baf25

000b4fe0 <BlynkWidgetWrite2>:
{
   b4fe0:	b510      	push	{r4, lr}
    display.println("Darwin's Iphone");
   b4fe2:	4c1a      	ldr	r4, [pc, #104]	; (b504c <BlynkWidgetWrite2+0x6c>)
    Blynk.run(V1);
   b4fe4:	481a      	ldr	r0, [pc, #104]	; (b5050 <BlynkWidgetWrite2+0x70>)
   b4fe6:	2101      	movs	r1, #1
   b4fe8:	f7ff fc9a 	bl	b4920 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
    displaySetup();
   b4fec:	f7ff f972 	bl	b42d4 <_Z12displaySetupv>
    display.println("Darwin's Iphone");
   b4ff0:	4918      	ldr	r1, [pc, #96]	; (b5054 <BlynkWidgetWrite2+0x74>)
   b4ff2:	4620      	mov	r0, r4
   b4ff4:	f002 f8ad 	bl	b7152 <_ZN5Print7printlnEPKc>
    display.print("Lat: ");
   b4ff8:	4917      	ldr	r1, [pc, #92]	; (b5058 <BlynkWidgetWrite2+0x78>)
   b4ffa:	4620      	mov	r0, r4
   b4ffc:	f002 f896 	bl	b712c <_ZN5Print5printEPKc>
    display.println(latitude, 7);
   b5000:	4b16      	ldr	r3, [pc, #88]	; (b505c <BlynkWidgetWrite2+0x7c>)
   b5002:	2107      	movs	r1, #7
   b5004:	ed93 0a00 	vldr	s0, [r3]
   b5008:	4620      	mov	r0, r4
   b500a:	f002 f9a1 	bl	b7350 <_ZN5Print7printlnEfi>
    display.print("Lon: ");
   b500e:	4914      	ldr	r1, [pc, #80]	; (b5060 <BlynkWidgetWrite2+0x80>)
   b5010:	4620      	mov	r0, r4
   b5012:	f002 f88b 	bl	b712c <_ZN5Print5printEPKc>
    display.println(longitude, 7);
   b5016:	4b13      	ldr	r3, [pc, #76]	; (b5064 <BlynkWidgetWrite2+0x84>)
   b5018:	2107      	movs	r1, #7
   b501a:	ed93 0a00 	vldr	s0, [r3]
   b501e:	4620      	mov	r0, r4
   b5020:	f002 f996 	bl	b7350 <_ZN5Print7printlnEfi>
    display.print("Altitute: ");
   b5024:	4910      	ldr	r1, [pc, #64]	; (b5068 <BlynkWidgetWrite2+0x88>)
   b5026:	4620      	mov	r0, r4
   b5028:	f002 f880 	bl	b712c <_ZN5Print5printEPKc>
    display.println(altitude, 2);
   b502c:	4b0f      	ldr	r3, [pc, #60]	; (b506c <BlynkWidgetWrite2+0x8c>)
   b502e:	2102      	movs	r1, #2
   b5030:	ed93 0a00 	vldr	s0, [r3]
   b5034:	4620      	mov	r0, r4
   b5036:	f002 f98b 	bl	b7350 <_ZN5Print7printlnEfi>
    display.display();
   b503a:	4620      	mov	r0, r4
   b503c:	f001 f846 	bl	b60cc <_ZN16Adafruit_SSD13067displayEv>
}
   b5040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(2000);
   b5044:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5048:	f001 be28 	b.w	b6c9c <delay>
   b504c:	2003e628 	.word	0x2003e628
   b5050:	2003e5c0 	.word	0x2003e5c0
   b5054:	000baf46 	.word	0x000baf46
   b5058:	000baf56 	.word	0x000baf56
   b505c:	2003e69c 	.word	0x2003e69c
   b5060:	000baf5c 	.word	0x000baf5c
   b5064:	2003e6a0 	.word	0x2003e6a0
   b5068:	000baf62 	.word	0x000baf62
   b506c:	2003e61c 	.word	0x2003e61c

000b5070 <_GLOBAL__sub_I_Blynk>:
   b5070:	b538      	push	{r3, r4, r5, lr}
        : domain(NULL), port(0)
   b5072:	4d10      	ldr	r5, [pc, #64]	; (b50b4 <_GLOBAL__sub_I_Blynk+0x44>)
   b5074:	4628      	mov	r0, r5
   b5076:	f002 fd7b 	bl	b7b70 <_ZN9TCPClientC1Ev>
   b507a:	f105 001c 	add.w	r0, r5, #28
   b507e:	f001 ff13 	bl	b6ea8 <_ZN9IPAddressC1Ev>
        , state(CONNECTING)
   b5082:	4b0d      	ldr	r3, [pc, #52]	; (b50b8 <_GLOBAL__sub_I_Blynk+0x48>)
VCNL4040 proximitySensor;
   b5084:	480d      	ldr	r0, [pc, #52]	; (b50bc <_GLOBAL__sub_I_Blynk+0x4c>)
   b5086:	2400      	movs	r4, #0
   b5088:	e9c3 5400 	strd	r5, r4, [r3]
   b508c:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b5090:	e9c3 4404 	strd	r4, r4, [r3, #16]
   b5094:	619c      	str	r4, [r3, #24]
   b5096:	839c      	strh	r4, [r3, #28]
   b5098:	636c      	str	r4, [r5, #52]	; 0x34
   b509a:	872c      	strh	r4, [r5, #56]	; 0x38
   b509c:	f001 f909 	bl	b62b2 <_ZN8VCNL4040C1Ev>
OledWingAdafruit display;
   b50a0:	2107      	movs	r1, #7
   b50a2:	4807      	ldr	r0, [pc, #28]	; (b50c0 <_GLOBAL__sub_I_Blynk+0x50>)
   b50a4:	f001 fa94 	bl	b65d0 <_ZN16OledWingAdafruitC1Ei>
SYSTEM_THREAD(ENABLED)
   b50a8:	4621      	mov	r1, r4
   b50aa:	2001      	movs	r0, #1
   b50ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
SYSTEM_THREAD(ENABLED)
   b50b0:	f001 bd1c 	b.w	b6aec <system_thread_set_state>
   b50b4:	2003e5e0 	.word	0x2003e5e0
   b50b8:	2003e5c0 	.word	0x2003e5c0
   b50bc:	2003e6b4 	.word	0x2003e6b4
   b50c0:	2003e628 	.word	0x2003e628

000b50c4 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b50c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b50c8:	b085      	sub	sp, #20
   b50ca:	461f      	mov	r7, r3
   b50cc:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b50d0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b50d4:	eba8 0902 	sub.w	r9, r8, r2
   b50d8:	eba7 0a01 	sub.w	sl, r7, r1
   b50dc:	f1b9 0f00 	cmp.w	r9, #0
   b50e0:	bfb8      	it	lt
   b50e2:	f1c9 0900 	rsblt	r9, r9, #0
   b50e6:	f1ba 0f00 	cmp.w	sl, #0
   b50ea:	bfb8      	it	lt
   b50ec:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b50f0:	45d1      	cmp	r9, sl
        uint16_t color) {
   b50f2:	4683      	mov	fp, r0
   b50f4:	460c      	mov	r4, r1
   b50f6:	4615      	mov	r5, r2
    if (steep) {
   b50f8:	dd04      	ble.n	b5104 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b50fa:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b50fc:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b50fe:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b5100:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b5102:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b5104:	42bc      	cmp	r4, r7
   b5106:	dd05      	ble.n	b5114 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b5108:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b510a:	4645      	mov	r5, r8
   b510c:	4690      	mov	r8, r2
    if (x0 > x1) {
   b510e:	4622      	mov	r2, r4
   b5110:	463c      	mov	r4, r7
   b5112:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b5114:	1b3e      	subs	r6, r7, r4
   b5116:	b2b2      	uxth	r2, r6
   b5118:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b511a:	eba8 0205 	sub.w	r2, r8, r5
   b511e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b5122:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b5126:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b512a:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b512e:	4545      	cmp	r5, r8
   b5130:	bfb4      	ite	lt
   b5132:	2201      	movlt	r2, #1
   b5134:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b5138:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b513a:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b513c:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b513e:	42bc      	cmp	r4, r7
   b5140:	dc1c      	bgt.n	b517c <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b5142:	f8db 2000 	ldr.w	r2, [fp]
   b5146:	9303      	str	r3, [sp, #12]
        if (steep) {
   b5148:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b514a:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b514e:	bfc7      	ittee	gt
   b5150:	4629      	movgt	r1, r5
   b5152:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b5154:	462a      	movle	r2, r5
   b5156:	4621      	movle	r1, r4
   b5158:	4658      	mov	r0, fp
   b515a:	47c0      	blx	r8
        }
        err -= dy;
   b515c:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b515e:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b5160:	1ab6      	subs	r6, r6, r2
   b5162:	b2b1      	uxth	r1, r6
   b5164:	b236      	sxth	r6, r6
        if (err < 0) {
   b5166:	2e00      	cmp	r6, #0
   b5168:	da05      	bge.n	b5176 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b516a:	9a02      	ldr	r2, [sp, #8]
   b516c:	4415      	add	r5, r2
            err += dx;
   b516e:	9a00      	ldr	r2, [sp, #0]
   b5170:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b5172:	b22d      	sxth	r5, r5
            err += dx;
   b5174:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b5176:	3401      	adds	r4, #1
   b5178:	b224      	sxth	r4, r4
   b517a:	e7e0      	b.n	b513e <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b517c:	b005      	add	sp, #20
   b517e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5182 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b5182:	4770      	bx	lr

000b5184 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b5184:	b410      	push	{r4}
    drawPixel(x, y, color);
   b5186:	6804      	ldr	r4, [r0, #0]
   b5188:	6924      	ldr	r4, [r4, #16]
   b518a:	46a4      	mov	ip, r4
}
   b518c:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b5190:	4760      	bx	ip

000b5192 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5192:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b5194:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b5196:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b519a:	9502      	str	r5, [sp, #8]
   b519c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b519e:	46a4      	mov	ip, r4
}
   b51a0:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b51a2:	4760      	bx	ip

000b51a4 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b51a4:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b51a6:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b51a8:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b51ac:	9502      	str	r5, [sp, #8]
   b51ae:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b51b0:	46a4      	mov	ip, r4
}
   b51b2:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b51b4:	4760      	bx	ip

000b51b6 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b51b6:	b470      	push	{r4, r5, r6}
   b51b8:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b51bc:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b51c0:	6804      	ldr	r4, [r0, #0]
   b51c2:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b51c6:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b51c8:	46a4      	mov	ip, r4
}
   b51ca:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b51cc:	4760      	bx	ip

000b51ce <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b51ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b51d2:	461c      	mov	r4, r3
    startWrite();
   b51d4:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b51d6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b51da:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b51dc:	4605      	mov	r5, r0
   b51de:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b51e0:	3c01      	subs	r4, #1
   b51e2:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b51e4:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b51e6:	b224      	sxth	r4, r4
    startWrite();
   b51e8:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b51ea:	682b      	ldr	r3, [r5, #0]
   b51ec:	f8cd 8004 	str.w	r8, [sp, #4]
   b51f0:	9400      	str	r4, [sp, #0]
   b51f2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b51f4:	4628      	mov	r0, r5
   b51f6:	463b      	mov	r3, r7
   b51f8:	4632      	mov	r2, r6
   b51fa:	4639      	mov	r1, r7
   b51fc:	47a0      	blx	r4
    endWrite();
   b51fe:	682b      	ldr	r3, [r5, #0]
   b5200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5202:	4628      	mov	r0, r5
}
   b5204:	b002      	add	sp, #8
   b5206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b520a:	4718      	bx	r3

000b520c <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b520c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5210:	461d      	mov	r5, r3
    startWrite();
   b5212:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b5214:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5218:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b521a:	4604      	mov	r4, r0
   b521c:	4617      	mov	r7, r2
   b521e:	460e      	mov	r6, r1
    startWrite();
   b5220:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b5222:	e9cd 7800 	strd	r7, r8, [sp]
   b5226:	6822      	ldr	r2, [r4, #0]
   b5228:	1e6b      	subs	r3, r5, #1
   b522a:	4433      	add	r3, r6
   b522c:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b522e:	4620      	mov	r0, r4
   b5230:	b21b      	sxth	r3, r3
   b5232:	463a      	mov	r2, r7
   b5234:	4631      	mov	r1, r6
   b5236:	47a8      	blx	r5
    endWrite();
   b5238:	6823      	ldr	r3, [r4, #0]
   b523a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b523c:	4620      	mov	r0, r4
}
   b523e:	b002      	add	sp, #8
   b5240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5244:	4718      	bx	r3

000b5246 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5246:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b524a:	461e      	mov	r6, r3
    startWrite();
   b524c:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b524e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b5252:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5254:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5258:	460c      	mov	r4, r1
   b525a:	4605      	mov	r5, r0
   b525c:	4617      	mov	r7, r2
    startWrite();
   b525e:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b5260:	4426      	add	r6, r4
   b5262:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b5264:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b5266:	da0b      	bge.n	b5280 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b5268:	f8cd 8000 	str.w	r8, [sp]
   b526c:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5270:	4621      	mov	r1, r4
   b5272:	464b      	mov	r3, r9
   b5274:	463a      	mov	r2, r7
   b5276:	4628      	mov	r0, r5
   b5278:	3401      	adds	r4, #1
   b527a:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b527c:	b224      	sxth	r4, r4
   b527e:	e7f0      	b.n	b5262 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b5280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5282:	4628      	mov	r0, r5
}
   b5284:	b002      	add	sp, #8
   b5286:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b528a:	4718      	bx	r3

000b528c <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b528c:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b528e:	6802      	ldr	r2, [r0, #0]
   b5290:	9101      	str	r1, [sp, #4]
   b5292:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5296:	9100      	str	r1, [sp, #0]
   b5298:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b529a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b529e:	2200      	movs	r2, #0
   b52a0:	4611      	mov	r1, r2
   b52a2:	47a0      	blx	r4
}
   b52a4:	b002      	add	sp, #8
   b52a6:	bd10      	pop	{r4, pc}

000b52a8 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b52a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b52ac:	4299      	cmp	r1, r3
        uint16_t color) {
   b52ae:	4616      	mov	r6, r2
   b52b0:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b52b4:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b52b8:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b52ba:	4680      	mov	r8, r0
   b52bc:	460d      	mov	r5, r1
   b52be:	461c      	mov	r4, r3
    if(x0 == x1){
   b52c0:	d113      	bne.n	b52ea <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b52c2:	42be      	cmp	r6, r7
   b52c4:	bfc8      	it	gt
   b52c6:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b52c8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b52cc:	bfc4      	itt	gt
   b52ce:	463e      	movgt	r6, r7
   b52d0:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b52d2:	1c7b      	adds	r3, r7, #1
   b52d4:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b52d6:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b52d8:	b21b      	sxth	r3, r3
   b52da:	4632      	mov	r2, r6
   b52dc:	4629      	mov	r1, r5
   b52de:	4640      	mov	r0, r8
   b52e0:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b52e2:	b003      	add	sp, #12
   b52e4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b52e8:	4760      	bx	ip
    } else if(y0 == y1){
   b52ea:	42be      	cmp	r6, r7
   b52ec:	d10a      	bne.n	b5304 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b52ee:	4299      	cmp	r1, r3
   b52f0:	bfc2      	ittt	gt
   b52f2:	460b      	movgt	r3, r1
   b52f4:	4625      	movgt	r5, r4
   b52f6:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b52f8:	1c63      	adds	r3, r4, #1
   b52fa:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b52fe:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5300:	1b5b      	subs	r3, r3, r5
   b5302:	e7e9      	b.n	b52d8 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b5304:	6953      	ldr	r3, [r2, #20]
   b5306:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b5308:	e9cd 7900 	strd	r7, r9, [sp]
   b530c:	f8d8 3000 	ldr.w	r3, [r8]
   b5310:	4640      	mov	r0, r8
   b5312:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b5314:	4632      	mov	r2, r6
   b5316:	4623      	mov	r3, r4
   b5318:	4629      	mov	r1, r5
   b531a:	47b8      	blx	r7
        endWrite();
   b531c:	f8d8 3000 	ldr.w	r3, [r8]
   b5320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5322:	4640      	mov	r0, r8
}
   b5324:	b003      	add	sp, #12
   b5326:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b532a:	4718      	bx	r3

000b532c <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b532c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5330:	461d      	mov	r5, r3
    startWrite();
   b5332:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5334:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b5338:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b533a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b533e:	4604      	mov	r4, r0
   b5340:	460f      	mov	r7, r1
   b5342:	4616      	mov	r6, r2
    startWrite();
   b5344:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b5346:	6823      	ldr	r3, [r4, #0]
   b5348:	f8cd 8000 	str.w	r8, [sp]
   b534c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5350:	4632      	mov	r2, r6
   b5352:	462b      	mov	r3, r5
   b5354:	4639      	mov	r1, r7
   b5356:	4620      	mov	r0, r4
   b5358:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b535a:	6823      	ldr	r3, [r4, #0]
   b535c:	f8cd 8000 	str.w	r8, [sp]
   b5360:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b5364:	4432      	add	r2, r6
   b5366:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b536a:	4639      	mov	r1, r7
   b536c:	462b      	mov	r3, r5
   b536e:	4620      	mov	r0, r4
   b5370:	b212      	sxth	r2, r2
   b5372:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b5374:	6823      	ldr	r3, [r4, #0]
   b5376:	f8cd 8000 	str.w	r8, [sp]
   b537a:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b537e:	4632      	mov	r2, r6
   b5380:	464b      	mov	r3, r9
   b5382:	4639      	mov	r1, r7
   b5384:	4620      	mov	r0, r4
   b5386:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b5388:	1e6b      	subs	r3, r5, #1
   b538a:	19d9      	adds	r1, r3, r7
   b538c:	6823      	ldr	r3, [r4, #0]
   b538e:	f8cd 8000 	str.w	r8, [sp]
   b5392:	6a1d      	ldr	r5, [r3, #32]
   b5394:	4620      	mov	r0, r4
   b5396:	464b      	mov	r3, r9
   b5398:	4632      	mov	r2, r6
   b539a:	b209      	sxth	r1, r1
   b539c:	47a8      	blx	r5
    endWrite();
   b539e:	6823      	ldr	r3, [r4, #0]
   b53a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b53a2:	4620      	mov	r0, r4
}
   b53a4:	b002      	add	sp, #8
   b53a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b53aa:	4718      	bx	r3

000b53ac <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b53ac:	4770      	bx	lr

000b53ae <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b53ae:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b53b2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b53b6:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b53b8:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b53ba:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b53be:	bf59      	ittee	pl
   b53c0:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b53c2:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b53c4:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b53c6:	81c3      	strhmi	r3, [r0, #14]
}
   b53c8:	4770      	bx	lr
	...

000b53cc <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b53cc:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b53ce:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b53d0:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b53d2:	4a07      	ldr	r2, [pc, #28]	; (b53f0 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b53d4:	4d07      	ldr	r5, [pc, #28]	; (b53f4 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b53d6:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b53d8:	2400      	movs	r4, #0
    _width    = WIDTH;
   b53da:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b53dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b53e0:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b53e4:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b53e6:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b53e8:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b53ea:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b53ec:	6204      	str	r4, [r0, #32]
}
   b53ee:	bd30      	pop	{r4, r5, pc}
   b53f0:	01000101 	.word	0x01000101
   b53f4:	000bb4d0 	.word	0x000bb4d0

000b53f8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b53f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b53fc:	b089      	sub	sp, #36	; 0x24
   b53fe:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b5402:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5404:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b5408:	9304      	str	r3, [sp, #16]
   b540a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b540e:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5410:	9305      	str	r3, [sp, #20]
   b5412:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b5416:	4604      	mov	r4, r0
    startWrite();
   b5418:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b541a:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b541e:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5422:	bf48      	it	mi
   b5424:	f108 020e 	addmi.w	r2, r8, #14
   b5428:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b542c:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b542e:	4635      	mov	r5, r6
   b5430:	9b03      	ldr	r3, [sp, #12]
   b5432:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b5434:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b5438:	189a      	adds	r2, r3, r2
   b543a:	9b05      	ldr	r3, [sp, #20]
   b543c:	428b      	cmp	r3, r1
   b543e:	b212      	sxth	r2, r2
   b5440:	dd27      	ble.n	b5492 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5442:	9b04      	ldr	r3, [sp, #16]
   b5444:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b5446:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b544a:	9306      	str	r3, [sp, #24]
   b544c:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b5450:	4580      	cmp	r8, r0
   b5452:	fa1f f189 	uxth.w	r1, r9
   b5456:	dd17      	ble.n	b5488 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b5458:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b545a:	bf05      	ittet	eq
   b545c:	9b06      	ldreq	r3, [sp, #24]
   b545e:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b5460:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5462:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b5464:	bf18      	it	ne
   b5466:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b5468:	062b      	lsls	r3, r5, #24
   b546a:	d50a      	bpl.n	b5482 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b546c:	9b02      	ldr	r3, [sp, #8]
   b546e:	6820      	ldr	r0, [r4, #0]
   b5470:	9207      	str	r2, [sp, #28]
   b5472:	4419      	add	r1, r3
   b5474:	6983      	ldr	r3, [r0, #24]
   b5476:	b209      	sxth	r1, r1
   b5478:	461f      	mov	r7, r3
   b547a:	4620      	mov	r0, r4
   b547c:	4653      	mov	r3, sl
   b547e:	47b8      	blx	r7
   b5480:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b5482:	f109 0901 	add.w	r9, r9, #1
   b5486:	e7e1      	b.n	b544c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b5488:	9b01      	ldr	r3, [sp, #4]
   b548a:	3301      	adds	r3, #1
   b548c:	9301      	str	r3, [sp, #4]
   b548e:	445e      	add	r6, fp
   b5490:	e7ce      	b.n	b5430 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b5492:	6823      	ldr	r3, [r4, #0]
   b5494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5496:	4620      	mov	r0, r4
}
   b5498:	b009      	add	sp, #36	; 0x24
   b549a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b549e:	4718      	bx	r3

000b54a0 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b54a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b54a4:	ed2d 8b02 	vpush	{d8}
   b54a8:	b091      	sub	sp, #68	; 0x44
   b54aa:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b54ac:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b54ae:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b54b2:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b54b6:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b54ba:	9103      	str	r1, [sp, #12]
   b54bc:	461f      	mov	r7, r3
   b54be:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b54c2:	9304      	str	r3, [sp, #16]
   b54c4:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b54c6:	2a00      	cmp	r2, #0
   b54c8:	f040 80c5 	bne.w	b5656 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b54cc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b54d0:	428b      	cmp	r3, r1
   b54d2:	f340 814c 	ble.w	b576e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b54d6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b54da:	42b3      	cmp	r3, r6
   b54dc:	f340 8147 	ble.w	b576e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b54e0:	2306      	movs	r3, #6
   b54e2:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b54e6:	2b00      	cmp	r3, #0
   b54e8:	f340 8141 	ble.w	b576e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b54ec:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b54f0:	2b00      	cmp	r3, #0
   b54f2:	f340 813c 	ble.w	b576e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b54f6:	7f03      	ldrb	r3, [r0, #28]
   b54f8:	b91b      	cbnz	r3, b5502 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b54fa:	2faf      	cmp	r7, #175	; 0xaf
   b54fc:	bf84      	itt	hi
   b54fe:	3701      	addhi	r7, #1
   b5500:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b5502:	f8db 3000 	ldr.w	r3, [fp]
   b5506:	4658      	mov	r0, fp
   b5508:	695b      	ldr	r3, [r3, #20]
   b550a:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b550c:	2205      	movs	r2, #5
   b550e:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5510:	2200      	movs	r2, #0
   b5512:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5514:	4a98      	ldr	r2, [pc, #608]	; (b5778 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b5516:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b551a:	18d3      	adds	r3, r2, r3
   b551c:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b551e:	b2b3      	uxth	r3, r6
   b5520:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5522:	9a05      	ldr	r2, [sp, #20]
   b5524:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5526:	5c9b      	ldrb	r3, [r3, r2]
   b5528:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b552a:	b2ab      	uxth	r3, r5
   b552c:	930b      	str	r3, [sp, #44]	; 0x2c
   b552e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b5532:	9308      	str	r3, [sp, #32]
   b5534:	9b03      	ldr	r3, [sp, #12]
   b5536:	fb02 f905 	mul.w	r9, r2, r5
   b553a:	fa19 f983 	uxtah	r9, r9, r3
   b553e:	fa0f f389 	sxth.w	r3, r9
   b5542:	ee08 3a10 	vmov	s16, r3
   b5546:	2308      	movs	r3, #8
   b5548:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b554a:	9b03      	ldr	r3, [sp, #12]
   b554c:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5550:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b5554:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b5558:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b555a:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b555e:	07d2      	lsls	r2, r2, #31
   b5560:	d552      	bpl.n	b5608 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b5562:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5564:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5568:	d13e      	bne.n	b55e8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b556a:	2c01      	cmp	r4, #1
   b556c:	d13c      	bne.n	b55e8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b556e:	699b      	ldr	r3, [r3, #24]
   b5570:	9906      	ldr	r1, [sp, #24]
   b5572:	461f      	mov	r7, r3
   b5574:	9b04      	ldr	r3, [sp, #16]
   b5576:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b5578:	b212      	sxth	r2, r2
   b557a:	4651      	mov	r1, sl
   b557c:	4658      	mov	r0, fp
   b557e:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5580:	f109 0301 	add.w	r3, r9, #1
   b5584:	fa4f f983 	sxtb.w	r9, r3
   b5588:	9b07      	ldr	r3, [sp, #28]
   b558a:	085b      	lsrs	r3, r3, #1
   b558c:	9307      	str	r3, [sp, #28]
   b558e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5590:	3b01      	subs	r3, #1
   b5592:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5596:	930a      	str	r3, [sp, #40]	; 0x28
   b5598:	d1de      	bne.n	b5558 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b559a:	9f05      	ldr	r7, [sp, #20]
   b559c:	3701      	adds	r7, #1
   b559e:	b27b      	sxtb	r3, r7
   b55a0:	9305      	str	r3, [sp, #20]
   b55a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b55a4:	3b01      	subs	r3, #1
   b55a6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b55aa:	9309      	str	r3, [sp, #36]	; 0x24
   b55ac:	d1b9      	bne.n	b5522 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b55ae:	9b04      	ldr	r3, [sp, #16]
   b55b0:	4543      	cmp	r3, r8
   b55b2:	d00f      	beq.n	b55d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b55b4:	2d01      	cmp	r5, #1
   b55b6:	f8db 3000 	ldr.w	r3, [fp]
   b55ba:	d13b      	bne.n	b5634 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b55bc:	2c01      	cmp	r4, #1
   b55be:	d139      	bne.n	b5634 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b55c0:	9908      	ldr	r1, [sp, #32]
   b55c2:	f8cd 8000 	str.w	r8, [sp]
   b55c6:	3105      	adds	r1, #5
   b55c8:	6a1c      	ldr	r4, [r3, #32]
   b55ca:	4632      	mov	r2, r6
   b55cc:	2308      	movs	r3, #8
   b55ce:	b209      	sxth	r1, r1
   b55d0:	4658      	mov	r0, fp
   b55d2:	47a0      	blx	r4
        endWrite();
   b55d4:	f8db 3000 	ldr.w	r3, [fp]
   b55d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b55da:	4658      	mov	r0, fp
}
   b55dc:	b011      	add	sp, #68	; 0x44
   b55de:	ecbd 8b02 	vpop	{d8}
   b55e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b55e6:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b55e8:	9906      	ldr	r1, [sp, #24]
   b55ea:	fb14 f202 	smulbb	r2, r4, r2
   b55ee:	440a      	add	r2, r1
   b55f0:	9904      	ldr	r1, [sp, #16]
   b55f2:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b55f4:	9400      	str	r4, [sp, #0]
   b55f6:	69db      	ldr	r3, [r3, #28]
   b55f8:	ee18 1a10 	vmov	r1, s16
   b55fc:	461f      	mov	r7, r3
   b55fe:	b212      	sxth	r2, r2
   b5600:	462b      	mov	r3, r5
   b5602:	4658      	mov	r0, fp
   b5604:	47b8      	blx	r7
   b5606:	e7bb      	b.n	b5580 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b5608:	9a04      	ldr	r2, [sp, #16]
   b560a:	4542      	cmp	r2, r8
   b560c:	d0b8      	beq.n	b5580 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b560e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5610:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5614:	d107      	bne.n	b5626 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b5616:	2c01      	cmp	r4, #1
   b5618:	d105      	bne.n	b5626 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b561a:	699b      	ldr	r3, [r3, #24]
   b561c:	9906      	ldr	r1, [sp, #24]
   b561e:	461f      	mov	r7, r3
   b5620:	440a      	add	r2, r1
   b5622:	4643      	mov	r3, r8
   b5624:	e7a8      	b.n	b5578 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5626:	9906      	ldr	r1, [sp, #24]
   b5628:	f8cd 8004 	str.w	r8, [sp, #4]
   b562c:	fb14 f202 	smulbb	r2, r4, r2
   b5630:	440a      	add	r2, r1
   b5632:	e7df      	b.n	b55f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b5634:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5636:	f8cd 8004 	str.w	r8, [sp, #4]
   b563a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b563e:	9a08      	ldr	r2, [sp, #32]
   b5640:	00e4      	lsls	r4, r4, #3
   b5642:	440a      	add	r2, r1
   b5644:	4611      	mov	r1, r2
   b5646:	9400      	str	r4, [sp, #0]
   b5648:	69dc      	ldr	r4, [r3, #28]
   b564a:	4632      	mov	r2, r6
   b564c:	462b      	mov	r3, r5
   b564e:	b209      	sxth	r1, r1
   b5650:	4658      	mov	r0, fp
   b5652:	47a0      	blx	r4
        endWrite();
   b5654:	e7be      	b.n	b55d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5656:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b5658:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b565a:	6812      	ldr	r2, [r2, #0]
   b565c:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b565e:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b5660:	b2ff      	uxtb	r7, r7
   b5662:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b5666:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b566a:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b566c:	789a      	ldrb	r2, [r3, #2]
   b566e:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b5670:	78da      	ldrb	r2, [r3, #3]
   b5672:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b5674:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5676:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b567a:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b567e:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b5680:	d801      	bhi.n	b5686 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b5682:	2c01      	cmp	r4, #1
   b5684:	d957      	bls.n	b5736 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b5686:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b568a:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b568c:	fa0f f38a 	sxth.w	r3, sl
   b5690:	9307      	str	r3, [sp, #28]
        startWrite();
   b5692:	f8db 3000 	ldr.w	r3, [fp]
   b5696:	4658      	mov	r0, fp
   b5698:	695b      	ldr	r3, [r3, #20]
   b569a:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b569c:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b569e:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b56a2:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b56a4:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b56a8:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b56aa:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b56ac:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b56ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b56b0:	429f      	cmp	r7, r3
   b56b2:	d28f      	bcs.n	b55d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b56b4:	9b07      	ldr	r3, [sp, #28]
   b56b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b56b8:	443b      	add	r3, r7
   b56ba:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b56be:	2200      	movs	r2, #0
   b56c0:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b56c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b56c4:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b56c6:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b56ca:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b56ce:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b56d2:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b56d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b56d6:	9905      	ldr	r1, [sp, #20]
   b56d8:	4291      	cmp	r1, r2
   b56da:	d241      	bcs.n	b5760 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b56dc:	1c5a      	adds	r2, r3, #1
   b56de:	b2d2      	uxtb	r2, r2
   b56e0:	075b      	lsls	r3, r3, #29
   b56e2:	920d      	str	r2, [sp, #52]	; 0x34
   b56e4:	d107      	bne.n	b56f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b56e6:	9b06      	ldr	r3, [sp, #24]
   b56e8:	9906      	ldr	r1, [sp, #24]
   b56ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b56ec:	3301      	adds	r3, #1
   b56ee:	b29b      	uxth	r3, r3
   b56f0:	f812 9001 	ldrb.w	r9, [r2, r1]
   b56f4:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b56f6:	f019 0f80 	tst.w	r9, #128	; 0x80
   b56fa:	d012      	beq.n	b5722 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b56fc:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b56fe:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5702:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b5706:	d11a      	bne.n	b573e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b5708:	2c01      	cmp	r4, #1
   b570a:	d118      	bne.n	b573e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b570c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b570e:	699b      	ldr	r3, [r3, #24]
   b5710:	4411      	add	r1, r2
   b5712:	9a05      	ldr	r2, [sp, #20]
   b5714:	4411      	add	r1, r2
   b5716:	461e      	mov	r6, r3
   b5718:	4652      	mov	r2, sl
   b571a:	9b04      	ldr	r3, [sp, #16]
   b571c:	b209      	sxth	r1, r1
   b571e:	4658      	mov	r0, fp
   b5720:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b5722:	9e05      	ldr	r6, [sp, #20]
   b5724:	3601      	adds	r6, #1
   b5726:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b5728:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b572c:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b572e:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b5732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b5734:	e7ce      	b.n	b56d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b5736:	2300      	movs	r3, #0
   b5738:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b573c:	e7a9      	b.n	b5692 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b573e:	9805      	ldr	r0, [sp, #20]
   b5740:	9a08      	ldr	r2, [sp, #32]
   b5742:	4402      	add	r2, r0
   b5744:	fb02 1105 	mla	r1, r2, r5, r1
   b5748:	9a04      	ldr	r2, [sp, #16]
   b574a:	e9cd 4200 	strd	r4, r2, [sp]
   b574e:	69db      	ldr	r3, [r3, #28]
   b5750:	ee18 2a10 	vmov	r2, s16
   b5754:	461e      	mov	r6, r3
   b5756:	b209      	sxth	r1, r1
   b5758:	462b      	mov	r3, r5
   b575a:	4658      	mov	r0, fp
   b575c:	47b0      	blx	r6
   b575e:	e7e0      	b.n	b5722 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b5760:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b5762:	3701      	adds	r7, #1
   b5764:	4498      	add	r8, r3
   b5766:	fa5f f888 	uxtb.w	r8, r8
   b576a:	b2ff      	uxtb	r7, r7
   b576c:	e79f      	b.n	b56ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b576e:	b011      	add	sp, #68	; 0x44
   b5770:	ecbd 8b02 	vpop	{d8}
   b5774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5778:	000bafc6 	.word	0x000bafc6

000b577c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b577c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b577e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b5780:	b085      	sub	sp, #20
   b5782:	4604      	mov	r4, r0
   b5784:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b5786:	2a00      	cmp	r2, #0
   b5788:	d134      	bne.n	b57f4 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b578a:	290a      	cmp	r1, #10
   b578c:	d108      	bne.n	b57a0 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b578e:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b5790:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b5792:	7e42      	ldrb	r2, [r0, #25]
   b5794:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b5798:	8263      	strh	r3, [r4, #18]
}
   b579a:	2001      	movs	r0, #1
   b579c:	b005      	add	sp, #20
   b579e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b57a0:	290d      	cmp	r1, #13
   b57a2:	d0fa      	beq.n	b579a <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b57a4:	7ee1      	ldrb	r1, [r4, #27]
   b57a6:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b57a8:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b57aa:	b171      	cbz	r1, b57ca <_ZN12Adafruit_GFX5writeEh+0x4e>
   b57ac:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b57b0:	2106      	movs	r1, #6
   b57b2:	fb11 6100 	smlabb	r1, r1, r0, r6
   b57b6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b57ba:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b57bc:	bfc1      	itttt	gt
   b57be:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b57c2:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b57c4:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b57c8:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b57ca:	8ae2      	ldrh	r2, [r4, #22]
   b57cc:	9201      	str	r2, [sp, #4]
   b57ce:	8aa2      	ldrh	r2, [r4, #20]
   b57d0:	9200      	str	r2, [sp, #0]
   b57d2:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b57d6:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b57da:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b57de:	4620      	mov	r0, r4
   b57e0:	f7ff fe5e 	bl	b54a0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b57e4:	7e23      	ldrb	r3, [r4, #24]
   b57e6:	8a22      	ldrh	r2, [r4, #16]
   b57e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b57ec:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b57f0:	8223      	strh	r3, [r4, #16]
   b57f2:	e7d2      	b.n	b579a <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b57f4:	290a      	cmp	r1, #10
   b57f6:	d107      	bne.n	b5808 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b57f8:	2300      	movs	r3, #0
   b57fa:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b57fc:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b57fe:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b5800:	8a43      	ldrh	r3, [r0, #18]
   b5802:	fb01 3302 	mla	r3, r1, r2, r3
   b5806:	e7c7      	b.n	b5798 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b5808:	290d      	cmp	r1, #13
   b580a:	d0c6      	beq.n	b579a <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b580c:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b580e:	42a9      	cmp	r1, r5
   b5810:	d3c3      	bcc.n	b579a <_ZN12Adafruit_GFX5writeEh+0x1e>
   b5812:	7a51      	ldrb	r1, [r2, #9]
   b5814:	4299      	cmp	r1, r3
   b5816:	d3c0      	bcc.n	b579a <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b5818:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b581a:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b581c:	b2ed      	uxtb	r5, r5
   b581e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b5822:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b5824:	b328      	cbz	r0, b5872 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b5826:	78e9      	ldrb	r1, [r5, #3]
   b5828:	b319      	cbz	r1, b5872 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b582a:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b582c:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b582e:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b5830:	b191      	cbz	r1, b5858 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b5832:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b5836:	4408      	add	r0, r1
   b5838:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b583c:	fb06 1100 	mla	r1, r6, r0, r1
   b5840:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b5844:	4281      	cmp	r1, r0
   b5846:	dd07      	ble.n	b5858 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b5848:	2000      	movs	r0, #0
   b584a:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b584c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b5850:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b5852:	fb02 1207 	mla	r2, r2, r7, r1
   b5856:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b5858:	8ae2      	ldrh	r2, [r4, #22]
   b585a:	9201      	str	r2, [sp, #4]
   b585c:	8aa2      	ldrh	r2, [r4, #20]
   b585e:	9200      	str	r2, [sp, #0]
   b5860:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b5864:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b5868:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b586c:	4620      	mov	r0, r4
   b586e:	f7ff fe17 	bl	b54a0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b5872:	7929      	ldrb	r1, [r5, #4]
   b5874:	7e22      	ldrb	r2, [r4, #24]
   b5876:	8a23      	ldrh	r3, [r4, #16]
   b5878:	fb01 3302 	mla	r3, r1, r2, r3
   b587c:	e7b8      	b.n	b57f0 <_ZN12Adafruit_GFX5writeEh+0x74>

000b587e <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b587e:	2901      	cmp	r1, #1
   b5880:	bf38      	it	cc
   b5882:	2101      	movcc	r1, #1
   b5884:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b5886:	7641      	strb	r1, [r0, #25]
}
   b5888:	4770      	bx	lr

000b588a <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b588a:	4770      	bx	lr

000b588c <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b588c:	b510      	push	{r4, lr}
  }
   b588e:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b5890:	4604      	mov	r4, r0
  }
   b5892:	f7fe fc04 	bl	b409e <_ZdlPvj>
   b5896:	4620      	mov	r0, r4
   b5898:	bd10      	pop	{r4, pc}

000b589a <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b589a:	b40e      	push	{r1, r2, r3}
   b589c:	b503      	push	{r0, r1, lr}
   b589e:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b58a0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b58a2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b58a6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b58a8:	f001 fd61 	bl	b736e <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b58ac:	b002      	add	sp, #8
   b58ae:	f85d eb04 	ldr.w	lr, [sp], #4
   b58b2:	b003      	add	sp, #12
   b58b4:	4770      	bx	lr
	...

000b58b8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b58b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b58ba:	4604      	mov	r4, r0
   b58bc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b58be:	7922      	ldrb	r2, [r4, #4]
   b58c0:	68a3      	ldr	r3, [r4, #8]
   b58c2:	b132      	cbz	r2, b58d2 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b58c4:	b9a3      	cbnz	r3, b58f0 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b58c6:	490b      	ldr	r1, [pc, #44]	; (b58f4 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b58c8:	b002      	add	sp, #8
   b58ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b58ce:	f001 bc2d 	b.w	b712c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b58d2:	4a09      	ldr	r2, [pc, #36]	; (b58f8 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b58d4:	7b26      	ldrb	r6, [r4, #12]
   b58d6:	4d09      	ldr	r5, [pc, #36]	; (b58fc <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b58d8:	4909      	ldr	r1, [pc, #36]	; (b5900 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b58da:	7b64      	ldrb	r4, [r4, #13]
   b58dc:	2e01      	cmp	r6, #1
   b58de:	bf18      	it	ne
   b58e0:	4629      	movne	r1, r5
   b58e2:	e9cd 1400 	strd	r1, r4, [sp]
   b58e6:	4907      	ldr	r1, [pc, #28]	; (b5904 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b58e8:	f7ff ffd7 	bl	b589a <_ZN5Print6printfEPKcz>
  }
   b58ec:	b002      	add	sp, #8
   b58ee:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b58f0:	4a05      	ldr	r2, [pc, #20]	; (b5908 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b58f2:	e7ef      	b.n	b58d4 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b58f4:	000bb531 	.word	0x000bb531
   b58f8:	000baf6c 	.word	0x000baf6c
   b58fc:	000bb52d 	.word	0x000bb52d
   b5900:	000bb529 	.word	0x000bb529
   b5904:	000bb547 	.word	0x000bb547
   b5908:	000bb520 	.word	0x000bb520

000b590c <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b590c:	b510      	push	{r4, lr}
   b590e:	4b04      	ldr	r3, [pc, #16]	; (b5920 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b5910:	6003      	str	r3, [r0, #0]
   b5912:	4604      	mov	r4, r0
  if(buffer) {
   b5914:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5916:	b108      	cbz	r0, b591c <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b5918:	f001 f97c 	bl	b6c14 <free>
    buffer = NULL;
  }
}
   b591c:	4620      	mov	r0, r4
   b591e:	bd10      	pop	{r4, pc}
   b5920:	000bba20 	.word	0x000bba20

000b5924 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b5924:	b510      	push	{r4, lr}
   b5926:	4604      	mov	r4, r0
}
   b5928:	f7ff fff0 	bl	b590c <_ZN16Adafruit_SSD1306D1Ev>
   b592c:	4620      	mov	r0, r4
   b592e:	2150      	movs	r1, #80	; 0x50
   b5930:	f7fe fbb5 	bl	b409e <_ZdlPvj>
   b5934:	4620      	mov	r0, r4
   b5936:	bd10      	pop	{r4, pc}

000b5938 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b5938:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b593a:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b593c:	db4b      	blt.n	b59d6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b593e:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b5942:	428c      	cmp	r4, r1
   b5944:	dd47      	ble.n	b59d6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5946:	2a00      	cmp	r2, #0
   b5948:	db45      	blt.n	b59d6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b594a:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b594e:	4294      	cmp	r4, r2
   b5950:	dd41      	ble.n	b59d6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b5952:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b5954:	2c02      	cmp	r4, #2
   b5956:	d01f      	beq.n	b5998 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b5958:	2c03      	cmp	r4, #3
   b595a:	d026      	beq.n	b59aa <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b595c:	2c01      	cmp	r4, #1
   b595e:	d104      	bne.n	b596a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b5960:	8904      	ldrh	r4, [r0, #8]
   b5962:	43d2      	mvns	r2, r2
   b5964:	4414      	add	r4, r2
      break;
   b5966:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b5968:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b596a:	2b01      	cmp	r3, #1
   b596c:	d023      	beq.n	b59b6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b596e:	2b02      	cmp	r3, #2
   b5970:	d032      	beq.n	b59d8 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b5972:	bb83      	cbnz	r3, b59d6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b5974:	2a00      	cmp	r2, #0
   b5976:	4613      	mov	r3, r2
   b5978:	8904      	ldrh	r4, [r0, #8]
   b597a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b597c:	bfb8      	it	lt
   b597e:	1dd3      	addlt	r3, r2, #7
   b5980:	10db      	asrs	r3, r3, #3
   b5982:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5986:	f002 0207 	and.w	r2, r2, #7
   b598a:	2301      	movs	r3, #1
   b598c:	4093      	lsls	r3, r2
   b598e:	5c42      	ldrb	r2, [r0, r1]
   b5990:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b5994:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b5996:	e01e      	b.n	b59d6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b5998:	8904      	ldrh	r4, [r0, #8]
   b599a:	3c01      	subs	r4, #1
   b599c:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b599e:	8944      	ldrh	r4, [r0, #10]
   b59a0:	43d2      	mvns	r2, r2
   b59a2:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b59a4:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b59a6:	b212      	sxth	r2, r2
      break;
   b59a8:	e7df      	b.n	b596a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b59aa:	8944      	ldrh	r4, [r0, #10]
   b59ac:	3c01      	subs	r4, #1
   b59ae:	1a64      	subs	r4, r4, r1
      break;
   b59b0:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b59b2:	b222      	sxth	r2, r4
      break;
   b59b4:	e7d9      	b.n	b596a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b59b6:	2a00      	cmp	r2, #0
   b59b8:	8904      	ldrh	r4, [r0, #8]
   b59ba:	4613      	mov	r3, r2
   b59bc:	bfb8      	it	lt
   b59be:	1dd3      	addlt	r3, r2, #7
   b59c0:	10db      	asrs	r3, r3, #3
   b59c2:	fb13 1104 	smlabb	r1, r3, r4, r1
   b59c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b59c8:	f002 0007 	and.w	r0, r2, #7
   b59cc:	2201      	movs	r2, #1
   b59ce:	4082      	lsls	r2, r0
   b59d0:	5c58      	ldrb	r0, [r3, r1]
   b59d2:	4302      	orrs	r2, r0
   b59d4:	545a      	strb	r2, [r3, r1]
}
   b59d6:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b59d8:	2a00      	cmp	r2, #0
   b59da:	4613      	mov	r3, r2
   b59dc:	8904      	ldrh	r4, [r0, #8]
   b59de:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b59e0:	bfb8      	it	lt
   b59e2:	1dd3      	addlt	r3, r2, #7
   b59e4:	10db      	asrs	r3, r3, #3
   b59e6:	fb13 1104 	smlabb	r1, r3, r4, r1
   b59ea:	f002 0207 	and.w	r2, r2, #7
   b59ee:	2301      	movs	r3, #1
   b59f0:	fa03 f202 	lsl.w	r2, r3, r2
   b59f4:	5c43      	ldrb	r3, [r0, r1]
   b59f6:	405a      	eors	r2, r3
   b59f8:	e7cc      	b.n	b5994 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b59fc <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b59fc:	b570      	push	{r4, r5, r6, lr}
   b59fe:	4604      	mov	r4, r0
   b5a00:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b5a02:	2600      	movs	r6, #0
   b5a04:	f7ff fce2 	bl	b53cc <_ZN12Adafruit_GFXC1Ess>
   b5a08:	4b11      	ldr	r3, [pc, #68]	; (b5a50 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b5a0a:	6023      	str	r3, [r4, #0]
   b5a0c:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b5a0e:	b915      	cbnz	r5, b5a16 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b5a10:	f002 fb48 	bl	b80a4 <_Z19__fetch_global_Wirev>
   b5a14:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b5a16:	23ff      	movs	r3, #255	; 0xff
   b5a18:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b5a1c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b5a20:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b5a24:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b5a28:	4b0a      	ldr	r3, [pc, #40]	; (b5a54 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b5a2a:	63a3      	str	r3, [r4, #56]	; 0x38
   b5a2c:	2301      	movs	r3, #1
   b5a2e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b5a32:	9b05      	ldr	r3, [sp, #20]
   b5a34:	64a3      	str	r3, [r4, #72]	; 0x48
   b5a36:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b5a3a:	9b06      	ldr	r3, [sp, #24]
   b5a3c:	86a2      	strh	r2, [r4, #52]	; 0x34
   b5a3e:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b5a42:	6426      	str	r6, [r4, #64]	; 0x40
   b5a44:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b5a48:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b5a4a:	4620      	mov	r0, r4
   b5a4c:	bd70      	pop	{r4, r5, r6, pc}
   b5a4e:	bf00      	nop
   b5a50:	000bba20 	.word	0x000bba20
   b5a54:	000bb56c 	.word	0x000bb56c

000b5a58 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b5a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5a5a:	4604      	mov	r4, r0
  if(wire) { // I2C
   b5a5c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b5a5e:	460d      	mov	r5, r1
  if(wire) { // I2C
   b5a60:	b190      	cbz	r0, b5a88 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b5a62:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5a66:	f001 f9db 	bl	b6e20 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5a6a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5a6c:	6803      	ldr	r3, [r0, #0]
   b5a6e:	2100      	movs	r1, #0
   b5a70:	689b      	ldr	r3, [r3, #8]
   b5a72:	4798      	blx	r3
    WIRE_WRITE(c);
   b5a74:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5a76:	6803      	ldr	r3, [r0, #0]
   b5a78:	4629      	mov	r1, r5
   b5a7a:	689b      	ldr	r3, [r3, #8]
   b5a7c:	4798      	blx	r3
    wire->endTransmission();
   b5a7e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b5a80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b5a84:	f001 b9d3 	b.w	b6e2e <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b5a88:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b5a8c:	4601      	mov	r1, r0
   b5a8e:	b298      	uxth	r0, r3
   b5a90:	f002 fa87 	bl	b7fa2 <digitalWrite>
  if(spi) {
   b5a94:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5a96:	b120      	cbz	r0, b5aa2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b5a98:	4629      	mov	r1, r5
}
   b5a9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b5a9e:	f001 bd49 	b.w	b7534 <_ZN8SPIClass8transferEh>
   b5aa2:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5aa4:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5aa6:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5aaa:	ea05 0107 	and.w	r1, r5, r7
   b5aae:	b280      	uxth	r0, r0
   b5ab0:	f002 fa77 	bl	b7fa2 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5ab4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5ab8:	2101      	movs	r1, #1
   b5aba:	b280      	uxth	r0, r0
   b5abc:	f002 fa71 	bl	b7fa2 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5ac0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5ac4:	2100      	movs	r1, #0
   b5ac6:	b280      	uxth	r0, r0
   b5ac8:	f002 fa6b 	bl	b7fa2 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5acc:	3e01      	subs	r6, #1
   b5ace:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b5ad2:	d1e8      	bne.n	b5aa6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b5ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5ad6 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b5ad6:	b538      	push	{r3, r4, r5, lr}
   b5ad8:	4604      	mov	r4, r0
  TRANSACTION_START
   b5ada:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b5adc:	460d      	mov	r5, r1
  TRANSACTION_START
   b5ade:	b180      	cbz	r0, b5b02 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b5ae0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5ae2:	f001 f963 	bl	b6dac <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b5ae6:	2d00      	cmp	r5, #0
   b5ae8:	4620      	mov	r0, r4
   b5aea:	bf14      	ite	ne
   b5aec:	21a7      	movne	r1, #167	; 0xa7
   b5aee:	21a6      	moveq	r1, #166	; 0xa6
   b5af0:	f7ff ffb2 	bl	b5a58 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b5af4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5af6:	b188      	cbz	r0, b5b1c <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b5af8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b5afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5afe:	f001 b955 	b.w	b6dac <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b5b02:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5b04:	b118      	cbz	r0, b5b0e <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b5b06:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5b0a:	f001 fca5 	bl	b7458 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5b0e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5b12:	2100      	movs	r1, #0
   b5b14:	b280      	uxth	r0, r0
   b5b16:	f002 fa44 	bl	b7fa2 <digitalWrite>
   b5b1a:	e7e4      	b.n	b5ae6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b5b1c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5b20:	2101      	movs	r1, #1
   b5b22:	b280      	uxth	r0, r0
   b5b24:	f002 fa3d 	bl	b7fa2 <digitalWrite>
   b5b28:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5b2a:	b118      	cbz	r0, b5b34 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b5b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b5b30:	f001 bc78 	b.w	b7424 <_ZN8SPIClass14endTransactionEv>
}
   b5b34:	bd38      	pop	{r3, r4, r5, pc}

000b5b36 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b5b36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5b3a:	4604      	mov	r4, r0
  if(wire) { // I2C
   b5b3c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b5b3e:	460d      	mov	r5, r1
  if(wire) { // I2C
   b5b40:	188f      	adds	r7, r1, r2
   b5b42:	b340      	cbz	r0, b5b96 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b5b44:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5b48:	f001 f96a 	bl	b6e20 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5b4c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5b4e:	6803      	ldr	r3, [r0, #0]
   b5b50:	2100      	movs	r1, #0
   b5b52:	689b      	ldr	r3, [r3, #8]
   b5b54:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b5b56:	2601      	movs	r6, #1
    while(n--) {
   b5b58:	42af      	cmp	r7, r5
        wire->endTransmission();
   b5b5a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b5b5c:	d017      	beq.n	b5b8e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b5b5e:	2e1f      	cmp	r6, #31
   b5b60:	d90c      	bls.n	b5b7c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b5b62:	f001 f964 	bl	b6e2e <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5b66:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5b6a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5b6c:	f001 f958 	bl	b6e20 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5b70:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5b72:	6803      	ldr	r3, [r0, #0]
   b5b74:	2100      	movs	r1, #0
   b5b76:	689b      	ldr	r3, [r3, #8]
   b5b78:	4798      	blx	r3
        bytesOut = 1;
   b5b7a:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5b7c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5b7e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5b82:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5b84:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5b86:	689b      	ldr	r3, [r3, #8]
   b5b88:	4798      	blx	r3
      bytesOut++;
   b5b8a:	b2f6      	uxtb	r6, r6
    while(n--) {
   b5b8c:	e7e4      	b.n	b5b58 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b5b8e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b5b92:	f001 b94c 	b.w	b6e2e <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b5b96:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b5b9a:	4601      	mov	r1, r0
   b5b9c:	b298      	uxth	r0, r3
   b5b9e:	f002 fa00 	bl	b7fa2 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b5ba2:	42bd      	cmp	r5, r7
   b5ba4:	d022      	beq.n	b5bec <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b5ba6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b5ba8:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b5bac:	b118      	cbz	r0, b5bb6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b5bae:	4649      	mov	r1, r9
   b5bb0:	f001 fcc0 	bl	b7534 <_ZN8SPIClass8transferEh>
   b5bb4:	e7f5      	b.n	b5ba2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b5bb6:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5bb8:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5bbc:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5bc0:	ea09 0108 	and.w	r1, r9, r8
   b5bc4:	b280      	uxth	r0, r0
   b5bc6:	f002 f9ec 	bl	b7fa2 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5bca:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5bce:	2101      	movs	r1, #1
   b5bd0:	b280      	uxth	r0, r0
   b5bd2:	f002 f9e6 	bl	b7fa2 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5bd6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5bda:	2100      	movs	r1, #0
   b5bdc:	b280      	uxth	r0, r0
   b5bde:	f002 f9e0 	bl	b7fa2 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5be2:	3e01      	subs	r6, #1
   b5be4:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b5be8:	d1e8      	bne.n	b5bbc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b5bea:	e7da      	b.n	b5ba2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b5bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b5bf0 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b5bf0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5bf4:	1dda      	adds	r2, r3, #7
   b5bf6:	bf48      	it	mi
   b5bf8:	f103 020e 	addmi.w	r2, r3, #14
   b5bfc:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5c00:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5c02:	10d2      	asrs	r2, r2, #3
   b5c04:	435a      	muls	r2, r3
   b5c06:	2100      	movs	r1, #0
   b5c08:	f003 b905 	b.w	b8e16 <memset>

000b5c0c <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b5c0c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5c10:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5c12:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b5c14:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b5c18:	4604      	mov	r4, r0
   b5c1a:	460f      	mov	r7, r1
   b5c1c:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5c1e:	b1c3      	cbz	r3, b5c52 <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b5c20:	4620      	mov	r0, r4
   b5c22:	f7ff ffe5 	bl	b5bf0 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b5c26:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b5c2a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b5c2e:	2820      	cmp	r0, #32
   b5c30:	dc21      	bgt.n	b5c76 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5c32:	2320      	movs	r3, #32
   b5c34:	2201      	movs	r2, #1
   b5c36:	3820      	subs	r0, #32
   b5c38:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b5c3c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b5c40:	2373      	movs	r3, #115	; 0x73
   b5c42:	3973      	subs	r1, #115	; 0x73
   b5c44:	9300      	str	r3, [sp, #0]
   b5c46:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5c4a:	4b89      	ldr	r3, [pc, #548]	; (b5e70 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b5c4c:	f340 024f 	sbfx	r2, r0, #1, #16
   b5c50:	e021      	b.n	b5c96 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5c52:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5c56:	1dd8      	adds	r0, r3, #7
   b5c58:	bf48      	it	mi
   b5c5a:	f103 000e 	addmi.w	r0, r3, #14
   b5c5e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b5c62:	10c0      	asrs	r0, r0, #3
   b5c64:	4358      	muls	r0, r3
   b5c66:	f000 ffcd 	bl	b6c04 <malloc>
   b5c6a:	62e0      	str	r0, [r4, #44]	; 0x2c
   b5c6c:	2800      	cmp	r0, #0
   b5c6e:	d1d7      	bne.n	b5c20 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b5c70:	b004      	add	sp, #16
   b5c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b5c76:	3840      	subs	r0, #64	; 0x40
   b5c78:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b5c7c:	fa02 f280 	sxtah	r2, r2, r0
   b5c80:	2340      	movs	r3, #64	; 0x40
   b5c82:	2001      	movs	r0, #1
   b5c84:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b5c88:	2352      	movs	r3, #82	; 0x52
   b5c8a:	3952      	subs	r1, #82	; 0x52
   b5c8c:	9300      	str	r3, [sp, #0]
   b5c8e:	4b79      	ldr	r3, [pc, #484]	; (b5e74 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b5c90:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5c94:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5c96:	4620      	mov	r0, r4
   b5c98:	f341 014f 	sbfx	r1, r1, #1, #16
   b5c9c:	f7ff fbac 	bl	b53f8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b5ca0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b5ca2:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b5ca6:	2800      	cmp	r0, #0
   b5ca8:	d078      	beq.n	b5d9c <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5caa:	2d00      	cmp	r5, #0
   b5cac:	d174      	bne.n	b5d98 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b5cae:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5cb2:	2b20      	cmp	r3, #32
   b5cb4:	bf0c      	ite	eq
   b5cb6:	253c      	moveq	r5, #60	; 0x3c
   b5cb8:	253d      	movne	r5, #61	; 0x3d
   b5cba:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b5cbe:	f1b8 0f00 	cmp.w	r8, #0
   b5cc2:	d001      	beq.n	b5cc8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b5cc4:	f001 f876 	bl	b6db4 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b5cc8:	b1fe      	cbz	r6, b5d0a <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b5cca:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5cce:	2800      	cmp	r0, #0
   b5cd0:	db1b      	blt.n	b5d0a <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b5cd2:	2101      	movs	r1, #1
   b5cd4:	b280      	uxth	r0, r0
   b5cd6:	f002 f953 	bl	b7f80 <pinMode>
    digitalWrite(rstPin, HIGH);
   b5cda:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5cde:	2101      	movs	r1, #1
   b5ce0:	b280      	uxth	r0, r0
   b5ce2:	f002 f95e 	bl	b7fa2 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b5ce6:	2001      	movs	r0, #1
   b5ce8:	f000 ffd8 	bl	b6c9c <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b5cec:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5cf0:	2100      	movs	r1, #0
   b5cf2:	b280      	uxth	r0, r0
   b5cf4:	f002 f955 	bl	b7fa2 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b5cf8:	200a      	movs	r0, #10
   b5cfa:	f000 ffcf 	bl	b6c9c <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b5cfe:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5d02:	2101      	movs	r1, #1
   b5d04:	b280      	uxth	r0, r0
   b5d06:	f002 f94c 	bl	b7fa2 <digitalWrite>
  TRANSACTION_START
   b5d0a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5d0c:	2800      	cmp	r0, #0
   b5d0e:	d074      	beq.n	b5dfa <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b5d10:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5d12:	f001 f84b 	bl	b6dac <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b5d16:	2204      	movs	r2, #4
   b5d18:	4957      	ldr	r1, [pc, #348]	; (b5e78 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b5d1a:	4620      	mov	r0, r4
   b5d1c:	f7ff ff0b 	bl	b5b36 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b5d20:	8961      	ldrh	r1, [r4, #10]
   b5d22:	3901      	subs	r1, #1
   b5d24:	b2c9      	uxtb	r1, r1
   b5d26:	4620      	mov	r0, r4
   b5d28:	f7ff fe96 	bl	b5a58 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b5d2c:	4953      	ldr	r1, [pc, #332]	; (b5e7c <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b5d2e:	2204      	movs	r2, #4
   b5d30:	4620      	mov	r0, r4
   b5d32:	f7ff ff00 	bl	b5b36 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b5d36:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5d3a:	2b01      	cmp	r3, #1
   b5d3c:	bf0c      	ite	eq
   b5d3e:	2110      	moveq	r1, #16
   b5d40:	2114      	movne	r1, #20
   b5d42:	4620      	mov	r0, r4
   b5d44:	f7ff fe88 	bl	b5a58 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b5d48:	2204      	movs	r2, #4
   b5d4a:	494d      	ldr	r1, [pc, #308]	; (b5e80 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b5d4c:	4620      	mov	r0, r4
   b5d4e:	f7ff fef2 	bl	b5b36 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b5d52:	68a3      	ldr	r3, [r4, #8]
   b5d54:	4a4b      	ldr	r2, [pc, #300]	; (b5e84 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b5d56:	4293      	cmp	r3, r2
   b5d58:	d15c      	bne.n	b5e14 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b5d5a:	494b      	ldr	r1, [pc, #300]	; (b5e88 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b5d5c:	2204      	movs	r2, #4
   b5d5e:	4620      	mov	r0, r4
   b5d60:	f7ff fee9 	bl	b5b36 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b5d64:	21d9      	movs	r1, #217	; 0xd9
   b5d66:	4620      	mov	r0, r4
   b5d68:	f7ff fe76 	bl	b5a58 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b5d6c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5d70:	2b01      	cmp	r3, #1
   b5d72:	bf0c      	ite	eq
   b5d74:	2122      	moveq	r1, #34	; 0x22
   b5d76:	21f1      	movne	r1, #241	; 0xf1
   b5d78:	4620      	mov	r0, r4
   b5d7a:	f7ff fe6d 	bl	b5a58 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b5d7e:	4620      	mov	r0, r4
   b5d80:	4942      	ldr	r1, [pc, #264]	; (b5e8c <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b5d82:	2206      	movs	r2, #6
   b5d84:	f7ff fed7 	bl	b5b36 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b5d88:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5d8a:	2800      	cmp	r0, #0
   b5d8c:	d063      	beq.n	b5e56 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b5d8e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b5d90:	f001 f80c 	bl	b6dac <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b5d94:	2001      	movs	r0, #1
   b5d96:	e76b      	b.n	b5c70 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5d98:	b26d      	sxtb	r5, r5
   b5d9a:	e78e      	b.n	b5cba <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b5d9c:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5da0:	2101      	movs	r1, #1
   b5da2:	b280      	uxth	r0, r0
   b5da4:	f002 f8ec 	bl	b7f80 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b5da8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5dac:	2101      	movs	r1, #1
   b5dae:	b280      	uxth	r0, r0
   b5db0:	f002 f8e6 	bl	b7f80 <pinMode>
    SSD1306_DESELECT
   b5db4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5db8:	2101      	movs	r1, #1
   b5dba:	b280      	uxth	r0, r0
   b5dbc:	f002 f8f1 	bl	b7fa2 <digitalWrite>
    if(spi) { // Hardware SPI
   b5dc0:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b5dc2:	b13d      	cbz	r5, b5dd4 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b5dc4:	f1b8 0f00 	cmp.w	r8, #0
   b5dc8:	f43f af7e 	beq.w	b5cc8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b5dcc:	4628      	mov	r0, r5
   b5dce:	f001 fb15 	bl	b73fc <_ZN8SPIClass5beginEv>
   b5dd2:	e779      	b.n	b5cc8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b5dd4:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5dd8:	2101      	movs	r1, #1
   b5dda:	b280      	uxth	r0, r0
   b5ddc:	f002 f8d0 	bl	b7f80 <pinMode>
      pinMode(clkPin , OUTPUT);
   b5de0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5de4:	2101      	movs	r1, #1
   b5de6:	b280      	uxth	r0, r0
   b5de8:	f002 f8ca 	bl	b7f80 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b5dec:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5df0:	4629      	mov	r1, r5
   b5df2:	b280      	uxth	r0, r0
   b5df4:	f002 f8d5 	bl	b7fa2 <digitalWrite>
   b5df8:	e766      	b.n	b5cc8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b5dfa:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5dfc:	b118      	cbz	r0, b5e06 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b5dfe:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5e02:	f001 fb29 	bl	b7458 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5e06:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5e0a:	2100      	movs	r1, #0
   b5e0c:	b280      	uxth	r0, r0
   b5e0e:	f002 f8c8 	bl	b7fa2 <digitalWrite>
   b5e12:	e780      	b.n	b5d16 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b5e14:	4a1e      	ldr	r2, [pc, #120]	; (b5e90 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b5e16:	4293      	cmp	r3, r2
   b5e18:	d10e      	bne.n	b5e38 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b5e1a:	491e      	ldr	r1, [pc, #120]	; (b5e94 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b5e1c:	2203      	movs	r2, #3
   b5e1e:	4620      	mov	r0, r4
   b5e20:	f7ff fe89 	bl	b5b36 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b5e24:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5e28:	2b01      	cmp	r3, #1
   b5e2a:	bf0c      	ite	eq
   b5e2c:	219f      	moveq	r1, #159	; 0x9f
   b5e2e:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5e30:	4620      	mov	r0, r4
   b5e32:	f7ff fe11 	bl	b5a58 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b5e36:	e795      	b.n	b5d64 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b5e38:	4a17      	ldr	r2, [pc, #92]	; (b5e98 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b5e3a:	4293      	cmp	r3, r2
   b5e3c:	d192      	bne.n	b5d64 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b5e3e:	4917      	ldr	r1, [pc, #92]	; (b5e9c <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b5e40:	2203      	movs	r2, #3
   b5e42:	4620      	mov	r0, r4
   b5e44:	f7ff fe77 	bl	b5b36 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5e48:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5e4c:	2b01      	cmp	r3, #1
   b5e4e:	bf0c      	ite	eq
   b5e50:	2110      	moveq	r1, #16
   b5e52:	21af      	movne	r1, #175	; 0xaf
   b5e54:	e7ec      	b.n	b5e30 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b5e56:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5e5a:	2101      	movs	r1, #1
   b5e5c:	b280      	uxth	r0, r0
   b5e5e:	f002 f8a0 	bl	b7fa2 <digitalWrite>
   b5e62:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5e64:	2800      	cmp	r0, #0
   b5e66:	d095      	beq.n	b5d94 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5e68:	f001 fadc 	bl	b7424 <_ZN8SPIClass14endTransactionEv>
   b5e6c:	e792      	b.n	b5d94 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5e6e:	bf00      	nop
   b5e70:	000bb838 	.word	0x000bb838
   b5e74:	000bb578 	.word	0x000bb578
   b5e78:	000bba80 	.word	0x000bba80
   b5e7c:	000bba84 	.word	0x000bba84
   b5e80:	000bba88 	.word	0x000bba88
   b5e84:	00200080 	.word	0x00200080
   b5e88:	000bba92 	.word	0x000bba92
   b5e8c:	000bba8c 	.word	0x000bba8c
   b5e90:	00400080 	.word	0x00400080
   b5e94:	000bba96 	.word	0x000bba96
   b5e98:	00100060 	.word	0x00100060
   b5e9c:	000bba99 	.word	0x000bba99

000b5ea0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5ea0:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5ea2:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5ea4:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5ea8:	db3d      	blt.n	b5f26 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5eaa:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5eae:	4294      	cmp	r4, r2
   b5eb0:	dd39      	ble.n	b5f26 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b5eb2:	2900      	cmp	r1, #0
      w += x;
   b5eb4:	bfbe      	ittt	lt
   b5eb6:	185b      	addlt	r3, r3, r1
   b5eb8:	b21b      	sxthlt	r3, r3
      x  = 0;
   b5eba:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b5ebc:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b5ec0:	18ce      	adds	r6, r1, r3
   b5ec2:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b5ec4:	bfc4      	itt	gt
   b5ec6:	1a63      	subgt	r3, r4, r1
   b5ec8:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b5eca:	2b00      	cmp	r3, #0
   b5ecc:	dd2b      	ble.n	b5f26 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b5ece:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5ed0:	10d6      	asrs	r6, r2, #3
   b5ed2:	fb14 1106 	smlabb	r1, r4, r6, r1
   b5ed6:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b5ed8:	f002 0007 	and.w	r0, r2, #7
   b5edc:	2201      	movs	r2, #1
   b5ede:	4082      	lsls	r2, r0
      switch(color) {
   b5ee0:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b5ee2:	b2d2      	uxtb	r2, r2
      switch(color) {
   b5ee4:	d016      	beq.n	b5f14 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b5ee6:	2d02      	cmp	r5, #2
   b5ee8:	d00b      	beq.n	b5f02 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b5eea:	b9e5      	cbnz	r5, b5f26 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b5eec:	43d2      	mvns	r2, r2
   b5eee:	b2d2      	uxtb	r2, r2
   b5ef0:	440b      	add	r3, r1
   b5ef2:	4299      	cmp	r1, r3
   b5ef4:	d017      	beq.n	b5f26 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5ef6:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5efa:	4010      	ands	r0, r2
   b5efc:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5f00:	e7f7      	b.n	b5ef2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b5f02:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b5f04:	4299      	cmp	r1, r3
   b5f06:	d00e      	beq.n	b5f26 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5f08:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5f0c:	4050      	eors	r0, r2
   b5f0e:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5f12:	e7f7      	b.n	b5f04 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b5f14:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b5f16:	4299      	cmp	r1, r3
   b5f18:	d005      	beq.n	b5f26 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5f1a:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5f1e:	4310      	orrs	r0, r2
   b5f20:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5f24:	e7f7      	b.n	b5f16 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b5f26:	bd70      	pop	{r4, r5, r6, pc}

000b5f28 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5f28:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5f2a:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5f2c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5f30:	db76      	blt.n	b6020 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b5f32:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b5f36:	42b1      	cmp	r1, r6
   b5f38:	da72      	bge.n	b6020 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b5f3a:	2a00      	cmp	r2, #0
      __h += __y;
   b5f3c:	bfbe      	ittt	lt
   b5f3e:	189b      	addlt	r3, r3, r2
   b5f40:	b21b      	sxthlt	r3, r3
      __y = 0;
   b5f42:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b5f44:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5f48:	18d7      	adds	r7, r2, r3
   b5f4a:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b5f4c:	bfc4      	itt	gt
   b5f4e:	1aa3      	subgt	r3, r4, r2
   b5f50:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b5f52:	2b00      	cmp	r3, #0
   b5f54:	dd64      	ble.n	b6020 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5f56:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b5f5a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b5f5c:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b5f60:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b5f64:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5f66:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b5f6a:	d023      	beq.n	b5fb4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b5f6c:	f1c2 0208 	rsb	r2, r2, #8
   b5f70:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5f72:	492d      	ldr	r1, [pc, #180]	; (b6028 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5f74:	4293      	cmp	r3, r2
   b5f76:	bf3c      	itt	cc
   b5f78:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b5f7c:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5f80:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5f82:	bf3c      	itt	cc
   b5f84:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b5f88:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b5f8c:	2d01      	cmp	r5, #1
   b5f8e:	d007      	beq.n	b5fa0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b5f90:	2d02      	cmp	r5, #2
   b5f92:	d02e      	beq.n	b5ff2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b5f94:	b94d      	cbnz	r5, b5faa <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b5f96:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5f9a:	ea2c 0101 	bic.w	r1, ip, r1
   b5f9e:	e003      	b.n	b5fa8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b5fa0:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5fa4:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b5fa8:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b5faa:	4293      	cmp	r3, r2
   b5fac:	d338      	bcc.n	b6020 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b5fae:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b5fb2:	440c      	add	r4, r1
        h -= mod;
   b5fb4:	1a9a      	subs	r2, r3, r2
   b5fb6:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b5fb8:	2a07      	cmp	r2, #7
   b5fba:	d90e      	bls.n	b5fda <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b5fbc:	2d02      	cmp	r5, #2
   b5fbe:	d11d      	bne.n	b5ffc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b5fc0:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b5fc2:	7821      	ldrb	r1, [r4, #0]
   b5fc4:	43c9      	mvns	r1, r1
   b5fc6:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b5fc8:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b5fca:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b5fce:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b5fd0:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b5fd2:	440c      	add	r4, r1
            } while(h >= 8);
   b5fd4:	d8f5      	bhi.n	b5fc2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b5fd6:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b5fda:	b30a      	cbz	r2, b6020 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5fdc:	4b13      	ldr	r3, [pc, #76]	; (b602c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b5fde:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5fe0:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b5fe2:	d01a      	beq.n	b601a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b5fe4:	2d02      	cmp	r5, #2
   b5fe6:	d01c      	beq.n	b6022 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b5fe8:	b9d5      	cbnz	r5, b6020 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b5fea:	7822      	ldrb	r2, [r4, #0]
   b5fec:	ea22 0303 	bic.w	r3, r2, r3
   b5ff0:	e015      	b.n	b601e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b5ff2:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5ff6:	ea81 010c 	eor.w	r1, r1, ip
   b5ffa:	e7d5      	b.n	b5fa8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b5ffc:	1e29      	subs	r1, r5, #0
   b5ffe:	bf18      	it	ne
   b6000:	2101      	movne	r1, #1
   b6002:	4249      	negs	r1, r1
   b6004:	b2c9      	uxtb	r1, r1
   b6006:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b6008:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b600a:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b600c:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b6010:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b6012:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b6014:	4434      	add	r4, r6
            } while(h >= 8);
   b6016:	d8f7      	bhi.n	b6008 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b6018:	e7dd      	b.n	b5fd6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b601a:	7822      	ldrb	r2, [r4, #0]
   b601c:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b601e:	7023      	strb	r3, [r4, #0]
}
   b6020:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b6022:	7822      	ldrb	r2, [r4, #0]
   b6024:	4053      	eors	r3, r2
   b6026:	e7fa      	b.n	b601e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b6028:	000bba70 	.word	0x000bba70
   b602c:	000bba78 	.word	0x000bba78

000b6030 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b6030:	b470      	push	{r4, r5, r6}
   b6032:	4614      	mov	r4, r2
  switch(rotation) {
   b6034:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b6036:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b603a:	2a02      	cmp	r2, #2
   b603c:	d00d      	beq.n	b605a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b603e:	2a03      	cmp	r2, #3
   b6040:	d018      	beq.n	b6074 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b6042:	2a01      	cmp	r2, #1
   b6044:	d111      	bne.n	b606a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b6046:	8902      	ldrh	r2, [r0, #8]
   b6048:	43e4      	mvns	r4, r4
   b604a:	4414      	add	r4, r2
   b604c:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b604e:	9603      	str	r6, [sp, #12]
   b6050:	460a      	mov	r2, r1
   b6052:	4621      	mov	r1, r4
}
   b6054:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b6056:	f7ff bf67 	b.w	b5f28 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b605a:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b605c:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b605e:	43e4      	mvns	r4, r4
    x -= (w-1);
   b6060:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b6062:	4414      	add	r4, r2
    x -= (w-1);
   b6064:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b6066:	b224      	sxth	r4, r4
    x -= (w-1);
   b6068:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b606a:	9603      	str	r6, [sp, #12]
   b606c:	4622      	mov	r2, r4
}
   b606e:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b6070:	f7ff bf16 	b.w	b5ea0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b6074:	8945      	ldrh	r5, [r0, #10]
   b6076:	4419      	add	r1, r3
   b6078:	1a69      	subs	r1, r5, r1
   b607a:	b209      	sxth	r1, r1
    break;
   b607c:	e7e7      	b.n	b604e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b607e <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b607e:	b430      	push	{r4, r5}
   b6080:	4614      	mov	r4, r2
  switch(rotation) {
   b6082:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b6084:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b6088:	2a02      	cmp	r2, #2
   b608a:	d00d      	beq.n	b60a8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b608c:	2a03      	cmp	r2, #3
   b608e:	d018      	beq.n	b60c2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b6090:	2a01      	cmp	r2, #1
   b6092:	d111      	bne.n	b60b8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b6094:	18e2      	adds	r2, r4, r3
   b6096:	8904      	ldrh	r4, [r0, #8]
   b6098:	1aa4      	subs	r4, r4, r2
   b609a:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b609c:	9502      	str	r5, [sp, #8]
   b609e:	460a      	mov	r2, r1
   b60a0:	4621      	mov	r1, r4
}
   b60a2:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b60a4:	f7ff befc 	b.w	b5ea0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b60a8:	8902      	ldrh	r2, [r0, #8]
   b60aa:	43c9      	mvns	r1, r1
   b60ac:	4411      	add	r1, r2
    y -= (h-1);
   b60ae:	18e2      	adds	r2, r4, r3
   b60b0:	8944      	ldrh	r4, [r0, #10]
   b60b2:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b60b4:	b209      	sxth	r1, r1
    y -= (h-1);
   b60b6:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b60b8:	9502      	str	r5, [sp, #8]
   b60ba:	4622      	mov	r2, r4
}
   b60bc:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b60be:	f7ff bf33 	b.w	b5f28 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b60c2:	8942      	ldrh	r2, [r0, #10]
   b60c4:	43c9      	mvns	r1, r1
   b60c6:	4411      	add	r1, r2
   b60c8:	b209      	sxth	r1, r1
    break;
   b60ca:	e7e7      	b.n	b609c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b60cc <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b60cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b60d0:	4604      	mov	r4, r0
  TRANSACTION_START
   b60d2:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b60d4:	2800      	cmp	r0, #0
   b60d6:	d042      	beq.n	b615e <_ZN16Adafruit_SSD13067displayEv+0x92>
   b60d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b60da:	f000 fe67 	bl	b6dac <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b60de:	4947      	ldr	r1, [pc, #284]	; (b61fc <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b60e0:	2205      	movs	r2, #5
   b60e2:	4620      	mov	r0, r4
   b60e4:	f7ff fd27 	bl	b5b36 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b60e8:	8921      	ldrh	r1, [r4, #8]
   b60ea:	3901      	subs	r1, #1
   b60ec:	4620      	mov	r0, r4
   b60ee:	b2c9      	uxtb	r1, r1
   b60f0:	f7ff fcb2 	bl	b5a58 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b60f4:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b60f8:	1dde      	adds	r6, r3, #7
   b60fa:	bf48      	it	mi
   b60fc:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b6100:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b6104:	8923      	ldrh	r3, [r4, #8]
   b6106:	10f6      	asrs	r6, r6, #3
   b6108:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b610c:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b6110:	2800      	cmp	r0, #0
   b6112:	d03a      	beq.n	b618a <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b6114:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6118:	f000 fe82 	bl	b6e20 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b611c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b611e:	6803      	ldr	r3, [r0, #0]
   b6120:	2140      	movs	r1, #64	; 0x40
   b6122:	689b      	ldr	r3, [r3, #8]
   b6124:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b6126:	2701      	movs	r7, #1
    while(count--) {
   b6128:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b612a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b612c:	d024      	beq.n	b6178 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b612e:	2f1f      	cmp	r7, #31
   b6130:	d90c      	bls.n	b614c <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b6132:	f000 fe7c 	bl	b6e2e <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b6136:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b613a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b613c:	f000 fe70 	bl	b6e20 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b6140:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6142:	6803      	ldr	r3, [r0, #0]
   b6144:	2140      	movs	r1, #64	; 0x40
   b6146:	689b      	ldr	r3, [r3, #8]
   b6148:	4798      	blx	r3
        bytesOut = 1;
   b614a:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b614c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b614e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6152:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b6154:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b6156:	689b      	ldr	r3, [r3, #8]
   b6158:	4798      	blx	r3
      bytesOut++;
   b615a:	b2ff      	uxtb	r7, r7
    while(count--) {
   b615c:	e7e4      	b.n	b6128 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b615e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6160:	b118      	cbz	r0, b616a <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b6162:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b6166:	f001 f977 	bl	b7458 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b616a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b616e:	2100      	movs	r1, #0
   b6170:	b280      	uxth	r0, r0
   b6172:	f001 ff16 	bl	b7fa2 <digitalWrite>
   b6176:	e7b2      	b.n	b60de <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b6178:	f000 fe59 	bl	b6e2e <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b617c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b617e:	b378      	cbz	r0, b61e0 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b6180:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b6182:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6186:	f000 be11 	b.w	b6dac <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b618a:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b618e:	2101      	movs	r1, #1
   b6190:	b280      	uxth	r0, r0
   b6192:	f001 ff06 	bl	b7fa2 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b6196:	42ae      	cmp	r6, r5
   b6198:	d0f0      	beq.n	b617c <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b619a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b619c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b61a0:	b118      	cbz	r0, b61aa <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b61a2:	4649      	mov	r1, r9
   b61a4:	f001 f9c6 	bl	b7534 <_ZN8SPIClass8transferEh>
   b61a8:	e7f5      	b.n	b6196 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b61aa:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b61ac:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b61b0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b61b4:	ea09 0108 	and.w	r1, r9, r8
   b61b8:	b280      	uxth	r0, r0
   b61ba:	f001 fef2 	bl	b7fa2 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b61be:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b61c2:	2101      	movs	r1, #1
   b61c4:	b280      	uxth	r0, r0
   b61c6:	f001 feec 	bl	b7fa2 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b61ca:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b61ce:	2100      	movs	r1, #0
   b61d0:	b280      	uxth	r0, r0
   b61d2:	f001 fee6 	bl	b7fa2 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b61d6:	3f01      	subs	r7, #1
   b61d8:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b61dc:	d1e8      	bne.n	b61b0 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b61de:	e7da      	b.n	b6196 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b61e0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b61e4:	2101      	movs	r1, #1
   b61e6:	b280      	uxth	r0, r0
   b61e8:	f001 fedb 	bl	b7fa2 <digitalWrite>
   b61ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b61ee:	b118      	cbz	r0, b61f8 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b61f0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b61f4:	f001 b916 	b.w	b7424 <_ZN8SPIClass14endTransactionEv>
}
   b61f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b61fc:	000bba9c 	.word	0x000bba9c

000b6200 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b6200:	2100      	movs	r1, #0
   b6202:	220a      	movs	r2, #10
   b6204:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b6208:	4770      	bx	lr

000b620a <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b620a:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b620c:	b510      	push	{r4, lr}
   b620e:	4604      	mov	r4, r0
    this->pin = pin;
   b6210:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b6212:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b6214:	b288      	uxth	r0, r1
   b6216:	f001 fedd 	bl	b7fd4 <digitalRead>
   b621a:	b108      	cbz	r0, b6220 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b621c:	2303      	movs	r3, #3
   b621e:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6220:	f000 fa8c 	bl	b673c <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b6224:	6020      	str	r0, [r4, #0]
#endif
}
   b6226:	bd10      	pop	{r4, pc}

000b6228 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b6228:	b538      	push	{r3, r4, r5, lr}
   b622a:	460c      	mov	r4, r1
   b622c:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b622e:	4611      	mov	r1, r2
   b6230:	b2a0      	uxth	r0, r4
   b6232:	f001 fea5 	bl	b7f80 <pinMode>
  
  this->attach(pin);
   b6236:	4621      	mov	r1, r4
   b6238:	4628      	mov	r0, r5
}
   b623a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b623e:	f7ff bfe4 	b.w	b620a <_ZN8Debounce6attachEi>

000b6242 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b6242:	b538      	push	{r3, r4, r5, lr}
   b6244:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b6246:	79c0      	ldrb	r0, [r0, #7]
   b6248:	f001 fec4 	bl	b7fd4 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b624c:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b624e:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b6250:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b6254:	bf18      	it	ne
   b6256:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b6258:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b625c:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b625e:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b6260:	d00a      	beq.n	b6278 <_ZN8Debounce6updateEv+0x36>
   b6262:	f000 fa6b 	bl	b673c <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b6266:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b6268:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b626a:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b626e:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b6270:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b6272:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b6276:	bd38      	pop	{r3, r4, r5, pc}
   b6278:	f000 fa60 	bl	b673c <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b627c:	6823      	ldr	r3, [r4, #0]
   b627e:	1ac0      	subs	r0, r0, r3
   b6280:	88a3      	ldrh	r3, [r4, #4]
   b6282:	4298      	cmp	r0, r3
   b6284:	d3f4      	bcc.n	b6270 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b6286:	79a3      	ldrb	r3, [r4, #6]
   b6288:	f003 0301 	and.w	r3, r3, #1
   b628c:	42ab      	cmp	r3, r5
   b628e:	d0ef      	beq.n	b6270 <_ZN8Debounce6updateEv+0x2e>
   b6290:	f000 fa54 	bl	b673c <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b6294:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b6296:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b6298:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b629c:	f043 0308 	orr.w	r3, r3, #8
   b62a0:	e7e5      	b.n	b626e <_ZN8Debounce6updateEv+0x2c>

000b62a2 <_ZN8Debounce4fellEv>:
    return ( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
}

bool Debounce::fell()
{
    return !( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
   b62a2:	7980      	ldrb	r0, [r0, #6]
   b62a4:	f000 0009 	and.w	r0, r0, #9
   b62a8:	f1a0 0308 	sub.w	r3, r0, #8
   b62ac:	4258      	negs	r0, r3
   b62ae:	4158      	adcs	r0, r3
   b62b0:	4770      	bx	lr

000b62b2 <_ZN8VCNL4040C1Ev>:
#define VCNL4040_WHITE_DATA 0x0A
#define VCNL4040_INT_FLAG 0x0B //Upper
#define VCNL4040_ID 0x0C

//Class constructor
VCNL4040::VCNL4040(void) {}
   b62b2:	4770      	bx	lr

000b62b4 <_ZN8VCNL404011isConnectedEv>:

  return (true);
}

//Test to see if the device is responding
boolean VCNL4040::isConnected(void) {
   b62b4:	b510      	push	{r4, lr}
   b62b6:	4604      	mov	r4, r0
  _i2cPort->beginTransmission((uint8_t)VCNL4040_ADDR);
   b62b8:	2160      	movs	r1, #96	; 0x60
   b62ba:	6800      	ldr	r0, [r0, #0]
   b62bc:	f000 fdac 	bl	b6e18 <_ZN7TwoWire17beginTransmissionEh>
  return (_i2cPort->endTransmission() == 0);
   b62c0:	6820      	ldr	r0, [r4, #0]
   b62c2:	f000 fdb4 	bl	b6e2e <_ZN7TwoWire15endTransmissionEv>
}
   b62c6:	fab0 f080 	clz	r0, r0
   b62ca:	0940      	lsrs	r0, r0, #5
   b62cc:	bd10      	pop	{r4, pc}

000b62ce <_ZN8VCNL404011readCommandEh>:
  return (interruptFlags & VCNL4040_INT_FLAG_ALS_LOW);
}

//Reads two consecutive bytes from a given 'command code' location
uint16_t VCNL4040::readCommand(uint8_t commandCode)
{
   b62ce:	b538      	push	{r3, r4, r5, lr}
   b62d0:	4605      	mov	r5, r0
   b62d2:	460c      	mov	r4, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   b62d4:	6800      	ldr	r0, [r0, #0]
   b62d6:	2160      	movs	r1, #96	; 0x60
   b62d8:	f000 fd9e 	bl	b6e18 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   b62dc:	6828      	ldr	r0, [r5, #0]
   b62de:	6803      	ldr	r3, [r0, #0]
   b62e0:	4621      	mov	r1, r4
   b62e2:	689b      	ldr	r3, [r3, #8]
   b62e4:	4798      	blx	r3
  if (_i2cPort->endTransmission(false) != 0) //Send a restart command. Do not release bus.
   b62e6:	6828      	ldr	r0, [r5, #0]
   b62e8:	2100      	movs	r1, #0
   b62ea:	f000 fd9c 	bl	b6e26 <_ZN7TwoWire15endTransmissionEh>
   b62ee:	b108      	cbz	r0, b62f4 <_ZN8VCNL404011readCommandEh+0x26>
  {
    return (0); //Sensor did not ACK
   b62f0:	2000      	movs	r0, #0
    uint8_t msb = _i2cPort->read();
    return ((uint16_t)msb << 8 | lsb);
  }

  return (0); //Sensor did not respond
}
   b62f2:	bd38      	pop	{r3, r4, r5, pc}
  _i2cPort->requestFrom((uint8_t)VCNL4040_ADDR, (uint8_t)2);
   b62f4:	6828      	ldr	r0, [r5, #0]
   b62f6:	2202      	movs	r2, #2
   b62f8:	2160      	movs	r1, #96	; 0x60
   b62fa:	f000 fd8a 	bl	b6e12 <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   b62fe:	6828      	ldr	r0, [r5, #0]
   b6300:	6803      	ldr	r3, [r0, #0]
   b6302:	691b      	ldr	r3, [r3, #16]
   b6304:	4798      	blx	r3
   b6306:	2800      	cmp	r0, #0
   b6308:	d0f2      	beq.n	b62f0 <_ZN8VCNL404011readCommandEh+0x22>
    uint8_t lsb = _i2cPort->read();
   b630a:	6828      	ldr	r0, [r5, #0]
   b630c:	6803      	ldr	r3, [r0, #0]
   b630e:	695b      	ldr	r3, [r3, #20]
   b6310:	4798      	blx	r3
   b6312:	4604      	mov	r4, r0
    uint8_t msb = _i2cPort->read();
   b6314:	6828      	ldr	r0, [r5, #0]
   b6316:	6803      	ldr	r3, [r0, #0]
   b6318:	695b      	ldr	r3, [r3, #20]
   b631a:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   b631c:	b2e4      	uxtb	r4, r4
   b631e:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   b6322:	b280      	uxth	r0, r0
   b6324:	e7e5      	b.n	b62f2 <_ZN8VCNL404011readCommandEh+0x24>

000b6326 <_ZN8VCNL404010getAmbientEv>:
  return (readCommand(VCNL4040_ALS_DATA));
   b6326:	2109      	movs	r1, #9
   b6328:	f7ff bfd1 	b.w	b62ce <_ZN8VCNL404011readCommandEh>

000b632c <_ZN8VCNL40405getIDEv>:
  return (readCommand(VCNL4040_ID));
   b632c:	210c      	movs	r1, #12
   b632e:	f7ff bfce 	b.w	b62ce <_ZN8VCNL404011readCommandEh>

000b6332 <_ZN8VCNL404012writeCommandEht>:

//Write two bytes to a given command code location (8 bits)
boolean VCNL4040::writeCommand(uint8_t commandCode, uint16_t value)
{
   b6332:	b570      	push	{r4, r5, r6, lr}
   b6334:	4604      	mov	r4, r0
   b6336:	460e      	mov	r6, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   b6338:	6800      	ldr	r0, [r0, #0]
   b633a:	2160      	movs	r1, #96	; 0x60
{
   b633c:	4615      	mov	r5, r2
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   b633e:	f000 fd6b 	bl	b6e18 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   b6342:	6820      	ldr	r0, [r4, #0]
   b6344:	6803      	ldr	r3, [r0, #0]
   b6346:	4631      	mov	r1, r6
   b6348:	689b      	ldr	r3, [r3, #8]
   b634a:	4798      	blx	r3
  _i2cPort->write(value & 0xFF); //LSB
   b634c:	6820      	ldr	r0, [r4, #0]
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b634e:	6803      	ldr	r3, [r0, #0]
   b6350:	b2e9      	uxtb	r1, r5
   b6352:	689b      	ldr	r3, [r3, #8]
   b6354:	4798      	blx	r3
  _i2cPort->write(value >> 8); //MSB
   b6356:	6820      	ldr	r0, [r4, #0]
   b6358:	6803      	ldr	r3, [r0, #0]
   b635a:	0a29      	lsrs	r1, r5, #8
   b635c:	689b      	ldr	r3, [r3, #8]
   b635e:	4798      	blx	r3
  if (_i2cPort->endTransmission() != 0)
   b6360:	6820      	ldr	r0, [r4, #0]
   b6362:	f000 fd64 	bl	b6e2e <_ZN7TwoWire15endTransmissionEv>
  {
    return (false); //Sensor did not ACK
  }

  return (true);
}
   b6366:	fab0 f080 	clz	r0, r0
   b636a:	0940      	lsrs	r0, r0, #5
   b636c:	bd70      	pop	{r4, r5, r6, pc}

000b636e <_ZN8VCNL404017writeCommandLowerEhh>:

//Given a command code (address) write to the lower byte without affecting the upper byte
boolean VCNL4040::writeCommandLower(uint8_t commandCode, uint8_t newValue)
{
   b636e:	b570      	push	{r4, r5, r6, lr}
   b6370:	4604      	mov	r4, r0
   b6372:	460d      	mov	r5, r1
   b6374:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   b6376:	f7ff ffaa 	bl	b62ce <_ZN8VCNL404011readCommandEh>
  commandValue &= 0xFF00; //Remove lower 8 bits
   b637a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
  commandValue |= (uint16_t)newValue; //Mask in
  return (writeCommand(commandCode, commandValue));
   b637e:	ea40 0206 	orr.w	r2, r0, r6
   b6382:	4629      	mov	r1, r5
   b6384:	4620      	mov	r0, r4
}
   b6386:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   b638a:	f7ff bfd2 	b.w	b6332 <_ZN8VCNL404012writeCommandEht>

000b638e <_ZN8VCNL404017writeCommandUpperEhh>:

//Given a command code (address) write to the upper byte without affecting the lower byte
boolean VCNL4040::writeCommandUpper(uint8_t commandCode, uint8_t newValue)
{
   b638e:	b570      	push	{r4, r5, r6, lr}
   b6390:	4604      	mov	r4, r0
   b6392:	460d      	mov	r5, r1
   b6394:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   b6396:	f7ff ff9a 	bl	b62ce <_ZN8VCNL404011readCommandEh>
  commandValue &= 0x00FF; //Remove upper 8 bits
   b639a:	b2c0      	uxtb	r0, r0
  commandValue |= (uint16_t)newValue << 8; //Mask in
  return (writeCommand(commandCode, commandValue));
   b639c:	ea40 2206 	orr.w	r2, r0, r6, lsl #8
   b63a0:	4629      	mov	r1, r5
   b63a2:	4620      	mov	r0, r4
}
   b63a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   b63a8:	f7ff bfc3 	b.w	b6332 <_ZN8VCNL404012writeCommandEht>

000b63ac <_ZN8VCNL404016readCommandUpperEh>:
  return (commandValue & 0xFF);
}

//Given a command code (address) read the upper byte
uint8_t VCNL4040::readCommandUpper(uint8_t commandCode)
{
   b63ac:	b508      	push	{r3, lr}
  uint16_t commandValue = readCommand(commandCode);
   b63ae:	f7ff ff8e 	bl	b62ce <_ZN8VCNL404011readCommandEh>
  return (commandValue >> 8);
}
   b63b2:	f3c0 2007 	ubfx	r0, r0, #8, #8
   b63b6:	bd08      	pop	{r3, pc}

000b63b8 <_ZN8VCNL40407bitMaskEhbhh>:
//commandHeight is used to select between the upper or lower byte of command register
//Example:
//Write dutyValue into PS_CONF1, lower byte, using the Duty_Mask
//bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
void VCNL4040::bitMask(uint8_t commandAddress, boolean commandHeight, uint8_t mask, uint8_t thing)
{
   b63b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b63bc:	4604      	mov	r4, r0
   b63be:	f89d 7018 	ldrb.w	r7, [sp, #24]
   b63c2:	460d      	mov	r5, r1
   b63c4:	4698      	mov	r8, r3
  // Grab current register context
  uint8_t registerContents;
  if (commandHeight == LOWER) registerContents = readCommandLower(commandAddress);
   b63c6:	4616      	mov	r6, r2
   b63c8:	b16a      	cbz	r2, b63e6 <_ZN8VCNL40407bitMaskEhbhh+0x2e>
  uint16_t commandValue = readCommand(commandCode);
   b63ca:	f7ff ff80 	bl	b62ce <_ZN8VCNL404011readCommandEh>
  return (commandValue & 0xFF);
   b63ce:	b2c0      	uxtb	r0, r0
  else registerContents = readCommandUpper(commandAddress);

  // Zero-out the portions of the register we're interested in
  registerContents &= mask;
   b63d0:	ea00 0308 	and.w	r3, r0, r8

  // Mask in new thing
  registerContents |= thing;
   b63d4:	ea43 0207 	orr.w	r2, r3, r7

  // Change contents
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   b63d8:	4629      	mov	r1, r5
   b63da:	4620      	mov	r0, r4
   b63dc:	b136      	cbz	r6, b63ec <_ZN8VCNL40407bitMaskEhbhh+0x34>
  else writeCommandUpper(commandAddress, registerContents);
}
   b63de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   b63e2:	f7ff bfc4 	b.w	b636e <_ZN8VCNL404017writeCommandLowerEhh>
  else registerContents = readCommandUpper(commandAddress);
   b63e6:	f7ff ffe1 	bl	b63ac <_ZN8VCNL404016readCommandUpperEh>
   b63ea:	e7f1      	b.n	b63d0 <_ZN8VCNL40407bitMaskEhbhh+0x18>
}
   b63ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  else writeCommandUpper(commandAddress, registerContents);
   b63f0:	f7ff bfcd 	b.w	b638e <_ZN8VCNL404017writeCommandUpperEhh>

000b63f4 <_ZN8VCNL404014setIRDutyCycleEt>:
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   b63f4:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
{
   b63f8:	b507      	push	{r0, r1, r2, lr}
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   b63fa:	d20e      	bcs.n	b641a <_ZN8VCNL404014setIRDutyCycleEt+0x26>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   b63fc:	299f      	cmp	r1, #159	; 0x9f
   b63fe:	d80e      	bhi.n	b641e <_ZN8VCNL404014setIRDutyCycleEt+0x2a>
  else dutyValue = VCNL4040_PS_DUTY_40;
   b6400:	294f      	cmp	r1, #79	; 0x4f
   b6402:	bf8c      	ite	hi
   b6404:	2340      	movhi	r3, #64	; 0x40
   b6406:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
   b6408:	9300      	str	r3, [sp, #0]
   b640a:	2201      	movs	r2, #1
   b640c:	233f      	movs	r3, #63	; 0x3f
   b640e:	2103      	movs	r1, #3
   b6410:	f7ff ffd2 	bl	b63b8 <_ZN8VCNL40407bitMaskEhbhh>
}
   b6414:	b003      	add	sp, #12
   b6416:	f85d fb04 	ldr.w	pc, [sp], #4
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   b641a:	23c0      	movs	r3, #192	; 0xc0
   b641c:	e7f4      	b.n	b6408 <_ZN8VCNL404014setIRDutyCycleEt+0x14>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   b641e:	2380      	movs	r3, #128	; 0x80
   b6420:	e7f2      	b.n	b6408 <_ZN8VCNL404014setIRDutyCycleEt+0x14>

000b6422 <_ZN8VCNL404014powerOnAmbientEv>:
{
   b6422:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_ALS_CONF, LOWER, VCNL4040_ALS_SD_MASK, VCNL4040_ALS_SD_POWER_ON);
   b6424:	2100      	movs	r1, #0
   b6426:	9100      	str	r1, [sp, #0]
   b6428:	23fe      	movs	r3, #254	; 0xfe
   b642a:	2201      	movs	r2, #1
   b642c:	f7ff ffc4 	bl	b63b8 <_ZN8VCNL40407bitMaskEhbhh>
}
   b6430:	b003      	add	sp, #12
   b6432:	f85d fb04 	ldr.w	pc, [sp], #4

000b6436 <_ZN8VCNL404022setProxIntegrationTimeEh>:
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   b6436:	2907      	cmp	r1, #7
{
   b6438:	b507      	push	{r0, r1, r2, lr}
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   b643a:	d80f      	bhi.n	b645c <_ZN8VCNL404022setProxIntegrationTimeEh+0x26>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   b643c:	2903      	cmp	r1, #3
   b643e:	d80f      	bhi.n	b6460 <_ZN8VCNL404022setProxIntegrationTimeEh+0x2a>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   b6440:	d010      	beq.n	b6464 <_ZN8VCNL404022setProxIntegrationTimeEh+0x2e>
  else timeValue = VCNL4040_PS_IT_1T;
   b6442:	2902      	cmp	r1, #2
   b6444:	bf0c      	ite	eq
   b6446:	2304      	moveq	r3, #4
   b6448:	2300      	movne	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_IT_MASK, timeValue);
   b644a:	9300      	str	r3, [sp, #0]
   b644c:	2201      	movs	r2, #1
   b644e:	23f1      	movs	r3, #241	; 0xf1
   b6450:	2103      	movs	r1, #3
   b6452:	f7ff ffb1 	bl	b63b8 <_ZN8VCNL40407bitMaskEhbhh>
}
   b6456:	b003      	add	sp, #12
   b6458:	f85d fb04 	ldr.w	pc, [sp], #4
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   b645c:	230e      	movs	r3, #14
   b645e:	e7f4      	b.n	b644a <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   b6460:	230c      	movs	r3, #12
   b6462:	e7f2      	b.n	b644a <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   b6464:	2308      	movs	r3, #8
   b6466:	e7f0      	b.n	b644a <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>

000b6468 <_ZN8VCNL404016powerOnProximityEv>:
{
   b6468:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_SD_MASK, VCNL4040_PS_SD_POWER_ON);
   b646a:	2300      	movs	r3, #0
   b646c:	9300      	str	r3, [sp, #0]
   b646e:	2201      	movs	r2, #1
   b6470:	23fe      	movs	r3, #254	; 0xfe
   b6472:	2103      	movs	r1, #3
   b6474:	f7ff ffa0 	bl	b63b8 <_ZN8VCNL40407bitMaskEhbhh>
}
   b6478:	b003      	add	sp, #12
   b647a:	f85d fb04 	ldr.w	pc, [sp], #4

000b647e <_ZN8VCNL404017powerOffProximityEv>:
{
   b647e:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_SD_MASK, VCNL4040_PS_SD_POWER_OFF);
   b6480:	2201      	movs	r2, #1
   b6482:	9200      	str	r2, [sp, #0]
   b6484:	23fe      	movs	r3, #254	; 0xfe
   b6486:	2103      	movs	r1, #3
   b6488:	f7ff ff96 	bl	b63b8 <_ZN8VCNL40407bitMaskEhbhh>
}
   b648c:	b003      	add	sp, #12
   b648e:	f85d fb04 	ldr.w	pc, [sp], #4

000b6492 <_ZN8VCNL404017setProxResolutionEh>:
{
   b6492:	b507      	push	{r0, r1, r2, lr}
	else resolutionValue = VCNL4040_PS_HD_12_BIT;
   b6494:	290f      	cmp	r1, #15
   b6496:	bf8c      	ite	hi
   b6498:	2308      	movhi	r3, #8
   b649a:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF2, UPPER, VCNL4040_PS_HD_MASK, resolutionValue);
   b649c:	9300      	str	r3, [sp, #0]
   b649e:	2200      	movs	r2, #0
   b64a0:	23f7      	movs	r3, #247	; 0xf7
   b64a2:	2103      	movs	r1, #3
   b64a4:	f7ff ff88 	bl	b63b8 <_ZN8VCNL40407bitMaskEhbhh>
}
   b64a8:	b003      	add	sp, #12
   b64aa:	f85d fb04 	ldr.w	pc, [sp], #4

000b64ae <_ZN8VCNL404022enableSmartPersistanceEv>:
{
   b64ae:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF3, LOWER, VCNL4040_PS_SMART_PERS_MASK, VCNL4040_PS_SMART_PERS_ENABLE);
   b64b0:	2302      	movs	r3, #2
   b64b2:	9300      	str	r3, [sp, #0]
   b64b4:	2201      	movs	r2, #1
   b64b6:	23ef      	movs	r3, #239	; 0xef
   b64b8:	2104      	movs	r1, #4
   b64ba:	f7ff ff7d 	bl	b63b8 <_ZN8VCNL40407bitMaskEhbhh>
}
   b64be:	b003      	add	sp, #12
   b64c0:	f85d fb04 	ldr.w	pc, [sp], #4

000b64c4 <_ZN8VCNL404013setLEDCurrentEh>:
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b64c4:	29c7      	cmp	r1, #199	; 0xc7
{
   b64c6:	b507      	push	{r0, r1, r2, lr}
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b64c8:	d816      	bhi.n	b64f8 <_ZN8VCNL404013setLEDCurrentEh+0x34>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   b64ca:	29b3      	cmp	r1, #179	; 0xb3
   b64cc:	d816      	bhi.n	b64fc <_ZN8VCNL404013setLEDCurrentEh+0x38>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   b64ce:	299f      	cmp	r1, #159	; 0x9f
   b64d0:	d816      	bhi.n	b6500 <_ZN8VCNL404013setLEDCurrentEh+0x3c>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   b64d2:	298b      	cmp	r1, #139	; 0x8b
   b64d4:	d816      	bhi.n	b6504 <_ZN8VCNL404013setLEDCurrentEh+0x40>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   b64d6:	2977      	cmp	r1, #119	; 0x77
   b64d8:	d816      	bhi.n	b6508 <_ZN8VCNL404013setLEDCurrentEh+0x44>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   b64da:	2963      	cmp	r1, #99	; 0x63
   b64dc:	d816      	bhi.n	b650c <_ZN8VCNL404013setLEDCurrentEh+0x48>
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b64de:	294a      	cmp	r1, #74	; 0x4a
   b64e0:	bf94      	ite	ls
   b64e2:	2100      	movls	r1, #0
   b64e4:	2101      	movhi	r1, #1
	bitMask(VCNL4040_PS_MS, UPPER, VCNL4040_LED_I_MASK, currentValue);
   b64e6:	9100      	str	r1, [sp, #0]
   b64e8:	23f8      	movs	r3, #248	; 0xf8
   b64ea:	2200      	movs	r2, #0
   b64ec:	2104      	movs	r1, #4
   b64ee:	f7ff ff63 	bl	b63b8 <_ZN8VCNL40407bitMaskEhbhh>
}
   b64f2:	b003      	add	sp, #12
   b64f4:	f85d fb04 	ldr.w	pc, [sp], #4
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b64f8:	2107      	movs	r1, #7
   b64fa:	e7f4      	b.n	b64e6 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   b64fc:	2106      	movs	r1, #6
   b64fe:	e7f2      	b.n	b64e6 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   b6500:	2105      	movs	r1, #5
   b6502:	e7f0      	b.n	b64e6 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   b6504:	2104      	movs	r1, #4
   b6506:	e7ee      	b.n	b64e6 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   b6508:	2103      	movs	r1, #3
   b650a:	e7ec      	b.n	b64e6 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   b650c:	2102      	movs	r1, #2
   b650e:	e7ea      	b.n	b64e6 <_ZN8VCNL404013setLEDCurrentEh+0x22>

000b6510 <_ZN8VCNL40405beginER7TwoWire>:
boolean VCNL4040::begin(TwoWire &wirePort) {
   b6510:	b538      	push	{r3, r4, r5, lr}
   b6512:	4604      	mov	r4, r0
   b6514:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   b6516:	6021      	str	r1, [r4, #0]
  _i2cPort->begin();
   b6518:	f000 fc4c 	bl	b6db4 <_ZN7TwoWire5beginEv>
  if (isConnected() == false) return (false); //I2C comm failure
   b651c:	4620      	mov	r0, r4
   b651e:	f7ff fec9 	bl	b62b4 <_ZN8VCNL404011isConnectedEv>
   b6522:	4605      	mov	r5, r0
   b6524:	b910      	cbnz	r0, b652c <_ZN8VCNL40405beginER7TwoWire+0x1c>
   b6526:	2500      	movs	r5, #0
}
   b6528:	4628      	mov	r0, r5
   b652a:	bd38      	pop	{r3, r4, r5, pc}
  if (getID() != 0x0186) return (false); //Check default ID value
   b652c:	4620      	mov	r0, r4
   b652e:	f7ff fefd 	bl	b632c <_ZN8VCNL40405getIDEv>
   b6532:	f5b0 7fc3 	cmp.w	r0, #390	; 0x186
   b6536:	d1f6      	bne.n	b6526 <_ZN8VCNL40405beginER7TwoWire+0x16>
  setLEDCurrent(200); //Max IR LED current
   b6538:	4620      	mov	r0, r4
   b653a:	21c8      	movs	r1, #200	; 0xc8
   b653c:	f7ff ffc2 	bl	b64c4 <_ZN8VCNL404013setLEDCurrentEh>
  setIRDutyCycle(40); //Set to highest duty cycle
   b6540:	4620      	mov	r0, r4
   b6542:	2128      	movs	r1, #40	; 0x28
   b6544:	f7ff ff56 	bl	b63f4 <_ZN8VCNL404014setIRDutyCycleEt>
  setProxIntegrationTime(8); //Set to max integration
   b6548:	4620      	mov	r0, r4
   b654a:	2108      	movs	r1, #8
   b654c:	f7ff ff73 	bl	b6436 <_ZN8VCNL404022setProxIntegrationTimeEh>
  setProxResolution(16); //Set to 16-bit output
   b6550:	2110      	movs	r1, #16
   b6552:	4620      	mov	r0, r4
   b6554:	f7ff ff9d 	bl	b6492 <_ZN8VCNL404017setProxResolutionEh>
  enableSmartPersistance(); //Turn on smart presistance
   b6558:	4620      	mov	r0, r4
   b655a:	f7ff ffa8 	bl	b64ae <_ZN8VCNL404022enableSmartPersistanceEv>
  powerOnProximity(); //Turn on prox sensing
   b655e:	4620      	mov	r0, r4
   b6560:	f7ff ff82 	bl	b6468 <_ZN8VCNL404016powerOnProximityEv>
  return (true);
   b6564:	e7e0      	b.n	b6528 <_ZN8VCNL40405beginER7TwoWire+0x18>

000b6566 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   b6566:	f000 bb99 	b.w	b6c9c <delay>

000b656a <_Z11BlynkMillisv>:
   b656a:	f000 b8e7 	b.w	b673c <HAL_Timer_Get_Milli_Seconds>

000b656e <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   b656e:	4770      	bx	lr

000b6570 <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   b6570:	4770      	bx	lr

000b6572 <BlynkNoOpCbk>:
{}
   b6572:	4770      	bx	lr

000b6574 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   b6574:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   b6576:	bf5a      	itte	pl
   b6578:	4b02      	ldrpl	r3, [pc, #8]	; (b6584 <GetReadHandler+0x10>)
   b657a:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b657e:	2000      	movmi	r0, #0
#endif
}
   b6580:	4770      	bx	lr
   b6582:	bf00      	nop
   b6584:	000bbaa4 	.word	0x000bbaa4

000b6588 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   b6588:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   b658a:	bf5a      	itte	pl
   b658c:	4b02      	ldrpl	r3, [pc, #8]	; (b6598 <GetWriteHandler+0x10>)
   b658e:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b6592:	2000      	movmi	r0, #0
#endif
}
   b6594:	4770      	bx	lr
   b6596:	bf00      	nop
   b6598:	000bbca4 	.word	0x000bbca4

000b659c <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b659c:	b510      	push	{r4, lr}
   b659e:	4b06      	ldr	r3, [pc, #24]	; (b65b8 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b65a0:	6003      	str	r3, [r0, #0]
   b65a2:	4604      	mov	r4, r0
	if (mutex) {
   b65a4:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b65a6:	b108      	cbz	r0, b65ac <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b65a8:	f000 f8a8 	bl	b66fc <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b65ac:	4620      	mov	r0, r4
   b65ae:	f7ff f9ad 	bl	b590c <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b65b2:	4620      	mov	r0, r4
   b65b4:	bd10      	pop	{r4, pc}
   b65b6:	bf00      	nop
   b65b8:	000bbeac 	.word	0x000bbeac

000b65bc <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b65bc:	b510      	push	{r4, lr}
   b65be:	4604      	mov	r4, r0
}
   b65c0:	f7ff ffec 	bl	b659c <_ZN16OledWingAdafruitD1Ev>
   b65c4:	4620      	mov	r0, r4
   b65c6:	2170      	movs	r1, #112	; 0x70
   b65c8:	f7fd fd69 	bl	b409e <_ZdlPvj>
   b65cc:	4620      	mov	r0, r4
   b65ce:	bd10      	pop	{r4, pc}

000b65d0 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b65d0:	b530      	push	{r4, r5, lr}
   b65d2:	b085      	sub	sp, #20
   b65d4:	4604      	mov	r4, r0
   b65d6:	460d      	mov	r5, r1
   b65d8:	f001 fd64 	bl	b80a4 <_Z19__fetch_global_Wirev>
   b65dc:	4a10      	ldr	r2, [pc, #64]	; (b6620 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b65de:	4911      	ldr	r1, [pc, #68]	; (b6624 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b65e0:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b65e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b65e8:	2180      	movs	r1, #128	; 0x80
   b65ea:	4603      	mov	r3, r0
   b65ec:	9200      	str	r2, [sp, #0]
   b65ee:	4620      	mov	r0, r4
   b65f0:	2220      	movs	r2, #32
   b65f2:	f7ff fa03 	bl	b59fc <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b65f6:	4b0c      	ldr	r3, [pc, #48]	; (b6628 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b65f8:	6023      	str	r3, [r4, #0]
   b65fa:	2300      	movs	r3, #0
   b65fc:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b6600:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b6604:	f7ff fdfc 	bl	b6200 <_ZN8DebounceC1Ev>
   b6608:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b660c:	f7ff fdf8 	bl	b6200 <_ZN8DebounceC1Ev>
   b6610:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b6614:	f7ff fdf4 	bl	b6200 <_ZN8DebounceC1Ev>
}
   b6618:	4620      	mov	r0, r4
   b661a:	b005      	add	sp, #20
   b661c:	bd30      	pop	{r4, r5, pc}
   b661e:	bf00      	nop
   b6620:	00061a80 	.word	0x00061a80
   b6624:	000186a0 	.word	0x000186a0
   b6628:	000bbeac 	.word	0x000bbeac

000b662c <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b662c:	b513      	push	{r0, r1, r4, lr}
   b662e:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b6630:	3050      	adds	r0, #80	; 0x50
   b6632:	f000 f85b 	bl	b66ec <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b6636:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6638:	07d9      	lsls	r1, r3, #31
   b663a:	d505      	bpl.n	b6648 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b663c:	2202      	movs	r2, #2
   b663e:	2104      	movs	r1, #4
   b6640:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b6644:	f7ff fdf0 	bl	b6228 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b6648:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b664a:	079a      	lsls	r2, r3, #30
   b664c:	d505      	bpl.n	b665a <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b664e:	2200      	movs	r2, #0
   b6650:	2103      	movs	r1, #3
   b6652:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b6656:	f7ff fde7 	bl	b6228 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b665a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b665c:	075b      	lsls	r3, r3, #29
   b665e:	d505      	bpl.n	b666c <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b6660:	2202      	movs	r2, #2
   b6662:	4611      	mov	r1, r2
   b6664:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b6668:	f7ff fdde 	bl	b6228 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b666c:	2301      	movs	r3, #1
   b666e:	9300      	str	r3, [sp, #0]
   b6670:	223c      	movs	r2, #60	; 0x3c
   b6672:	2102      	movs	r1, #2
   b6674:	4620      	mov	r0, r4
   b6676:	f7ff fac9 	bl	b5c0c <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b667a:	b002      	add	sp, #8
   b667c:	bd10      	pop	{r4, pc}

000b667e <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b667e:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b6680:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b6682:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b6684:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b6686:	d502      	bpl.n	b668e <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b6688:	3058      	adds	r0, #88	; 0x58
   b668a:	f7ff fdda 	bl	b6242 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b668e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6690:	079a      	lsls	r2, r3, #30
   b6692:	d503      	bpl.n	b669c <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b6694:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b6698:	f7ff fdd3 	bl	b6242 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b669c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b669e:	075b      	lsls	r3, r3, #29
   b66a0:	d505      	bpl.n	b66ae <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b66a2:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b66a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b66aa:	f7ff bdca 	b.w	b6242 <_ZN8Debounce6updateEv>
}
   b66ae:	bd10      	pop	{r4, pc}

000b66b0 <_ZN16OledWingAdafruit8pressedAEv>:

bool OledWingAdafruit::pressedA() {
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   b66b0:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedA() {
   b66b2:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   b66b4:	f013 0001 	ands.w	r0, r3, #1
   b66b8:	d003      	beq.n	b66c2 <_ZN16OledWingAdafruit8pressedAEv+0x12>
   b66ba:	f102 0058 	add.w	r0, r2, #88	; 0x58
   b66be:	f7ff bdf0 	b.w	b62a2 <_ZN8Debounce4fellEv>
}
   b66c2:	4770      	bx	lr

000b66c4 <_ZN16OledWingAdafruit8pressedBEv>:

bool OledWingAdafruit::pressedB() {
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   b66c4:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedB() {
   b66c6:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   b66c8:	f013 0002 	ands.w	r0, r3, #2
   b66cc:	d003      	beq.n	b66d6 <_ZN16OledWingAdafruit8pressedBEv+0x12>
   b66ce:	f102 0060 	add.w	r0, r2, #96	; 0x60
   b66d2:	f7ff bde6 	b.w	b62a2 <_ZN8Debounce4fellEv>
}
   b66d6:	4770      	bx	lr

000b66d8 <_ZN16OledWingAdafruit8pressedCEv>:

bool OledWingAdafruit::pressedC() {
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   b66d8:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedC() {
   b66da:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   b66dc:	f013 0004 	ands.w	r0, r3, #4
   b66e0:	d003      	beq.n	b66ea <_ZN16OledWingAdafruit8pressedCEv+0x12>
   b66e2:	f102 0068 	add.w	r0, r2, #104	; 0x68
   b66e6:	f7ff bddc 	b.w	b62a2 <_ZN8Debounce4fellEv>
}
   b66ea:	4770      	bx	lr

000b66ec <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b66ec:	b508      	push	{r3, lr}
   b66ee:	4b02      	ldr	r3, [pc, #8]	; (b66f8 <os_mutex_create+0xc>)
   b66f0:	681b      	ldr	r3, [r3, #0]
   b66f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b66f4:	9301      	str	r3, [sp, #4]
   b66f6:	bd08      	pop	{r3, pc}
   b66f8:	00030248 	.word	0x00030248

000b66fc <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b66fc:	b508      	push	{r3, lr}
   b66fe:	4b02      	ldr	r3, [pc, #8]	; (b6708 <os_mutex_destroy+0xc>)
   b6700:	681b      	ldr	r3, [r3, #0]
   b6702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6704:	9301      	str	r3, [sp, #4]
   b6706:	bd08      	pop	{r3, pc}
   b6708:	00030248 	.word	0x00030248

000b670c <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b670c:	b508      	push	{r3, lr}
   b670e:	4b02      	ldr	r3, [pc, #8]	; (b6718 <os_mutex_recursive_create+0xc>)
   b6710:	681b      	ldr	r3, [r3, #0]
   b6712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6714:	9301      	str	r3, [sp, #4]
   b6716:	bd08      	pop	{r3, pc}
   b6718:	00030248 	.word	0x00030248

000b671c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b671c:	b508      	push	{r3, lr}
   b671e:	4b02      	ldr	r3, [pc, #8]	; (b6728 <HAL_RNG_GetRandomNumber+0xc>)
   b6720:	681b      	ldr	r3, [r3, #0]
   b6722:	685b      	ldr	r3, [r3, #4]
   b6724:	9301      	str	r3, [sp, #4]
   b6726:	bd08      	pop	{r3, pc}
   b6728:	00030218 	.word	0x00030218

000b672c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b672c:	b508      	push	{r3, lr}
   b672e:	4b02      	ldr	r3, [pc, #8]	; (b6738 <HAL_Delay_Microseconds+0xc>)
   b6730:	681b      	ldr	r3, [r3, #0]
   b6732:	68db      	ldr	r3, [r3, #12]
   b6734:	9301      	str	r3, [sp, #4]
   b6736:	bd08      	pop	{r3, pc}
   b6738:	00030218 	.word	0x00030218

000b673c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b673c:	b508      	push	{r3, lr}
   b673e:	4b02      	ldr	r3, [pc, #8]	; (b6748 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6740:	681b      	ldr	r3, [r3, #0]
   b6742:	695b      	ldr	r3, [r3, #20]
   b6744:	9301      	str	r3, [sp, #4]
   b6746:	bd08      	pop	{r3, pc}
   b6748:	00030218 	.word	0x00030218

000b674c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b674c:	b508      	push	{r3, lr}
   b674e:	4b02      	ldr	r3, [pc, #8]	; (b6758 <HAL_Validate_Pin_Function+0xc>)
   b6750:	681b      	ldr	r3, [r3, #0]
   b6752:	685b      	ldr	r3, [r3, #4]
   b6754:	9301      	str	r3, [sp, #4]
   b6756:	bd08      	pop	{r3, pc}
   b6758:	0003022c 	.word	0x0003022c

000b675c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b675c:	b508      	push	{r3, lr}
   b675e:	4b02      	ldr	r3, [pc, #8]	; (b6768 <HAL_Pin_Mode+0xc>)
   b6760:	681b      	ldr	r3, [r3, #0]
   b6762:	689b      	ldr	r3, [r3, #8]
   b6764:	9301      	str	r3, [sp, #4]
   b6766:	bd08      	pop	{r3, pc}
   b6768:	0003022c 	.word	0x0003022c

000b676c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b676c:	b508      	push	{r3, lr}
   b676e:	4b02      	ldr	r3, [pc, #8]	; (b6778 <HAL_Get_Pin_Mode+0xc>)
   b6770:	681b      	ldr	r3, [r3, #0]
   b6772:	68db      	ldr	r3, [r3, #12]
   b6774:	9301      	str	r3, [sp, #4]
   b6776:	bd08      	pop	{r3, pc}
   b6778:	0003022c 	.word	0x0003022c

000b677c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b677c:	b508      	push	{r3, lr}
   b677e:	4b02      	ldr	r3, [pc, #8]	; (b6788 <HAL_GPIO_Write+0xc>)
   b6780:	681b      	ldr	r3, [r3, #0]
   b6782:	691b      	ldr	r3, [r3, #16]
   b6784:	9301      	str	r3, [sp, #4]
   b6786:	bd08      	pop	{r3, pc}
   b6788:	0003022c 	.word	0x0003022c

000b678c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b678c:	b508      	push	{r3, lr}
   b678e:	4b02      	ldr	r3, [pc, #8]	; (b6798 <HAL_GPIO_Read+0xc>)
   b6790:	681b      	ldr	r3, [r3, #0]
   b6792:	695b      	ldr	r3, [r3, #20]
   b6794:	9301      	str	r3, [sp, #4]
   b6796:	bd08      	pop	{r3, pc}
   b6798:	0003022c 	.word	0x0003022c

000b679c <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   b679c:	b508      	push	{r3, lr}
   b679e:	4b02      	ldr	r3, [pc, #8]	; (b67a8 <HAL_DAC_Write+0xc>)
   b67a0:	681b      	ldr	r3, [r3, #0]
   b67a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b67a4:	9301      	str	r3, [sp, #4]
   b67a6:	bd08      	pop	{r3, pc}
   b67a8:	0003022c 	.word	0x0003022c

000b67ac <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b67ac:	b508      	push	{r3, lr}
   b67ae:	4b02      	ldr	r3, [pc, #8]	; (b67b8 <hal_adc_read+0xc>)
   b67b0:	681b      	ldr	r3, [r3, #0]
   b67b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b67b4:	9301      	str	r3, [sp, #4]
   b67b6:	bd08      	pop	{r3, pc}
   b67b8:	0003022c 	.word	0x0003022c

000b67bc <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b67bc:	b508      	push	{r3, lr}
   b67be:	4b02      	ldr	r3, [pc, #8]	; (b67c8 <hal_pwm_write_ext+0xc>)
   b67c0:	681b      	ldr	r3, [r3, #0]
   b67c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b67c4:	9301      	str	r3, [sp, #4]
   b67c6:	bd08      	pop	{r3, pc}
   b67c8:	0003022c 	.word	0x0003022c

000b67cc <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b67cc:	b508      	push	{r3, lr}
   b67ce:	4b02      	ldr	r3, [pc, #8]	; (b67d8 <hal_i2c_set_speed+0xc>)
   b67d0:	681b      	ldr	r3, [r3, #0]
   b67d2:	681b      	ldr	r3, [r3, #0]
   b67d4:	9301      	str	r3, [sp, #4]
   b67d6:	bd08      	pop	{r3, pc}
   b67d8:	00030228 	.word	0x00030228

000b67dc <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b67dc:	b508      	push	{r3, lr}
   b67de:	4b02      	ldr	r3, [pc, #8]	; (b67e8 <hal_i2c_begin+0xc>)
   b67e0:	681b      	ldr	r3, [r3, #0]
   b67e2:	68db      	ldr	r3, [r3, #12]
   b67e4:	9301      	str	r3, [sp, #4]
   b67e6:	bd08      	pop	{r3, pc}
   b67e8:	00030228 	.word	0x00030228

000b67ec <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b67ec:	b508      	push	{r3, lr}
   b67ee:	4b02      	ldr	r3, [pc, #8]	; (b67f8 <hal_i2c_begin_transmission+0xc>)
   b67f0:	681b      	ldr	r3, [r3, #0]
   b67f2:	699b      	ldr	r3, [r3, #24]
   b67f4:	9301      	str	r3, [sp, #4]
   b67f6:	bd08      	pop	{r3, pc}
   b67f8:	00030228 	.word	0x00030228

000b67fc <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b67fc:	b508      	push	{r3, lr}
   b67fe:	4b02      	ldr	r3, [pc, #8]	; (b6808 <hal_i2c_end_transmission+0xc>)
   b6800:	681b      	ldr	r3, [r3, #0]
   b6802:	69db      	ldr	r3, [r3, #28]
   b6804:	9301      	str	r3, [sp, #4]
   b6806:	bd08      	pop	{r3, pc}
   b6808:	00030228 	.word	0x00030228

000b680c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b680c:	b508      	push	{r3, lr}
   b680e:	4b02      	ldr	r3, [pc, #8]	; (b6818 <hal_i2c_write+0xc>)
   b6810:	681b      	ldr	r3, [r3, #0]
   b6812:	6a1b      	ldr	r3, [r3, #32]
   b6814:	9301      	str	r3, [sp, #4]
   b6816:	bd08      	pop	{r3, pc}
   b6818:	00030228 	.word	0x00030228

000b681c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b681c:	b508      	push	{r3, lr}
   b681e:	4b02      	ldr	r3, [pc, #8]	; (b6828 <hal_i2c_available+0xc>)
   b6820:	681b      	ldr	r3, [r3, #0]
   b6822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6824:	9301      	str	r3, [sp, #4]
   b6826:	bd08      	pop	{r3, pc}
   b6828:	00030228 	.word	0x00030228

000b682c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b682c:	b508      	push	{r3, lr}
   b682e:	4b02      	ldr	r3, [pc, #8]	; (b6838 <hal_i2c_read+0xc>)
   b6830:	681b      	ldr	r3, [r3, #0]
   b6832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6834:	9301      	str	r3, [sp, #4]
   b6836:	bd08      	pop	{r3, pc}
   b6838:	00030228 	.word	0x00030228

000b683c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b683c:	b508      	push	{r3, lr}
   b683e:	4b02      	ldr	r3, [pc, #8]	; (b6848 <hal_i2c_peek+0xc>)
   b6840:	681b      	ldr	r3, [r3, #0]
   b6842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6844:	9301      	str	r3, [sp, #4]
   b6846:	bd08      	pop	{r3, pc}
   b6848:	00030228 	.word	0x00030228

000b684c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b684c:	b508      	push	{r3, lr}
   b684e:	4b02      	ldr	r3, [pc, #8]	; (b6858 <hal_i2c_flush+0xc>)
   b6850:	681b      	ldr	r3, [r3, #0]
   b6852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6854:	9301      	str	r3, [sp, #4]
   b6856:	bd08      	pop	{r3, pc}
   b6858:	00030228 	.word	0x00030228

000b685c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b685c:	b508      	push	{r3, lr}
   b685e:	4b02      	ldr	r3, [pc, #8]	; (b6868 <hal_i2c_is_enabled+0xc>)
   b6860:	681b      	ldr	r3, [r3, #0]
   b6862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6864:	9301      	str	r3, [sp, #4]
   b6866:	bd08      	pop	{r3, pc}
   b6868:	00030228 	.word	0x00030228

000b686c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b686c:	b508      	push	{r3, lr}
   b686e:	4b02      	ldr	r3, [pc, #8]	; (b6878 <hal_i2c_init+0xc>)
   b6870:	681b      	ldr	r3, [r3, #0]
   b6872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6874:	9301      	str	r3, [sp, #4]
   b6876:	bd08      	pop	{r3, pc}
   b6878:	00030228 	.word	0x00030228

000b687c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b687c:	b508      	push	{r3, lr}
   b687e:	4b02      	ldr	r3, [pc, #8]	; (b6888 <hal_i2c_request_ex+0xc>)
   b6880:	681b      	ldr	r3, [r3, #0]
   b6882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6884:	9301      	str	r3, [sp, #4]
   b6886:	bd08      	pop	{r3, pc}
   b6888:	00030228 	.word	0x00030228

000b688c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b688c:	b508      	push	{r3, lr}
   b688e:	4b02      	ldr	r3, [pc, #8]	; (b6898 <if_index_to_name+0xc>)
   b6890:	681b      	ldr	r3, [r3, #0]
   b6892:	695b      	ldr	r3, [r3, #20]
   b6894:	9301      	str	r3, [sp, #4]
   b6896:	bd08      	pop	{r3, pc}
   b6898:	0003026c 	.word	0x0003026c

000b689c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b689c:	b508      	push	{r3, lr}
   b689e:	4b02      	ldr	r3, [pc, #8]	; (b68a8 <inet_inet_ntop+0xc>)
   b68a0:	681b      	ldr	r3, [r3, #0]
   b68a2:	695b      	ldr	r3, [r3, #20]
   b68a4:	9301      	str	r3, [sp, #4]
   b68a6:	bd08      	pop	{r3, pc}
   b68a8:	00030264 	.word	0x00030264

000b68ac <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b68ac:	b508      	push	{r3, lr}
   b68ae:	4b02      	ldr	r3, [pc, #8]	; (b68b8 <inet_htonl+0xc>)
   b68b0:	681b      	ldr	r3, [r3, #0]
   b68b2:	6a1b      	ldr	r3, [r3, #32]
   b68b4:	9301      	str	r3, [sp, #4]
   b68b6:	bd08      	pop	{r3, pc}
   b68b8:	00030264 	.word	0x00030264

000b68bc <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b68bc:	b508      	push	{r3, lr}
   b68be:	4b02      	ldr	r3, [pc, #8]	; (b68c8 <inet_htons+0xc>)
   b68c0:	681b      	ldr	r3, [r3, #0]
   b68c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b68c4:	9301      	str	r3, [sp, #4]
   b68c6:	bd08      	pop	{r3, pc}
   b68c8:	00030264 	.word	0x00030264

000b68cc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b68cc:	b508      	push	{r3, lr}
   b68ce:	4b02      	ldr	r3, [pc, #8]	; (b68d8 <netdb_freeaddrinfo+0xc>)
   b68d0:	681b      	ldr	r3, [r3, #0]
   b68d2:	689b      	ldr	r3, [r3, #8]
   b68d4:	9301      	str	r3, [sp, #4]
   b68d6:	bd08      	pop	{r3, pc}
   b68d8:	00030268 	.word	0x00030268

000b68dc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b68dc:	b508      	push	{r3, lr}
   b68de:	4b02      	ldr	r3, [pc, #8]	; (b68e8 <netdb_getaddrinfo+0xc>)
   b68e0:	681b      	ldr	r3, [r3, #0]
   b68e2:	68db      	ldr	r3, [r3, #12]
   b68e4:	9301      	str	r3, [sp, #4]
   b68e6:	bd08      	pop	{r3, pc}
   b68e8:	00030268 	.word	0x00030268

000b68ec <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b68ec:	b508      	push	{r3, lr}
   b68ee:	4b02      	ldr	r3, [pc, #8]	; (b68f8 <sock_setsockopt+0xc>)
   b68f0:	681b      	ldr	r3, [r3, #0]
   b68f2:	699b      	ldr	r3, [r3, #24]
   b68f4:	9301      	str	r3, [sp, #4]
   b68f6:	bd08      	pop	{r3, pc}
   b68f8:	00030238 	.word	0x00030238

000b68fc <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b68fc:	b508      	push	{r3, lr}
   b68fe:	4b02      	ldr	r3, [pc, #8]	; (b6908 <sock_close+0xc>)
   b6900:	681b      	ldr	r3, [r3, #0]
   b6902:	69db      	ldr	r3, [r3, #28]
   b6904:	9301      	str	r3, [sp, #4]
   b6906:	bd08      	pop	{r3, pc}
   b6908:	00030238 	.word	0x00030238

000b690c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b690c:	b508      	push	{r3, lr}
   b690e:	4b02      	ldr	r3, [pc, #8]	; (b6918 <sock_connect+0xc>)
   b6910:	681b      	ldr	r3, [r3, #0]
   b6912:	6a1b      	ldr	r3, [r3, #32]
   b6914:	9301      	str	r3, [sp, #4]
   b6916:	bd08      	pop	{r3, pc}
   b6918:	00030238 	.word	0x00030238

000b691c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b691c:	b508      	push	{r3, lr}
   b691e:	4b02      	ldr	r3, [pc, #8]	; (b6928 <sock_recv+0xc>)
   b6920:	681b      	ldr	r3, [r3, #0]
   b6922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6924:	9301      	str	r3, [sp, #4]
   b6926:	bd08      	pop	{r3, pc}
   b6928:	00030238 	.word	0x00030238

000b692c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b692c:	b508      	push	{r3, lr}
   b692e:	4b02      	ldr	r3, [pc, #8]	; (b6938 <sock_send+0xc>)
   b6930:	681b      	ldr	r3, [r3, #0]
   b6932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6934:	9301      	str	r3, [sp, #4]
   b6936:	bd08      	pop	{r3, pc}
   b6938:	00030238 	.word	0x00030238

000b693c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b693c:	b508      	push	{r3, lr}
   b693e:	4b02      	ldr	r3, [pc, #8]	; (b6948 <sock_socket+0xc>)
   b6940:	681b      	ldr	r3, [r3, #0]
   b6942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6944:	9301      	str	r3, [sp, #4]
   b6946:	bd08      	pop	{r3, pc}
   b6948:	00030238 	.word	0x00030238

000b694c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b694c:	b508      	push	{r3, lr}
   b694e:	4b02      	ldr	r3, [pc, #8]	; (b6958 <hal_spi_begin+0xc>)
   b6950:	681b      	ldr	r3, [r3, #0]
   b6952:	681b      	ldr	r3, [r3, #0]
   b6954:	9301      	str	r3, [sp, #4]
   b6956:	bd08      	pop	{r3, pc}
   b6958:	00030230 	.word	0x00030230

000b695c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b695c:	b508      	push	{r3, lr}
   b695e:	4b02      	ldr	r3, [pc, #8]	; (b6968 <hal_spi_transfer+0xc>)
   b6960:	681b      	ldr	r3, [r3, #0]
   b6962:	695b      	ldr	r3, [r3, #20]
   b6964:	9301      	str	r3, [sp, #4]
   b6966:	bd08      	pop	{r3, pc}
   b6968:	00030230 	.word	0x00030230

000b696c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b696c:	b508      	push	{r3, lr}
   b696e:	4b02      	ldr	r3, [pc, #8]	; (b6978 <hal_spi_init+0xc>)
   b6970:	681b      	ldr	r3, [r3, #0]
   b6972:	69db      	ldr	r3, [r3, #28]
   b6974:	9301      	str	r3, [sp, #4]
   b6976:	bd08      	pop	{r3, pc}
   b6978:	00030230 	.word	0x00030230

000b697c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b697c:	b508      	push	{r3, lr}
   b697e:	4b02      	ldr	r3, [pc, #8]	; (b6988 <hal_spi_is_enabled+0xc>)
   b6980:	681b      	ldr	r3, [r3, #0]
   b6982:	6a1b      	ldr	r3, [r3, #32]
   b6984:	9301      	str	r3, [sp, #4]
   b6986:	bd08      	pop	{r3, pc}
   b6988:	00030230 	.word	0x00030230

000b698c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b698c:	b508      	push	{r3, lr}
   b698e:	4b02      	ldr	r3, [pc, #8]	; (b6998 <hal_spi_info+0xc>)
   b6990:	681b      	ldr	r3, [r3, #0]
   b6992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6994:	9301      	str	r3, [sp, #4]
   b6996:	bd08      	pop	{r3, pc}
   b6998:	00030230 	.word	0x00030230

000b699c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b699c:	b508      	push	{r3, lr}
   b699e:	4b02      	ldr	r3, [pc, #8]	; (b69a8 <hal_spi_set_settings+0xc>)
   b69a0:	681b      	ldr	r3, [r3, #0]
   b69a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b69a4:	9301      	str	r3, [sp, #4]
   b69a6:	bd08      	pop	{r3, pc}
   b69a8:	00030230 	.word	0x00030230

000b69ac <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b69ac:	b508      	push	{r3, lr}
   b69ae:	4b02      	ldr	r3, [pc, #8]	; (b69b8 <hal_spi_acquire+0xc>)
   b69b0:	681b      	ldr	r3, [r3, #0]
   b69b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b69b4:	9301      	str	r3, [sp, #4]
   b69b6:	bd08      	pop	{r3, pc}
   b69b8:	00030230 	.word	0x00030230

000b69bc <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b69bc:	b508      	push	{r3, lr}
   b69be:	4b02      	ldr	r3, [pc, #8]	; (b69c8 <hal_spi_release+0xc>)
   b69c0:	681b      	ldr	r3, [r3, #0]
   b69c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b69c4:	9301      	str	r3, [sp, #4]
   b69c6:	bd08      	pop	{r3, pc}
   b69c8:	00030230 	.word	0x00030230

000b69cc <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b69cc:	b508      	push	{r3, lr}
   b69ce:	4b02      	ldr	r3, [pc, #8]	; (b69d8 <hal_usart_write+0xc>)
   b69d0:	681b      	ldr	r3, [r3, #0]
   b69d2:	68db      	ldr	r3, [r3, #12]
   b69d4:	9301      	str	r3, [sp, #4]
   b69d6:	bd08      	pop	{r3, pc}
   b69d8:	0003023c 	.word	0x0003023c

000b69dc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b69dc:	b508      	push	{r3, lr}
   b69de:	4b02      	ldr	r3, [pc, #8]	; (b69e8 <hal_usart_available+0xc>)
   b69e0:	681b      	ldr	r3, [r3, #0]
   b69e2:	691b      	ldr	r3, [r3, #16]
   b69e4:	9301      	str	r3, [sp, #4]
   b69e6:	bd08      	pop	{r3, pc}
   b69e8:	0003023c 	.word	0x0003023c

000b69ec <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b69ec:	b508      	push	{r3, lr}
   b69ee:	4b02      	ldr	r3, [pc, #8]	; (b69f8 <hal_usart_read+0xc>)
   b69f0:	681b      	ldr	r3, [r3, #0]
   b69f2:	695b      	ldr	r3, [r3, #20]
   b69f4:	9301      	str	r3, [sp, #4]
   b69f6:	bd08      	pop	{r3, pc}
   b69f8:	0003023c 	.word	0x0003023c

000b69fc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b69fc:	b508      	push	{r3, lr}
   b69fe:	4b02      	ldr	r3, [pc, #8]	; (b6a08 <hal_usart_peek+0xc>)
   b6a00:	681b      	ldr	r3, [r3, #0]
   b6a02:	699b      	ldr	r3, [r3, #24]
   b6a04:	9301      	str	r3, [sp, #4]
   b6a06:	bd08      	pop	{r3, pc}
   b6a08:	0003023c 	.word	0x0003023c

000b6a0c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6a0c:	b508      	push	{r3, lr}
   b6a0e:	4b02      	ldr	r3, [pc, #8]	; (b6a18 <hal_usart_flush+0xc>)
   b6a10:	681b      	ldr	r3, [r3, #0]
   b6a12:	69db      	ldr	r3, [r3, #28]
   b6a14:	9301      	str	r3, [sp, #4]
   b6a16:	bd08      	pop	{r3, pc}
   b6a18:	0003023c 	.word	0x0003023c

000b6a1c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6a1c:	b508      	push	{r3, lr}
   b6a1e:	4b02      	ldr	r3, [pc, #8]	; (b6a28 <hal_usart_is_enabled+0xc>)
   b6a20:	681b      	ldr	r3, [r3, #0]
   b6a22:	6a1b      	ldr	r3, [r3, #32]
   b6a24:	9301      	str	r3, [sp, #4]
   b6a26:	bd08      	pop	{r3, pc}
   b6a28:	0003023c 	.word	0x0003023c

000b6a2c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6a2c:	b508      	push	{r3, lr}
   b6a2e:	4b02      	ldr	r3, [pc, #8]	; (b6a38 <hal_usart_available_data_for_write+0xc>)
   b6a30:	681b      	ldr	r3, [r3, #0]
   b6a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6a34:	9301      	str	r3, [sp, #4]
   b6a36:	bd08      	pop	{r3, pc}
   b6a38:	0003023c 	.word	0x0003023c

000b6a3c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6a3c:	b508      	push	{r3, lr}
   b6a3e:	4b02      	ldr	r3, [pc, #8]	; (b6a48 <hal_usart_init_ex+0xc>)
   b6a40:	681b      	ldr	r3, [r3, #0]
   b6a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6a44:	9301      	str	r3, [sp, #4]
   b6a46:	bd08      	pop	{r3, pc}
   b6a48:	0003023c 	.word	0x0003023c

000b6a4c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6a4c:	b508      	push	{r3, lr}
   b6a4e:	4b02      	ldr	r3, [pc, #8]	; (b6a58 <HAL_USB_USART_Init+0xc>)
   b6a50:	681b      	ldr	r3, [r3, #0]
   b6a52:	681b      	ldr	r3, [r3, #0]
   b6a54:	9301      	str	r3, [sp, #4]
   b6a56:	bd08      	pop	{r3, pc}
   b6a58:	0003024c 	.word	0x0003024c

000b6a5c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6a5c:	b508      	push	{r3, lr}
   b6a5e:	4b02      	ldr	r3, [pc, #8]	; (b6a68 <HAL_USB_USART_Available_Data+0xc>)
   b6a60:	681b      	ldr	r3, [r3, #0]
   b6a62:	691b      	ldr	r3, [r3, #16]
   b6a64:	9301      	str	r3, [sp, #4]
   b6a66:	bd08      	pop	{r3, pc}
   b6a68:	0003024c 	.word	0x0003024c

000b6a6c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6a6c:	b508      	push	{r3, lr}
   b6a6e:	4b02      	ldr	r3, [pc, #8]	; (b6a78 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6a70:	681b      	ldr	r3, [r3, #0]
   b6a72:	695b      	ldr	r3, [r3, #20]
   b6a74:	9301      	str	r3, [sp, #4]
   b6a76:	bd08      	pop	{r3, pc}
   b6a78:	0003024c 	.word	0x0003024c

000b6a7c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6a7c:	b508      	push	{r3, lr}
   b6a7e:	4b02      	ldr	r3, [pc, #8]	; (b6a88 <HAL_USB_USART_Receive_Data+0xc>)
   b6a80:	681b      	ldr	r3, [r3, #0]
   b6a82:	699b      	ldr	r3, [r3, #24]
   b6a84:	9301      	str	r3, [sp, #4]
   b6a86:	bd08      	pop	{r3, pc}
   b6a88:	0003024c 	.word	0x0003024c

000b6a8c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6a8c:	b508      	push	{r3, lr}
   b6a8e:	4b02      	ldr	r3, [pc, #8]	; (b6a98 <HAL_USB_USART_Send_Data+0xc>)
   b6a90:	681b      	ldr	r3, [r3, #0]
   b6a92:	69db      	ldr	r3, [r3, #28]
   b6a94:	9301      	str	r3, [sp, #4]
   b6a96:	bd08      	pop	{r3, pc}
   b6a98:	0003024c 	.word	0x0003024c

000b6a9c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6a9c:	b508      	push	{r3, lr}
   b6a9e:	4b02      	ldr	r3, [pc, #8]	; (b6aa8 <HAL_USB_USART_Flush_Data+0xc>)
   b6aa0:	681b      	ldr	r3, [r3, #0]
   b6aa2:	6a1b      	ldr	r3, [r3, #32]
   b6aa4:	9301      	str	r3, [sp, #4]
   b6aa6:	bd08      	pop	{r3, pc}
   b6aa8:	0003024c 	.word	0x0003024c

000b6aac <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6aac:	b508      	push	{r3, lr}
   b6aae:	4b02      	ldr	r3, [pc, #8]	; (b6ab8 <panic_+0xc>)
   b6ab0:	681b      	ldr	r3, [r3, #0]
   b6ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6ab4:	9301      	str	r3, [sp, #4]
   b6ab6:	bd08      	pop	{r3, pc}
   b6ab8:	00030260 	.word	0x00030260

000b6abc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6abc:	b508      	push	{r3, lr}
   b6abe:	4b02      	ldr	r3, [pc, #8]	; (b6ac8 <log_message+0xc>)
   b6ac0:	681b      	ldr	r3, [r3, #0]
   b6ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6ac4:	9301      	str	r3, [sp, #4]
   b6ac6:	bd08      	pop	{r3, pc}
   b6ac8:	00030260 	.word	0x00030260

000b6acc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6acc:	b508      	push	{r3, lr}
   b6ace:	4b02      	ldr	r3, [pc, #8]	; (b6ad8 <set_system_mode+0xc>)
   b6ad0:	681b      	ldr	r3, [r3, #0]
   b6ad2:	685b      	ldr	r3, [r3, #4]
   b6ad4:	9301      	str	r3, [sp, #4]
   b6ad6:	bd08      	pop	{r3, pc}
   b6ad8:	00030220 	.word	0x00030220

000b6adc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6adc:	b508      	push	{r3, lr}
   b6ade:	4b02      	ldr	r3, [pc, #8]	; (b6ae8 <system_delay_ms+0xc>)
   b6ae0:	681b      	ldr	r3, [r3, #0]
   b6ae2:	695b      	ldr	r3, [r3, #20]
   b6ae4:	9301      	str	r3, [sp, #4]
   b6ae6:	bd08      	pop	{r3, pc}
   b6ae8:	00030220 	.word	0x00030220

000b6aec <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6aec:	b508      	push	{r3, lr}
   b6aee:	4b02      	ldr	r3, [pc, #8]	; (b6af8 <system_thread_set_state+0xc>)
   b6af0:	681b      	ldr	r3, [r3, #0]
   b6af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6af4:	9301      	str	r3, [sp, #4]
   b6af6:	bd08      	pop	{r3, pc}
   b6af8:	00030220 	.word	0x00030220

000b6afc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6afc:	b508      	push	{r3, lr}
   b6afe:	4b03      	ldr	r3, [pc, #12]	; (b6b0c <system_ctrl_set_app_request_handler+0x10>)
   b6b00:	681b      	ldr	r3, [r3, #0]
   b6b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6b06:	9301      	str	r3, [sp, #4]
   b6b08:	bd08      	pop	{r3, pc}
   b6b0a:	0000      	.short	0x0000
   b6b0c:	00030220 	.word	0x00030220

000b6b10 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6b10:	b508      	push	{r3, lr}
   b6b12:	4b03      	ldr	r3, [pc, #12]	; (b6b20 <system_ctrl_set_result+0x10>)
   b6b14:	681b      	ldr	r3, [r3, #0]
   b6b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6b1a:	9301      	str	r3, [sp, #4]
   b6b1c:	bd08      	pop	{r3, pc}
   b6b1e:	0000      	.short	0x0000
   b6b20:	00030220 	.word	0x00030220

000b6b24 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b6b24:	b508      	push	{r3, lr}
   b6b26:	4b02      	ldr	r3, [pc, #8]	; (b6b30 <spark_process+0xc>)
   b6b28:	681b      	ldr	r3, [r3, #0]
   b6b2a:	689b      	ldr	r3, [r3, #8]
   b6b2c:	9301      	str	r3, [sp, #4]
   b6b2e:	bd08      	pop	{r3, pc}
   b6b30:	00030244 	.word	0x00030244

000b6b34 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6b34:	b508      	push	{r3, lr}
   b6b36:	4b02      	ldr	r3, [pc, #8]	; (b6b40 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6b38:	681b      	ldr	r3, [r3, #0]
   b6b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6b3c:	9301      	str	r3, [sp, #4]
   b6b3e:	bd08      	pop	{r3, pc}
   b6b40:	00030244 	.word	0x00030244

000b6b44 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6b44:	b508      	push	{r3, lr}
   b6b46:	4b02      	ldr	r3, [pc, #8]	; (b6b50 <network_connect+0xc>)
   b6b48:	681b      	ldr	r3, [r3, #0]
   b6b4a:	685b      	ldr	r3, [r3, #4]
   b6b4c:	9301      	str	r3, [sp, #4]
   b6b4e:	bd08      	pop	{r3, pc}
   b6b50:	00030240 	.word	0x00030240

000b6b54 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6b54:	b508      	push	{r3, lr}
   b6b56:	4b02      	ldr	r3, [pc, #8]	; (b6b60 <network_connecting+0xc>)
   b6b58:	681b      	ldr	r3, [r3, #0]
   b6b5a:	689b      	ldr	r3, [r3, #8]
   b6b5c:	9301      	str	r3, [sp, #4]
   b6b5e:	bd08      	pop	{r3, pc}
   b6b60:	00030240 	.word	0x00030240

000b6b64 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6b64:	b508      	push	{r3, lr}
   b6b66:	4b02      	ldr	r3, [pc, #8]	; (b6b70 <network_disconnect+0xc>)
   b6b68:	681b      	ldr	r3, [r3, #0]
   b6b6a:	68db      	ldr	r3, [r3, #12]
   b6b6c:	9301      	str	r3, [sp, #4]
   b6b6e:	bd08      	pop	{r3, pc}
   b6b70:	00030240 	.word	0x00030240

000b6b74 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6b74:	b508      	push	{r3, lr}
   b6b76:	4b02      	ldr	r3, [pc, #8]	; (b6b80 <network_ready+0xc>)
   b6b78:	681b      	ldr	r3, [r3, #0]
   b6b7a:	691b      	ldr	r3, [r3, #16]
   b6b7c:	9301      	str	r3, [sp, #4]
   b6b7e:	bd08      	pop	{r3, pc}
   b6b80:	00030240 	.word	0x00030240

000b6b84 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6b84:	b508      	push	{r3, lr}
   b6b86:	4b02      	ldr	r3, [pc, #8]	; (b6b90 <network_on+0xc>)
   b6b88:	681b      	ldr	r3, [r3, #0]
   b6b8a:	695b      	ldr	r3, [r3, #20]
   b6b8c:	9301      	str	r3, [sp, #4]
   b6b8e:	bd08      	pop	{r3, pc}
   b6b90:	00030240 	.word	0x00030240

000b6b94 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6b94:	b508      	push	{r3, lr}
   b6b96:	4b02      	ldr	r3, [pc, #8]	; (b6ba0 <network_off+0xc>)
   b6b98:	681b      	ldr	r3, [r3, #0]
   b6b9a:	699b      	ldr	r3, [r3, #24]
   b6b9c:	9301      	str	r3, [sp, #4]
   b6b9e:	bd08      	pop	{r3, pc}
   b6ba0:	00030240 	.word	0x00030240

000b6ba4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6ba4:	b508      	push	{r3, lr}
   b6ba6:	4b02      	ldr	r3, [pc, #8]	; (b6bb0 <network_listen+0xc>)
   b6ba8:	681b      	ldr	r3, [r3, #0]
   b6baa:	69db      	ldr	r3, [r3, #28]
   b6bac:	9301      	str	r3, [sp, #4]
   b6bae:	bd08      	pop	{r3, pc}
   b6bb0:	00030240 	.word	0x00030240

000b6bb4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6bb4:	b508      	push	{r3, lr}
   b6bb6:	4b02      	ldr	r3, [pc, #8]	; (b6bc0 <network_listening+0xc>)
   b6bb8:	681b      	ldr	r3, [r3, #0]
   b6bba:	6a1b      	ldr	r3, [r3, #32]
   b6bbc:	9301      	str	r3, [sp, #4]
   b6bbe:	bd08      	pop	{r3, pc}
   b6bc0:	00030240 	.word	0x00030240

000b6bc4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6bc4:	b508      	push	{r3, lr}
   b6bc6:	4b02      	ldr	r3, [pc, #8]	; (b6bd0 <network_set_listen_timeout+0xc>)
   b6bc8:	681b      	ldr	r3, [r3, #0]
   b6bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6bcc:	9301      	str	r3, [sp, #4]
   b6bce:	bd08      	pop	{r3, pc}
   b6bd0:	00030240 	.word	0x00030240

000b6bd4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6bd4:	b508      	push	{r3, lr}
   b6bd6:	4b02      	ldr	r3, [pc, #8]	; (b6be0 <network_get_listen_timeout+0xc>)
   b6bd8:	681b      	ldr	r3, [r3, #0]
   b6bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6bdc:	9301      	str	r3, [sp, #4]
   b6bde:	bd08      	pop	{r3, pc}
   b6be0:	00030240 	.word	0x00030240

000b6be4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6be4:	b508      	push	{r3, lr}
   b6be6:	4b02      	ldr	r3, [pc, #8]	; (b6bf0 <network_is_on+0xc>)
   b6be8:	681b      	ldr	r3, [r3, #0]
   b6bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6bec:	9301      	str	r3, [sp, #4]
   b6bee:	bd08      	pop	{r3, pc}
   b6bf0:	00030240 	.word	0x00030240

000b6bf4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6bf4:	b508      	push	{r3, lr}
   b6bf6:	4b02      	ldr	r3, [pc, #8]	; (b6c00 <network_is_off+0xc>)
   b6bf8:	681b      	ldr	r3, [r3, #0]
   b6bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6bfc:	9301      	str	r3, [sp, #4]
   b6bfe:	bd08      	pop	{r3, pc}
   b6c00:	00030240 	.word	0x00030240

000b6c04 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6c04:	b508      	push	{r3, lr}
   b6c06:	4b02      	ldr	r3, [pc, #8]	; (b6c10 <malloc+0xc>)
   b6c08:	681b      	ldr	r3, [r3, #0]
   b6c0a:	681b      	ldr	r3, [r3, #0]
   b6c0c:	9301      	str	r3, [sp, #4]
   b6c0e:	bd08      	pop	{r3, pc}
   b6c10:	0003021c 	.word	0x0003021c

000b6c14 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6c14:	b508      	push	{r3, lr}
   b6c16:	4b02      	ldr	r3, [pc, #8]	; (b6c20 <free+0xc>)
   b6c18:	681b      	ldr	r3, [r3, #0]
   b6c1a:	685b      	ldr	r3, [r3, #4]
   b6c1c:	9301      	str	r3, [sp, #4]
   b6c1e:	bd08      	pop	{r3, pc}
   b6c20:	0003021c 	.word	0x0003021c

000b6c24 <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b6c24:	b508      	push	{r3, lr}
   b6c26:	4b02      	ldr	r3, [pc, #8]	; (b6c30 <snprintf+0xc>)
   b6c28:	681b      	ldr	r3, [r3, #0]
   b6c2a:	69db      	ldr	r3, [r3, #28]
   b6c2c:	9301      	str	r3, [sp, #4]
   b6c2e:	bd08      	pop	{r3, pc}
   b6c30:	0003021c 	.word	0x0003021c

000b6c34 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6c34:	b508      	push	{r3, lr}
   b6c36:	4b02      	ldr	r3, [pc, #8]	; (b6c40 <vsnprintf+0xc>)
   b6c38:	681b      	ldr	r3, [r3, #0]
   b6c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6c3c:	9301      	str	r3, [sp, #4]
   b6c3e:	bd08      	pop	{r3, pc}
   b6c40:	0003021c 	.word	0x0003021c

000b6c44 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6c44:	b508      	push	{r3, lr}
   b6c46:	4b02      	ldr	r3, [pc, #8]	; (b6c50 <_malloc_r+0xc>)
   b6c48:	681b      	ldr	r3, [r3, #0]
   b6c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6c4c:	9301      	str	r3, [sp, #4]
   b6c4e:	bd08      	pop	{r3, pc}
   b6c50:	0003021c 	.word	0x0003021c

000b6c54 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6c54:	b508      	push	{r3, lr}
   b6c56:	4b02      	ldr	r3, [pc, #8]	; (b6c60 <__errno+0xc>)
   b6c58:	681b      	ldr	r3, [r3, #0]
   b6c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6c5c:	9301      	str	r3, [sp, #4]
   b6c5e:	bd08      	pop	{r3, pc}
   b6c60:	0003021c 	.word	0x0003021c

000b6c64 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6c64:	b508      	push	{r3, lr}
   b6c66:	4b02      	ldr	r3, [pc, #8]	; (b6c70 <__assert_func+0xc>)
   b6c68:	681b      	ldr	r3, [r3, #0]
   b6c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6c6c:	9301      	str	r3, [sp, #4]
   b6c6e:	bd08      	pop	{r3, pc}
   b6c70:	0003021c 	.word	0x0003021c

000b6c74 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6c74:	b508      	push	{r3, lr}
   b6c76:	4b02      	ldr	r3, [pc, #8]	; (b6c80 <newlib_impure_ptr_callback+0xc>)
   b6c78:	681b      	ldr	r3, [r3, #0]
   b6c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6c7c:	9301      	str	r3, [sp, #4]
   b6c7e:	bd08      	pop	{r3, pc}
   b6c80:	0003021c 	.word	0x0003021c

000b6c84 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b6c84:	428a      	cmp	r2, r1
{
   b6c86:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b6c88:	d007      	beq.n	b6c9a <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b6c8a:	1a44      	subs	r4, r0, r1
   b6c8c:	9802      	ldr	r0, [sp, #8]
   b6c8e:	1ac0      	subs	r0, r0, r3
   b6c90:	4344      	muls	r4, r0
   b6c92:	1a50      	subs	r0, r2, r1
   b6c94:	fb94 f0f0 	sdiv	r0, r4, r0
   b6c98:	4418      	add	r0, r3
}
   b6c9a:	bd10      	pop	{r4, pc}

000b6c9c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6c9c:	2100      	movs	r1, #0
   b6c9e:	f7ff bf1d 	b.w	b6adc <system_delay_ms>
	...

000b6ca4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6ca4:	4802      	ldr	r0, [pc, #8]	; (b6cb0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6ca6:	2300      	movs	r3, #0
   b6ca8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6caa:	f7ff bd2f 	b.w	b670c <os_mutex_recursive_create>
   b6cae:	bf00      	nop
   b6cb0:	2003e6c4 	.word	0x2003e6c4

000b6cb4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6cb4:	2200      	movs	r2, #0
   b6cb6:	6840      	ldr	r0, [r0, #4]
   b6cb8:	4611      	mov	r1, r2
   b6cba:	f7ff bf7b 	b.w	b6bb4 <network_listening>

000b6cbe <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6cbe:	2200      	movs	r2, #0
   b6cc0:	6840      	ldr	r0, [r0, #4]
   b6cc2:	4611      	mov	r1, r2
   b6cc4:	f7ff bf86 	b.w	b6bd4 <network_get_listen_timeout>

000b6cc8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6cc8:	6840      	ldr	r0, [r0, #4]
   b6cca:	2200      	movs	r2, #0
   b6ccc:	f7ff bf7a 	b.w	b6bc4 <network_set_listen_timeout>

000b6cd0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6cd0:	6840      	ldr	r0, [r0, #4]
   b6cd2:	2200      	movs	r2, #0
   b6cd4:	f081 0101 	eor.w	r1, r1, #1
   b6cd8:	f7ff bf64 	b.w	b6ba4 <network_listen>

000b6cdc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6cdc:	2300      	movs	r3, #0
   b6cde:	6840      	ldr	r0, [r0, #4]
   b6ce0:	461a      	mov	r2, r3
   b6ce2:	4619      	mov	r1, r3
   b6ce4:	f7ff bf56 	b.w	b6b94 <network_off>

000b6ce8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6ce8:	2300      	movs	r3, #0
   b6cea:	6840      	ldr	r0, [r0, #4]
   b6cec:	461a      	mov	r2, r3
   b6cee:	4619      	mov	r1, r3
   b6cf0:	f7ff bf48 	b.w	b6b84 <network_on>

000b6cf4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6cf4:	2200      	movs	r2, #0
   b6cf6:	6840      	ldr	r0, [r0, #4]
   b6cf8:	4611      	mov	r1, r2
   b6cfa:	f7ff bf3b 	b.w	b6b74 <network_ready>

000b6cfe <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6cfe:	2200      	movs	r2, #0
   b6d00:	6840      	ldr	r0, [r0, #4]
   b6d02:	4611      	mov	r1, r2
   b6d04:	f7ff bf26 	b.w	b6b54 <network_connecting>

000b6d08 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6d08:	6840      	ldr	r0, [r0, #4]
   b6d0a:	2200      	movs	r2, #0
   b6d0c:	2102      	movs	r1, #2
   b6d0e:	f7ff bf29 	b.w	b6b64 <network_disconnect>

000b6d12 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6d12:	2300      	movs	r3, #0
   b6d14:	6840      	ldr	r0, [r0, #4]
   b6d16:	461a      	mov	r2, r3
   b6d18:	f7ff bf14 	b.w	b6b44 <network_connect>

000b6d1c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6d1c:	4b02      	ldr	r3, [pc, #8]	; (b6d28 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6d1e:	2203      	movs	r2, #3
   b6d20:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6d22:	4a02      	ldr	r2, [pc, #8]	; (b6d2c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6d24:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6d26:	4770      	bx	lr
   b6d28:	2003e6c8 	.word	0x2003e6c8
   b6d2c:	000bbf0c 	.word	0x000bbf0c

000b6d30 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6d30:	4770      	bx	lr

000b6d32 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6d32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6d34:	4606      	mov	r6, r0
   b6d36:	4615      	mov	r5, r2
   b6d38:	460c      	mov	r4, r1
   b6d3a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6d3c:	42bc      	cmp	r4, r7
   b6d3e:	d006      	beq.n	b6d4e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6d40:	6833      	ldr	r3, [r6, #0]
   b6d42:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6d46:	689b      	ldr	r3, [r3, #8]
   b6d48:	4630      	mov	r0, r6
   b6d4a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6d4c:	e7f6      	b.n	b6d3c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6d4e:	4628      	mov	r0, r5
   b6d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6d52 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6d52:	7c00      	ldrb	r0, [r0, #16]
   b6d54:	2200      	movs	r2, #0
   b6d56:	f7ff bd59 	b.w	b680c <hal_i2c_write>

000b6d5a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6d5a:	7c00      	ldrb	r0, [r0, #16]
   b6d5c:	2100      	movs	r1, #0
   b6d5e:	f7ff bd5d 	b.w	b681c <hal_i2c_available>

000b6d62 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6d62:	7c00      	ldrb	r0, [r0, #16]
   b6d64:	2100      	movs	r1, #0
   b6d66:	f7ff bd61 	b.w	b682c <hal_i2c_read>

000b6d6a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6d6a:	7c00      	ldrb	r0, [r0, #16]
   b6d6c:	2100      	movs	r1, #0
   b6d6e:	f7ff bd65 	b.w	b683c <hal_i2c_peek>

000b6d72 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6d72:	7c00      	ldrb	r0, [r0, #16]
   b6d74:	2100      	movs	r1, #0
   b6d76:	f7ff bd69 	b.w	b684c <hal_i2c_flush>

000b6d7a <_ZN7TwoWireD0Ev>:
   b6d7a:	b510      	push	{r4, lr}
   b6d7c:	2114      	movs	r1, #20
   b6d7e:	4604      	mov	r4, r0
   b6d80:	f7fd f98d 	bl	b409e <_ZdlPvj>
   b6d84:	4620      	mov	r0, r4
   b6d86:	bd10      	pop	{r4, pc}

000b6d88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6d88:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6d8e:	4604      	mov	r4, r0
   b6d90:	4608      	mov	r0, r1
   b6d92:	2100      	movs	r1, #0
   b6d94:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6d98:	4b03      	ldr	r3, [pc, #12]	; (b6da8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b6d9a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b6d9c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b6d9e:	4611      	mov	r1, r2
   b6da0:	f7ff fd64 	bl	b686c <hal_i2c_init>
}
   b6da4:	4620      	mov	r0, r4
   b6da6:	bd10      	pop	{r4, pc}
   b6da8:	000bbf48 	.word	0x000bbf48

000b6dac <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b6dac:	7c00      	ldrb	r0, [r0, #16]
   b6dae:	2200      	movs	r2, #0
   b6db0:	f7ff bd0c 	b.w	b67cc <hal_i2c_set_speed>

000b6db4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6db4:	2300      	movs	r3, #0
   b6db6:	7c00      	ldrb	r0, [r0, #16]
   b6db8:	461a      	mov	r2, r3
   b6dba:	4619      	mov	r1, r3
   b6dbc:	f7ff bd0e 	b.w	b67dc <hal_i2c_begin>

000b6dc0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6dc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6dc2:	2200      	movs	r2, #0
   b6dc4:	2314      	movs	r3, #20
   b6dc6:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b6dca:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6dce:	780b      	ldrb	r3, [r1, #0]
   b6dd0:	f88d 3008 	strb.w	r3, [sp, #8]
   b6dd4:	684b      	ldr	r3, [r1, #4]
   b6dd6:	9303      	str	r3, [sp, #12]
   b6dd8:	68cb      	ldr	r3, [r1, #12]
   b6dda:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6ddc:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6dde:	7a0b      	ldrb	r3, [r1, #8]
   b6de0:	9305      	str	r3, [sp, #20]
   b6de2:	a901      	add	r1, sp, #4
   b6de4:	f7ff fd4a 	bl	b687c <hal_i2c_request_ex>
}
   b6de8:	b007      	add	sp, #28
   b6dea:	f85d fb04 	ldr.w	pc, [sp], #4

000b6dee <_ZN7TwoWire11requestFromEhjh>:
{
   b6dee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b6df0:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6df2:	f88d 1000 	strb.w	r1, [sp]
   b6df6:	f04f 0164 	mov.w	r1, #100	; 0x64
   b6dfa:	9103      	str	r1, [sp, #12]
   b6dfc:	bf18      	it	ne
   b6dfe:	2301      	movne	r3, #1
   b6e00:	4669      	mov	r1, sp
    size_ = size;
   b6e02:	9201      	str	r2, [sp, #4]
   b6e04:	f88d 3008 	strb.w	r3, [sp, #8]
   b6e08:	f7ff ffda 	bl	b6dc0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b6e0c:	b005      	add	sp, #20
   b6e0e:	f85d fb04 	ldr.w	pc, [sp], #4

000b6e12 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b6e12:	2301      	movs	r3, #1
   b6e14:	f7ff bfeb 	b.w	b6dee <_ZN7TwoWire11requestFromEhjh>

000b6e18 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6e18:	7c00      	ldrb	r0, [r0, #16]
   b6e1a:	2200      	movs	r2, #0
   b6e1c:	f7ff bce6 	b.w	b67ec <hal_i2c_begin_transmission>

000b6e20 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b6e20:	b2c9      	uxtb	r1, r1
   b6e22:	f7ff bff9 	b.w	b6e18 <_ZN7TwoWire17beginTransmissionEh>

000b6e26 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6e26:	7c00      	ldrb	r0, [r0, #16]
   b6e28:	2200      	movs	r2, #0
   b6e2a:	f7ff bce7 	b.w	b67fc <hal_i2c_end_transmission>

000b6e2e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6e2e:	2101      	movs	r1, #1
   b6e30:	f7ff bff9 	b.w	b6e26 <_ZN7TwoWire15endTransmissionEh>

000b6e34 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6e34:	4770      	bx	lr

000b6e36 <_ZN9IPAddressD0Ev>:
   b6e36:	b510      	push	{r4, lr}
   b6e38:	2118      	movs	r1, #24
   b6e3a:	4604      	mov	r4, r0
   b6e3c:	f7fd f92f 	bl	b409e <_ZdlPvj>
   b6e40:	4620      	mov	r0, r4
   b6e42:	bd10      	pop	{r4, pc}

000b6e44 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6e44:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6e46:	7d03      	ldrb	r3, [r0, #20]
   b6e48:	2b06      	cmp	r3, #6
{
   b6e4a:	b08d      	sub	sp, #52	; 0x34
   b6e4c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6e4e:	f100 0704 	add.w	r7, r0, #4
   b6e52:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6e56:	d012      	beq.n	b6e7e <_ZNK9IPAddress7printToER5Print+0x3a>
   b6e58:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6e5c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6e60:	220a      	movs	r2, #10
   b6e62:	4630      	mov	r0, r6
   b6e64:	f000 f97f 	bl	b7166 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6e68:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6e6a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6e6c:	d019      	beq.n	b6ea2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6e6e:	2c00      	cmp	r4, #0
   b6e70:	d0f4      	beq.n	b6e5c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6e72:	212e      	movs	r1, #46	; 0x2e
   b6e74:	4630      	mov	r0, r6
   b6e76:	f000 f95d 	bl	b7134 <_ZN5Print5printEc>
   b6e7a:	4404      	add	r4, r0
   b6e7c:	e7ee      	b.n	b6e5c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6e7e:	232f      	movs	r3, #47	; 0x2f
   b6e80:	466a      	mov	r2, sp
   b6e82:	4639      	mov	r1, r7
   b6e84:	200a      	movs	r0, #10
		buf[0] = 0;
   b6e86:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6e8a:	f7ff fd07 	bl	b689c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6e8e:	4668      	mov	r0, sp
   b6e90:	f002 f802 	bl	b8e98 <strlen>
   b6e94:	6833      	ldr	r3, [r6, #0]
   b6e96:	4602      	mov	r2, r0
   b6e98:	68db      	ldr	r3, [r3, #12]
   b6e9a:	4669      	mov	r1, sp
   b6e9c:	4630      	mov	r0, r6
   b6e9e:	4798      	blx	r3
   b6ea0:	4604      	mov	r4, r0
    }
    return n;
}
   b6ea2:	4620      	mov	r0, r4
   b6ea4:	b00d      	add	sp, #52	; 0x34
   b6ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6ea8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6ea8:	b510      	push	{r4, lr}
   b6eaa:	4b05      	ldr	r3, [pc, #20]	; (b6ec0 <_ZN9IPAddressC1Ev+0x18>)
   b6eac:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6eae:	2211      	movs	r2, #17
   b6eb0:	f840 3b04 	str.w	r3, [r0], #4
   b6eb4:	2100      	movs	r1, #0
   b6eb6:	f001 ffae 	bl	b8e16 <memset>
}
   b6eba:	4620      	mov	r0, r4
   b6ebc:	bd10      	pop	{r4, pc}
   b6ebe:	bf00      	nop
   b6ec0:	000bbf70 	.word	0x000bbf70

000b6ec4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6ec4:	4603      	mov	r3, r0
   b6ec6:	4a07      	ldr	r2, [pc, #28]	; (b6ee4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6ec8:	b510      	push	{r4, lr}
   b6eca:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6ece:	f101 0210 	add.w	r2, r1, #16
   b6ed2:	f851 4b04 	ldr.w	r4, [r1], #4
   b6ed6:	f843 4b04 	str.w	r4, [r3], #4
   b6eda:	4291      	cmp	r1, r2
   b6edc:	d1f9      	bne.n	b6ed2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6ede:	780a      	ldrb	r2, [r1, #0]
   b6ee0:	701a      	strb	r2, [r3, #0]
}
   b6ee2:	bd10      	pop	{r4, pc}
   b6ee4:	000bbf70 	.word	0x000bbf70

000b6ee8 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6ee8:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b6eea:	2b04      	cmp	r3, #4
   b6eec:	d104      	bne.n	b6ef8 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b6eee:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6ef0:	3800      	subs	r0, #0
   b6ef2:	bf18      	it	ne
   b6ef4:	2001      	movne	r0, #1
   b6ef6:	4770      	bx	lr
    } else if (version() == 6) {
   b6ef8:	2b06      	cmp	r3, #6
   b6efa:	d107      	bne.n	b6f0c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6efc:	6843      	ldr	r3, [r0, #4]
   b6efe:	b93b      	cbnz	r3, b6f10 <_ZNK9IPAddresscvbEv+0x28>
   b6f00:	6883      	ldr	r3, [r0, #8]
   b6f02:	b92b      	cbnz	r3, b6f10 <_ZNK9IPAddresscvbEv+0x28>
   b6f04:	68c3      	ldr	r3, [r0, #12]
   b6f06:	b91b      	cbnz	r3, b6f10 <_ZNK9IPAddresscvbEv+0x28>
   b6f08:	6900      	ldr	r0, [r0, #16]
   b6f0a:	e7f1      	b.n	b6ef0 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b6f0c:	2000      	movs	r0, #0
   b6f0e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6f10:	2001      	movs	r0, #1
}
   b6f12:	4770      	bx	lr

000b6f14 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6f14:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6f16:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6f1a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6f1e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6f22:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6f26:	2304      	movs	r3, #4
   b6f28:	6041      	str	r1, [r0, #4]
   b6f2a:	7503      	strb	r3, [r0, #20]
}
   b6f2c:	bd10      	pop	{r4, pc}
	...

000b6f30 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   b6f30:	b513      	push	{r0, r1, r4, lr}
   b6f32:	4c04      	ldr	r4, [pc, #16]	; (b6f44 <_ZN9IPAddressC1Ehhhh+0x14>)
   b6f34:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   b6f36:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b6f3a:	9400      	str	r4, [sp, #0]
   b6f3c:	f7ff ffea 	bl	b6f14 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6f40:	b002      	add	sp, #8
   b6f42:	bd10      	pop	{r4, pc}
   b6f44:	000bbf70 	.word	0x000bbf70

000b6f48 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6f48:	b507      	push	{r0, r1, r2, lr}
   b6f4a:	4b06      	ldr	r3, [pc, #24]	; (b6f64 <_ZN9IPAddressC1EPKh+0x1c>)
   b6f4c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6f4e:	78cb      	ldrb	r3, [r1, #3]
   b6f50:	9300      	str	r3, [sp, #0]
   b6f52:	788b      	ldrb	r3, [r1, #2]
   b6f54:	784a      	ldrb	r2, [r1, #1]
   b6f56:	7809      	ldrb	r1, [r1, #0]
   b6f58:	f7ff ffdc 	bl	b6f14 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6f5c:	b003      	add	sp, #12
   b6f5e:	f85d fb04 	ldr.w	pc, [sp], #4
   b6f62:	bf00      	nop
   b6f64:	000bbf70 	.word	0x000bbf70

000b6f68 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6f68:	4b01      	ldr	r3, [pc, #4]	; (b6f70 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6f6a:	4a02      	ldr	r2, [pc, #8]	; (b6f74 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6f6c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6f6e:	4770      	bx	lr
   b6f70:	2003e6d0 	.word	0x2003e6d0
   b6f74:	000bbf7c 	.word	0x000bbf7c

000b6f78 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6f78:	2300      	movs	r3, #0
   b6f7a:	6840      	ldr	r0, [r0, #4]
   b6f7c:	461a      	mov	r2, r3
   b6f7e:	f7ff bde1 	b.w	b6b44 <network_connect>

000b6f82 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6f82:	6840      	ldr	r0, [r0, #4]
   b6f84:	2200      	movs	r2, #0
   b6f86:	2102      	movs	r1, #2
   b6f88:	f7ff bdec 	b.w	b6b64 <network_disconnect>

000b6f8c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6f8c:	2200      	movs	r2, #0
   b6f8e:	6840      	ldr	r0, [r0, #4]
   b6f90:	4611      	mov	r1, r2
   b6f92:	f7ff bddf 	b.w	b6b54 <network_connecting>

000b6f96 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6f96:	2200      	movs	r2, #0
   b6f98:	6840      	ldr	r0, [r0, #4]
   b6f9a:	4611      	mov	r1, r2
   b6f9c:	f7ff bdea 	b.w	b6b74 <network_ready>

000b6fa0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6fa0:	2300      	movs	r3, #0
   b6fa2:	6840      	ldr	r0, [r0, #4]
   b6fa4:	461a      	mov	r2, r3
   b6fa6:	4619      	mov	r1, r3
   b6fa8:	f7ff bdec 	b.w	b6b84 <network_on>

000b6fac <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6fac:	2300      	movs	r3, #0
   b6fae:	6840      	ldr	r0, [r0, #4]
   b6fb0:	461a      	mov	r2, r3
   b6fb2:	4619      	mov	r1, r3
   b6fb4:	f7ff bdee 	b.w	b6b94 <network_off>

000b6fb8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6fb8:	6840      	ldr	r0, [r0, #4]
   b6fba:	2100      	movs	r1, #0
   b6fbc:	f7ff be12 	b.w	b6be4 <network_is_on>

000b6fc0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6fc0:	6840      	ldr	r0, [r0, #4]
   b6fc2:	2100      	movs	r1, #0
   b6fc4:	f7ff be16 	b.w	b6bf4 <network_is_off>

000b6fc8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6fc8:	6840      	ldr	r0, [r0, #4]
   b6fca:	2200      	movs	r2, #0
   b6fcc:	f081 0101 	eor.w	r1, r1, #1
   b6fd0:	f7ff bde8 	b.w	b6ba4 <network_listen>

000b6fd4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6fd4:	6840      	ldr	r0, [r0, #4]
   b6fd6:	2200      	movs	r2, #0
   b6fd8:	f7ff bdf4 	b.w	b6bc4 <network_set_listen_timeout>

000b6fdc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6fdc:	2200      	movs	r2, #0
   b6fde:	6840      	ldr	r0, [r0, #4]
   b6fe0:	4611      	mov	r1, r2
   b6fe2:	f7ff bdf7 	b.w	b6bd4 <network_get_listen_timeout>

000b6fe6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6fe6:	2200      	movs	r2, #0
   b6fe8:	6840      	ldr	r0, [r0, #4]
   b6fea:	4611      	mov	r1, r2
   b6fec:	f7ff bde2 	b.w	b6bb4 <network_listening>

000b6ff0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6ff4:	b095      	sub	sp, #84	; 0x54
   b6ff6:	4614      	mov	r4, r2
   b6ff8:	460d      	mov	r5, r1
   b6ffa:	4607      	mov	r7, r0
    IPAddress addr;
   b6ffc:	f7ff ff54 	bl	b6ea8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7000:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b7002:	221c      	movs	r2, #28
   b7004:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7006:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7008:	f001 ff05 	bl	b8e16 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b700c:	2340      	movs	r3, #64	; 0x40
   b700e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7010:	4620      	mov	r0, r4
   b7012:	466b      	mov	r3, sp
   b7014:	aa0c      	add	r2, sp, #48	; 0x30
   b7016:	2100      	movs	r1, #0
   b7018:	f7ff fc60 	bl	b68dc <netdb_getaddrinfo>
    if (!r) {
   b701c:	4604      	mov	r4, r0
   b701e:	2800      	cmp	r0, #0
   b7020:	d14b      	bne.n	b70ba <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7022:	4602      	mov	r2, r0
   b7024:	2101      	movs	r1, #1
   b7026:	6868      	ldr	r0, [r5, #4]
   b7028:	f7ff fda4 	bl	b6b74 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b702c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b702e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7030:	4622      	mov	r2, r4
   b7032:	6868      	ldr	r0, [r5, #4]
   b7034:	f7ff fd9e 	bl	b6b74 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7038:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b703a:	4681      	mov	r9, r0
        bool ok = false;
   b703c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b703e:	2e00      	cmp	r6, #0
   b7040:	d03b      	beq.n	b70ba <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b7042:	2900      	cmp	r1, #0
   b7044:	d139      	bne.n	b70ba <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b7046:	6873      	ldr	r3, [r6, #4]
   b7048:	2b02      	cmp	r3, #2
   b704a:	d003      	beq.n	b7054 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b704c:	2b0a      	cmp	r3, #10
   b704e:	d011      	beq.n	b7074 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7050:	69f6      	ldr	r6, [r6, #28]
   b7052:	e7f4      	b.n	b703e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7054:	f1b8 0f00 	cmp.w	r8, #0
   b7058:	d0fa      	beq.n	b7050 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b705a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b705c:	a806      	add	r0, sp, #24
   b705e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7060:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7062:	f7ff ff71 	bl	b6f48 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7068:	1d3c      	adds	r4, r7, #4
   b706a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b706c:	682b      	ldr	r3, [r5, #0]
   b706e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7070:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7072:	e7ed      	b.n	b7050 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7074:	f1b9 0f00 	cmp.w	r9, #0
   b7078:	d0ea      	beq.n	b7050 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b707a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b707c:	2210      	movs	r2, #16
   b707e:	a801      	add	r0, sp, #4
   b7080:	f001 fec9 	bl	b8e16 <memset>
                    a.v = 6;
   b7084:	2306      	movs	r3, #6
   b7086:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b708a:	ad01      	add	r5, sp, #4
   b708c:	f104 0308 	add.w	r3, r4, #8
   b7090:	3418      	adds	r4, #24
   b7092:	6818      	ldr	r0, [r3, #0]
   b7094:	6859      	ldr	r1, [r3, #4]
   b7096:	462a      	mov	r2, r5
   b7098:	c203      	stmia	r2!, {r0, r1}
   b709a:	3308      	adds	r3, #8
   b709c:	42a3      	cmp	r3, r4
   b709e:	4615      	mov	r5, r2
   b70a0:	d1f7      	bne.n	b7092 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b70a2:	a901      	add	r1, sp, #4
   b70a4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b70a6:	ad07      	add	r5, sp, #28
   b70a8:	f7ff ff0c 	bl	b6ec4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b70ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b70ae:	1d3c      	adds	r4, r7, #4
   b70b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b70b2:	682b      	ldr	r3, [r5, #0]
   b70b4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b70b6:	4649      	mov	r1, r9
   b70b8:	e7ca      	b.n	b7050 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b70ba:	9800      	ldr	r0, [sp, #0]
   b70bc:	f7ff fc06 	bl	b68cc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b70c0:	4638      	mov	r0, r7
   b70c2:	b015      	add	sp, #84	; 0x54
   b70c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b70c8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b70c8:	4b02      	ldr	r3, [pc, #8]	; (b70d4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b70ca:	4a03      	ldr	r2, [pc, #12]	; (b70d8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b70cc:	601a      	str	r2, [r3, #0]
   b70ce:	2200      	movs	r2, #0
   b70d0:	605a      	str	r2, [r3, #4]

} // spark
   b70d2:	4770      	bx	lr
   b70d4:	2003e6d4 	.word	0x2003e6d4
   b70d8:	000bbf88 	.word	0x000bbf88

000b70dc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b70dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b70de:	4606      	mov	r6, r0
   b70e0:	460d      	mov	r5, r1
  size_t n = 0;
   b70e2:	188f      	adds	r7, r1, r2
   b70e4:	2400      	movs	r4, #0
  while (size--) {
   b70e6:	42bd      	cmp	r5, r7
   b70e8:	d00c      	beq.n	b7104 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b70ea:	6833      	ldr	r3, [r6, #0]
   b70ec:	f815 1b01 	ldrb.w	r1, [r5], #1
   b70f0:	689b      	ldr	r3, [r3, #8]
   b70f2:	4630      	mov	r0, r6
   b70f4:	4798      	blx	r3
     if (chunk>=0)
   b70f6:	1e03      	subs	r3, r0, #0
   b70f8:	db01      	blt.n	b70fe <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b70fa:	441c      	add	r4, r3
  while (size--) {
   b70fc:	e7f3      	b.n	b70e6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b70fe:	2c00      	cmp	r4, #0
   b7100:	bf08      	it	eq
   b7102:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7104:	4620      	mov	r0, r4
   b7106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7108 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7108:	b513      	push	{r0, r1, r4, lr}
   b710a:	4604      	mov	r4, r0
    }
   b710c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b710e:	b159      	cbz	r1, b7128 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7110:	9101      	str	r1, [sp, #4]
   b7112:	f001 fec1 	bl	b8e98 <strlen>
   b7116:	6823      	ldr	r3, [r4, #0]
   b7118:	9901      	ldr	r1, [sp, #4]
   b711a:	68db      	ldr	r3, [r3, #12]
   b711c:	4602      	mov	r2, r0
   b711e:	4620      	mov	r0, r4
    }
   b7120:	b002      	add	sp, #8
   b7122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7126:	4718      	bx	r3
    }
   b7128:	b002      	add	sp, #8
   b712a:	bd10      	pop	{r4, pc}

000b712c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b712c:	b508      	push	{r3, lr}
  return write(str);
   b712e:	f7ff ffeb 	bl	b7108 <_ZN5Print5writeEPKc>
}
   b7132:	bd08      	pop	{r3, pc}

000b7134 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b7134:	6803      	ldr	r3, [r0, #0]
   b7136:	689b      	ldr	r3, [r3, #8]
   b7138:	4718      	bx	r3

000b713a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b713a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b713c:	210d      	movs	r1, #13
{
   b713e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b7140:	f7ff fff8 	bl	b7134 <_ZN5Print5printEc>
  n += print('\n');
   b7144:	210a      	movs	r1, #10
  size_t n = print('\r');
   b7146:	4604      	mov	r4, r0
  n += print('\n');
   b7148:	4628      	mov	r0, r5
   b714a:	f7ff fff3 	bl	b7134 <_ZN5Print5printEc>
  return n;
}
   b714e:	4420      	add	r0, r4
   b7150:	bd38      	pop	{r3, r4, r5, pc}

000b7152 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b7152:	b538      	push	{r3, r4, r5, lr}
   b7154:	4605      	mov	r5, r0
  return write(str);
   b7156:	f7ff ffd7 	bl	b7108 <_ZN5Print5writeEPKc>
   b715a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b715c:	4628      	mov	r0, r5
   b715e:	f7ff ffec 	bl	b713a <_ZN5Print7printlnEv>
  return n;
}
   b7162:	4420      	add	r0, r4
   b7164:	bd38      	pop	{r3, r4, r5, pc}

000b7166 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b7166:	b530      	push	{r4, r5, lr}
   b7168:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b716a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b716c:	2a01      	cmp	r2, #1
  *str = '\0';
   b716e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7172:	bf98      	it	ls
   b7174:	220a      	movls	r2, #10
   b7176:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7178:	460d      	mov	r5, r1
   b717a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b717e:	fb01 5312 	mls	r3, r1, r2, r5
   b7182:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7186:	2b09      	cmp	r3, #9
   b7188:	bf94      	ite	ls
   b718a:	3330      	addls	r3, #48	; 0x30
   b718c:	3337      	addhi	r3, #55	; 0x37
   b718e:	b2db      	uxtb	r3, r3
  } while(n);
   b7190:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7192:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b7196:	d9ef      	bls.n	b7178 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7198:	4621      	mov	r1, r4
   b719a:	f7ff ffb5 	bl	b7108 <_ZN5Print5writeEPKc>
}
   b719e:	b00b      	add	sp, #44	; 0x2c
   b71a0:	bd30      	pop	{r4, r5, pc}
	...

000b71a4 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b71a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b71a8:	ec55 4b10 	vmov	r4, r5, d0
   b71ac:	4606      	mov	r6, r0
   b71ae:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b71b0:	ee10 2a10 	vmov	r2, s0
   b71b4:	ee10 0a10 	vmov	r0, s0
   b71b8:	462b      	mov	r3, r5
   b71ba:	4629      	mov	r1, r5
   b71bc:	f001 fd40 	bl	b8c40 <__aeabi_dcmpun>
   b71c0:	b140      	cbz	r0, b71d4 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b71c2:	4953      	ldr	r1, [pc, #332]	; (b7310 <_ZN5Print10printFloatEdh+0x16c>)
   b71c4:	4630      	mov	r0, r6
   b71c6:	f7ff ff9f 	bl	b7108 <_ZN5Print5writeEPKc>
   b71ca:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b71cc:	4650      	mov	r0, sl
   b71ce:	b003      	add	sp, #12
   b71d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b71d4:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b71d8:	4b4e      	ldr	r3, [pc, #312]	; (b7314 <_ZN5Print10printFloatEdh+0x170>)
   b71da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b71de:	4620      	mov	r0, r4
   b71e0:	4649      	mov	r1, r9
   b71e2:	f001 fd2d 	bl	b8c40 <__aeabi_dcmpun>
   b71e6:	b948      	cbnz	r0, b71fc <_ZN5Print10printFloatEdh+0x58>
   b71e8:	4b4a      	ldr	r3, [pc, #296]	; (b7314 <_ZN5Print10printFloatEdh+0x170>)
   b71ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b71ee:	4620      	mov	r0, r4
   b71f0:	4649      	mov	r1, r9
   b71f2:	f001 fd07 	bl	b8c04 <__aeabi_dcmple>
   b71f6:	b908      	cbnz	r0, b71fc <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b71f8:	4947      	ldr	r1, [pc, #284]	; (b7318 <_ZN5Print10printFloatEdh+0x174>)
   b71fa:	e7e3      	b.n	b71c4 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b71fc:	4b47      	ldr	r3, [pc, #284]	; (b731c <_ZN5Print10printFloatEdh+0x178>)
   b71fe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b7202:	4620      	mov	r0, r4
   b7204:	4629      	mov	r1, r5
   b7206:	f001 fd11 	bl	b8c2c <__aeabi_dcmpgt>
   b720a:	b108      	cbz	r0, b7210 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b720c:	4944      	ldr	r1, [pc, #272]	; (b7320 <_ZN5Print10printFloatEdh+0x17c>)
   b720e:	e7d9      	b.n	b71c4 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b7210:	4b44      	ldr	r3, [pc, #272]	; (b7324 <_ZN5Print10printFloatEdh+0x180>)
   b7212:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b7216:	4620      	mov	r0, r4
   b7218:	4629      	mov	r1, r5
   b721a:	f001 fce9 	bl	b8bf0 <__aeabi_dcmplt>
   b721e:	2800      	cmp	r0, #0
   b7220:	d1f4      	bne.n	b720c <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b7222:	2200      	movs	r2, #0
   b7224:	2300      	movs	r3, #0
   b7226:	4620      	mov	r0, r4
   b7228:	4629      	mov	r1, r5
   b722a:	f001 fce1 	bl	b8bf0 <__aeabi_dcmplt>
   b722e:	b1d0      	cbz	r0, b7266 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b7230:	212d      	movs	r1, #45	; 0x2d
   b7232:	4630      	mov	r0, r6
   b7234:	f7ff ff7e 	bl	b7134 <_ZN5Print5printEc>
     number = -number;
   b7238:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b723c:	4682      	mov	sl, r0
     number = -number;
   b723e:	461d      	mov	r5, r3
  double rounding = 0.5;
   b7240:	4939      	ldr	r1, [pc, #228]	; (b7328 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b7242:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b7330 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b7246:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b724a:	2000      	movs	r0, #0
    rounding /= 10.0;
   b724c:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b7250:	fa5f f38b 	uxtb.w	r3, fp
   b7254:	429f      	cmp	r7, r3
   b7256:	d908      	bls.n	b726a <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b7258:	4642      	mov	r2, r8
   b725a:	464b      	mov	r3, r9
   b725c:	f001 fb80 	bl	b8960 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b7260:	f10b 0b01 	add.w	fp, fp, #1
   b7264:	e7f4      	b.n	b7250 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b7266:	4682      	mov	sl, r0
   b7268:	e7ea      	b.n	b7240 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b726a:	4622      	mov	r2, r4
   b726c:	462b      	mov	r3, r5
   b726e:	f001 f897 	bl	b83a0 <__adddf3>
   b7272:	460d      	mov	r5, r1
   b7274:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b7276:	f001 fd21 	bl	b8cbc <__aeabi_d2uiz>
   b727a:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b727c:	f001 f9cc 	bl	b8618 <__aeabi_ui2d>
   b7280:	4602      	mov	r2, r0
   b7282:	460b      	mov	r3, r1
   b7284:	4620      	mov	r0, r4
   b7286:	4629      	mov	r1, r5
   b7288:	f001 f888 	bl	b839c <__aeabi_dsub>
        return printNumber(val, base) + t;
   b728c:	220a      	movs	r2, #10
   b728e:	4604      	mov	r4, r0
   b7290:	460d      	mov	r5, r1
   b7292:	4630      	mov	r0, r6
   b7294:	4641      	mov	r1, r8
   b7296:	f7ff ff66 	bl	b7166 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b729a:	4482      	add	sl, r0
  if (digits > 0) {
   b729c:	2f00      	cmp	r7, #0
   b729e:	d095      	beq.n	b71cc <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b72a0:	4922      	ldr	r1, [pc, #136]	; (b732c <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b72a2:	f8df 908c 	ldr.w	r9, [pc, #140]	; b7330 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b72a6:	4630      	mov	r0, r6
   b72a8:	f7ff ff2e 	bl	b7108 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b72ac:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b72b0:	4482      	add	sl, r0
  while (digits-- > 0)
   b72b2:	2f00      	cmp	r7, #0
   b72b4:	d08a      	beq.n	b71cc <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b72b6:	4642      	mov	r2, r8
   b72b8:	464b      	mov	r3, r9
   b72ba:	4620      	mov	r0, r4
   b72bc:	4629      	mov	r1, r5
   b72be:	f001 fa25 	bl	b870c <__aeabi_dmul>
   b72c2:	4604      	mov	r4, r0
   b72c4:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b72c6:	f001 fcd1 	bl	b8c6c <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b72ca:	f1b0 0b00 	subs.w	fp, r0, #0
   b72ce:	da1c      	bge.n	b730a <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b72d0:	212d      	movs	r1, #45	; 0x2d
   b72d2:	4630      	mov	r0, r6
   b72d4:	f7ff ff2e 	bl	b7134 <_ZN5Print5printEc>
            val = -n;
   b72d8:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b72dc:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b72de:	220a      	movs	r2, #10
   b72e0:	4630      	mov	r0, r6
   b72e2:	9301      	str	r3, [sp, #4]
   b72e4:	f7ff ff3f 	bl	b7166 <_ZN5Print11printNumberEmh>
   b72e8:	9b01      	ldr	r3, [sp, #4]
   b72ea:	4418      	add	r0, r3
    n += print(toPrint);
   b72ec:	4482      	add	sl, r0
    remainder -= toPrint;
   b72ee:	4658      	mov	r0, fp
   b72f0:	f001 f9a2 	bl	b8638 <__aeabi_i2d>
   b72f4:	4602      	mov	r2, r0
   b72f6:	460b      	mov	r3, r1
   b72f8:	4620      	mov	r0, r4
   b72fa:	4629      	mov	r1, r5
   b72fc:	f001 f84e 	bl	b839c <__aeabi_dsub>
   b7300:	3f01      	subs	r7, #1
   b7302:	4604      	mov	r4, r0
   b7304:	460d      	mov	r5, r1
   b7306:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b7308:	e7d3      	b.n	b72b2 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b730a:	4659      	mov	r1, fp
        size_t t = 0;
   b730c:	2300      	movs	r3, #0
   b730e:	e7e6      	b.n	b72de <_ZN5Print10printFloatEdh+0x13a>
   b7310:	000bbfbc 	.word	0x000bbfbc
   b7314:	7fefffff 	.word	0x7fefffff
   b7318:	000bbfc0 	.word	0x000bbfc0
   b731c:	41efffff 	.word	0x41efffff
   b7320:	000bbfc4 	.word	0x000bbfc4
   b7324:	c1efffff 	.word	0xc1efffff
   b7328:	3fe00000 	.word	0x3fe00000
   b732c:	000bbfc8 	.word	0x000bbfc8
   b7330:	40240000 	.word	0x40240000

000b7334 <_ZN5Print5printEdi>:
  return printFloat(n, digits);
   b7334:	b2c9      	uxtb	r1, r1
   b7336:	f7ff bf35 	b.w	b71a4 <_ZN5Print10printFloatEdh>

000b733a <_ZN5Print7printlnEdi>:
{
   b733a:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b733c:	b2c9      	uxtb	r1, r1
{
   b733e:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b7340:	f7ff ff30 	bl	b71a4 <_ZN5Print10printFloatEdh>
   b7344:	4604      	mov	r4, r0
  n += println();
   b7346:	4628      	mov	r0, r5
   b7348:	f7ff fef7 	bl	b713a <_ZN5Print7printlnEv>
}
   b734c:	4420      	add	r0, r4
   b734e:	bd38      	pop	{r3, r4, r5, pc}

000b7350 <_ZN5Print7printlnEfi>:
{
   b7350:	b538      	push	{r3, r4, r5, lr}
   b7352:	4604      	mov	r4, r0
   b7354:	ee10 0a10 	vmov	r0, s0
   b7358:	460d      	mov	r5, r1
    return println((double)num, digits);
   b735a:	f001 f97f 	bl	b865c <__aeabi_f2d>
   b735e:	ec41 0b10 	vmov	d0, r0, r1
   b7362:	4629      	mov	r1, r5
   b7364:	4620      	mov	r0, r4
}
   b7366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   b736a:	f7ff bfe6 	b.w	b733a <_ZN5Print7printlnEdi>

000b736e <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b736e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7372:	b086      	sub	sp, #24
   b7374:	af00      	add	r7, sp, #0
   b7376:	4605      	mov	r5, r0
   b7378:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b737a:	1d38      	adds	r0, r7, #4
   b737c:	2114      	movs	r1, #20
{
   b737e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7380:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b7382:	f7ff fc57 	bl	b6c34 <vsnprintf>

    if (n<bufsize)
   b7386:	2813      	cmp	r0, #19
   b7388:	d80e      	bhi.n	b73a8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b738a:	1d39      	adds	r1, r7, #4
   b738c:	4628      	mov	r0, r5
   b738e:	f7ff febb 	bl	b7108 <_ZN5Print5writeEPKc>
   b7392:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7394:	b11e      	cbz	r6, b739e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b7396:	4628      	mov	r0, r5
   b7398:	f7ff fecf 	bl	b713a <_ZN5Print7printlnEv>
   b739c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b739e:	4620      	mov	r0, r4
   b73a0:	3718      	adds	r7, #24
   b73a2:	46bd      	mov	sp, r7
   b73a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b73a8:	f100 0308 	add.w	r3, r0, #8
   b73ac:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b73b0:	46e8      	mov	r8, sp
        char bigger[n+1];
   b73b2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b73b6:	4622      	mov	r2, r4
   b73b8:	1c41      	adds	r1, r0, #1
   b73ba:	683b      	ldr	r3, [r7, #0]
   b73bc:	4668      	mov	r0, sp
   b73be:	f7ff fc39 	bl	b6c34 <vsnprintf>
  return write(str);
   b73c2:	4669      	mov	r1, sp
   b73c4:	4628      	mov	r0, r5
   b73c6:	f7ff fe9f 	bl	b7108 <_ZN5Print5writeEPKc>
   b73ca:	4604      	mov	r4, r0
   b73cc:	46c5      	mov	sp, r8
   b73ce:	e7e1      	b.n	b7394 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b73d0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b73d0:	4b01      	ldr	r3, [pc, #4]	; (b73d8 <_GLOBAL__sub_I_RGB+0x8>)
   b73d2:	2200      	movs	r2, #0
   b73d4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b73d6:	4770      	bx	lr
   b73d8:	2003e6dc 	.word	0x2003e6dc

000b73dc <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b73dc:	2100      	movs	r1, #0
   b73de:	f7ff baed 	b.w	b69bc <hal_spi_release>

000b73e2 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b73e2:	2100      	movs	r1, #0
   b73e4:	f7ff bae2 	b.w	b69ac <hal_spi_acquire>

000b73e8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b73e8:	b510      	push	{r4, lr}
   b73ea:	4604      	mov	r4, r0
   b73ec:	4608      	mov	r0, r1
{
    _spi = spi;
   b73ee:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b73f0:	f7ff fabc 	bl	b696c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b73f4:	2300      	movs	r3, #0
   b73f6:	6063      	str	r3, [r4, #4]
}
   b73f8:	4620      	mov	r0, r4
   b73fa:	bd10      	pop	{r4, pc}

000b73fc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b73fc:	b513      	push	{r0, r1, r4, lr}
   b73fe:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7400:	7800      	ldrb	r0, [r0, #0]
   b7402:	f7ff ffee 	bl	b73e2 <_ZN8SPIClass4lockEv.isra.0>
   b7406:	b958      	cbnz	r0, b7420 <_ZN8SPIClass5beginEv+0x24>
   b7408:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b740a:	9001      	str	r0, [sp, #4]
   b740c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7410:	f7ff fa9c 	bl	b694c <hal_spi_begin>
        unlock();
   b7414:	9801      	ldr	r0, [sp, #4]
    }
}
   b7416:	b002      	add	sp, #8
   b7418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b741c:	f7ff bfde 	b.w	b73dc <_ZN8SPIClass6unlockEv.isra.0>
   b7420:	b002      	add	sp, #8
   b7422:	bd10      	pop	{r4, pc}

000b7424 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7424:	7800      	ldrb	r0, [r0, #0]
   b7426:	f7ff bfd9 	b.w	b73dc <_ZN8SPIClass6unlockEv.isra.0>
	...

000b742c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b742c:	0840      	lsrs	r0, r0, #1
{
   b742e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7430:	6018      	str	r0, [r3, #0]
   b7432:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7434:	6818      	ldr	r0, [r3, #0]
   b7436:	4288      	cmp	r0, r1
   b7438:	b2e5      	uxtb	r5, r4
   b743a:	d906      	bls.n	b744a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b743c:	3401      	adds	r4, #1
   b743e:	2c08      	cmp	r4, #8
   b7440:	d002      	beq.n	b7448 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7442:	0840      	lsrs	r0, r0, #1
   b7444:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b7446:	e7f5      	b.n	b7434 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7448:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b744a:	4b02      	ldr	r3, [pc, #8]	; (b7454 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b744c:	5d5b      	ldrb	r3, [r3, r5]
   b744e:	7013      	strb	r3, [r2, #0]
}
   b7450:	bd30      	pop	{r4, r5, pc}
   b7452:	bf00      	nop
   b7454:	000bbfca 	.word	0x000bbfca

000b7458 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b7458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b745c:	4606      	mov	r6, r0
   b745e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7460:	7800      	ldrb	r0, [r0, #0]
{
   b7462:	460c      	mov	r4, r1
    CHECK(lock());
   b7464:	f7ff ffbd 	bl	b73e2 <_ZN8SPIClass4lockEv.isra.0>
   b7468:	2800      	cmp	r0, #0
   b746a:	db1b      	blt.n	b74a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b746c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b746e:	2214      	movs	r2, #20
   b7470:	2100      	movs	r1, #0
   b7472:	a809      	add	r0, sp, #36	; 0x24
   b7474:	f001 fccf 	bl	b8e16 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7478:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b747a:	2200      	movs	r2, #0
   b747c:	a909      	add	r1, sp, #36	; 0x24
   b747e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7480:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7484:	f7ff fa82 	bl	b698c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7488:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b748c:	b113      	cbz	r3, b7494 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b748e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b7492:	b155      	cbz	r5, b74aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7494:	2700      	movs	r7, #0
   b7496:	46b9      	mov	r9, r7
   b7498:	46b8      	mov	r8, r7
   b749a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b749c:	7923      	ldrb	r3, [r4, #4]
   b749e:	b15d      	cbz	r5, b74b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b74a0:	b1c3      	cbz	r3, b74d4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b74a2:	2000      	movs	r0, #0
}
   b74a4:	b00f      	add	sp, #60	; 0x3c
   b74a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b74aa:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b74ae:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b74b2:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b74b6:	e7f1      	b.n	b749c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b74b8:	2b00      	cmp	r3, #0
   b74ba:	d135      	bne.n	b7528 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b74bc:	68a3      	ldr	r3, [r4, #8]
   b74be:	4543      	cmp	r3, r8
   b74c0:	d108      	bne.n	b74d4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b74c2:	f88d 9020 	strb.w	r9, [sp, #32]
   b74c6:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b74ca:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b74ce:	89a3      	ldrh	r3, [r4, #12]
   b74d0:	429a      	cmp	r2, r3
   b74d2:	d0e6      	beq.n	b74a2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b74d4:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b74d6:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b74d8:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b74dc:	980a      	ldr	r0, [sp, #40]	; 0x28
   b74de:	ab04      	add	r3, sp, #16
   b74e0:	f10d 020f 	add.w	r2, sp, #15
   b74e4:	f7ff ffa2 	bl	b742c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b74e8:	7921      	ldrb	r1, [r4, #4]
   b74ea:	b985      	cbnz	r5, b750e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b74ec:	b989      	cbnz	r1, b7512 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b74ee:	68a3      	ldr	r3, [r4, #8]
   b74f0:	4543      	cmp	r3, r8
   b74f2:	d30e      	bcc.n	b7512 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b74f4:	f88d 9020 	strb.w	r9, [sp, #32]
   b74f8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b74fc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7500:	89a3      	ldrh	r3, [r4, #12]
   b7502:	429a      	cmp	r2, r3
   b7504:	d105      	bne.n	b7512 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b7506:	9b04      	ldr	r3, [sp, #16]
   b7508:	4543      	cmp	r3, r8
   b750a:	d102      	bne.n	b7512 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b750c:	e7c9      	b.n	b74a2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b750e:	2900      	cmp	r1, #0
   b7510:	d1f9      	bne.n	b7506 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b7512:	2300      	movs	r3, #0
   b7514:	9301      	str	r3, [sp, #4]
   b7516:	7b63      	ldrb	r3, [r4, #13]
   b7518:	9300      	str	r3, [sp, #0]
   b751a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b751e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7520:	7830      	ldrb	r0, [r6, #0]
   b7522:	f7ff fa3b 	bl	b699c <hal_spi_set_settings>
   b7526:	e7bc      	b.n	b74a2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7528:	e9cd 5500 	strd	r5, r5, [sp]
   b752c:	462b      	mov	r3, r5
   b752e:	462a      	mov	r2, r5
   b7530:	2101      	movs	r1, #1
   b7532:	e7f5      	b.n	b7520 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7534 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b7534:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7536:	7800      	ldrb	r0, [r0, #0]
   b7538:	f7ff fa10 	bl	b695c <hal_spi_transfer>
}
   b753c:	b2c0      	uxtb	r0, r0
   b753e:	bd08      	pop	{r3, pc}

000b7540 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b7540:	b510      	push	{r4, lr}
   b7542:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7544:	f7ff f8fa 	bl	b673c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b7548:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b754a:	6823      	ldr	r3, [r4, #0]
   b754c:	4620      	mov	r0, r4
   b754e:	695b      	ldr	r3, [r3, #20]
   b7550:	4798      	blx	r3
    if (c >= 0) return c;
   b7552:	2800      	cmp	r0, #0
   b7554:	da08      	bge.n	b7568 <_ZN6Stream9timedReadEv+0x28>
   b7556:	f7ff f8f1 	bl	b673c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b755a:	68e3      	ldr	r3, [r4, #12]
   b755c:	1ac0      	subs	r0, r0, r3
   b755e:	68a3      	ldr	r3, [r4, #8]
   b7560:	4298      	cmp	r0, r3
   b7562:	d3f2      	bcc.n	b754a <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b7564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b7568:	bd10      	pop	{r4, pc}

000b756a <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b756a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b756e:	4607      	mov	r7, r0
   b7570:	460c      	mov	r4, r1
   b7572:	188e      	adds	r6, r1, r2
   b7574:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b7576:	42b5      	cmp	r5, r6
   b7578:	eba5 0804 	sub.w	r8, r5, r4
   b757c:	d007      	beq.n	b758e <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b757e:	4638      	mov	r0, r7
   b7580:	f7ff ffde 	bl	b7540 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b7584:	1e03      	subs	r3, r0, #0
   b7586:	db02      	blt.n	b758e <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b7588:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b758c:	e7f3      	b.n	b7576 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b758e:	4640      	mov	r0, r8
   b7590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7594 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7594:	4b05      	ldr	r3, [pc, #20]	; (b75ac <_GLOBAL__sub_I_System+0x18>)
   b7596:	2202      	movs	r2, #2
   b7598:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b759a:	4b05      	ldr	r3, [pc, #20]	; (b75b0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b759c:	4a05      	ldr	r2, [pc, #20]	; (b75b4 <_GLOBAL__sub_I_System+0x20>)
   b759e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b75a0:	2000      	movs	r0, #0
   b75a2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b75a6:	f7ff ba91 	b.w	b6acc <set_system_mode>
   b75aa:	bf00      	nop
   b75ac:	2003e6f8 	.word	0x2003e6f8
   b75b0:	2003e6ec 	.word	0x2003e6ec
   b75b4:	ffff0000 	.word	0xffff0000

000b75b8 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b75b8:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b75ba:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b75bc:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b75c0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b75c2:	2201      	movs	r2, #1
   b75c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b75c8:	f10d 0107 	add.w	r1, sp, #7
   b75cc:	47a0      	blx	r4
}
   b75ce:	b002      	add	sp, #8
   b75d0:	bd10      	pop	{r4, pc}

000b75d2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b75d2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b75d4:	6803      	ldr	r3, [r0, #0]
   b75d6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b75d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b75dc:	46a4      	mov	ip, r4
}
   b75de:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b75e2:	4760      	bx	ip

000b75e4 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b75e4:	b513      	push	{r0, r1, r4, lr}
   b75e6:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b75e8:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b75ea:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b75ee:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b75f0:	f10d 0107 	add.w	r1, sp, #7
   b75f4:	2201      	movs	r2, #1
   b75f6:	47a0      	blx	r4
}
   b75f8:	b002      	add	sp, #8
   b75fa:	bd10      	pop	{r4, pc}

000b75fc <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b75fc:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b75fe:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7600:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7604:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7608:	429a      	cmp	r2, r3
int TCPClient::read() {
   b760a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b760c:	d008      	beq.n	b7620 <_ZN9TCPClient4readEv+0x24>
   b760e:	6963      	ldr	r3, [r4, #20]
   b7610:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7614:	1c51      	adds	r1, r2, #1
   b7616:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b761a:	4413      	add	r3, r2
   b761c:	7918      	ldrb	r0, [r3, #4]
}
   b761e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7620:	6803      	ldr	r3, [r0, #0]
   b7622:	691b      	ldr	r3, [r3, #16]
   b7624:	4798      	blx	r3
   b7626:	2800      	cmp	r0, #0
   b7628:	d1f1      	bne.n	b760e <_ZN9TCPClient4readEv+0x12>
   b762a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b762e:	e7f6      	b.n	b761e <_ZN9TCPClient4readEv+0x22>

000b7630 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b7630:	4770      	bx	lr

000b7632 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b7632:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b7634:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b7636:	43c0      	mvns	r0, r0
   b7638:	0fc0      	lsrs	r0, r0, #31
   b763a:	4770      	bx	lr

000b763c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b763c:	4770      	bx	lr
	...

000b7640 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7640:	4b06      	ldr	r3, [pc, #24]	; (b765c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7642:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7644:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7646:	f100 040c 	add.w	r4, r0, #12
	    ||
   b764a:	d005      	beq.n	b7658 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b764c:	4608      	mov	r0, r1
   b764e:	f000 fd8f 	bl	b8170 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7652:	2800      	cmp	r0, #0
   b7654:	bf08      	it	eq
   b7656:	2400      	moveq	r4, #0
      }
   b7658:	4620      	mov	r0, r4
   b765a:	bd10      	pop	{r4, pc}
   b765c:	000bbefc 	.word	0x000bbefc

000b7660 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7660:	b510      	push	{r4, lr}
   b7662:	21ac      	movs	r1, #172	; 0xac
   b7664:	4604      	mov	r4, r0
   b7666:	f7fc fd1a 	bl	b409e <_ZdlPvj>
   b766a:	4620      	mov	r0, r4
   b766c:	bd10      	pop	{r4, pc}

000b766e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b766e:	21ac      	movs	r1, #172	; 0xac
   b7670:	f7fc bd15 	b.w	b409e <_ZdlPvj>

000b7674 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b7674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b7678:	f04f 0800 	mov.w	r8, #0
   b767c:	b086      	sub	sp, #24
   b767e:	461c      	mov	r4, r3
   b7680:	f8c0 8004 	str.w	r8, [r0, #4]
   b7684:	4605      	mov	r5, r0
   b7686:	460e      	mov	r6, r1
   b7688:	4617      	mov	r7, r2
    struct timeval tv = {};
   b768a:	4641      	mov	r1, r8
   b768c:	2210      	movs	r2, #16
   b768e:	a802      	add	r0, sp, #8
   b7690:	f001 fbc1 	bl	b8e16 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b7694:	1c63      	adds	r3, r4, #1
   b7696:	d009      	beq.n	b76ac <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b7698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b769c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b76a0:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b76a4:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b76a8:	435c      	muls	r4, r3
   b76aa:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b76ac:	6968      	ldr	r0, [r5, #20]
   b76ae:	2310      	movs	r3, #16
   b76b0:	9300      	str	r3, [sp, #0]
   b76b2:	6800      	ldr	r0, [r0, #0]
   b76b4:	ab02      	add	r3, sp, #8
   b76b6:	f241 0205 	movw	r2, #4101	; 0x1005
   b76ba:	f640 71ff 	movw	r1, #4095	; 0xfff
   b76be:	f7ff f915 	bl	b68ec <sock_setsockopt>
    if (ret < 0) {
   b76c2:	2800      	cmp	r0, #0
   b76c4:	da07      	bge.n	b76d6 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b76c6:	f7ff fac5 	bl	b6c54 <__errno>
   b76ca:	6803      	ldr	r3, [r0, #0]
   b76cc:	606b      	str	r3, [r5, #4]
        return 0;
   b76ce:	2000      	movs	r0, #0
}
   b76d0:	b006      	add	sp, #24
   b76d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b76d6:	6968      	ldr	r0, [r5, #20]
   b76d8:	2300      	movs	r3, #0
   b76da:	6800      	ldr	r0, [r0, #0]
   b76dc:	463a      	mov	r2, r7
   b76de:	4631      	mov	r1, r6
   b76e0:	f7ff f924 	bl	b692c <sock_send>
    if (ret < 0) {
   b76e4:	1e03      	subs	r3, r0, #0
   b76e6:	dbee      	blt.n	b76c6 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b76e8:	4618      	mov	r0, r3
   b76ea:	e7f1      	b.n	b76d0 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b76ec <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b76ec:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b76ee:	6984      	ldr	r4, [r0, #24]
   b76f0:	4b0a      	ldr	r3, [pc, #40]	; (b771c <_ZN9TCPClientD1Ev+0x30>)
   b76f2:	6003      	str	r3, [r0, #0]
   b76f4:	4605      	mov	r5, r0
   b76f6:	b17c      	cbz	r4, b7718 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b76f8:	6863      	ldr	r3, [r4, #4]
   b76fa:	3b01      	subs	r3, #1
   b76fc:	6063      	str	r3, [r4, #4]
   b76fe:	b95b      	cbnz	r3, b7718 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b7700:	6823      	ldr	r3, [r4, #0]
   b7702:	4620      	mov	r0, r4
   b7704:	689b      	ldr	r3, [r3, #8]
   b7706:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7708:	68a3      	ldr	r3, [r4, #8]
   b770a:	3b01      	subs	r3, #1
   b770c:	60a3      	str	r3, [r4, #8]
   b770e:	b91b      	cbnz	r3, b7718 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b7710:	6823      	ldr	r3, [r4, #0]
   b7712:	4620      	mov	r0, r4
   b7714:	68db      	ldr	r3, [r3, #12]
   b7716:	4798      	blx	r3
   b7718:	4628      	mov	r0, r5
   b771a:	bd38      	pop	{r3, r4, r5, pc}
   b771c:	000bc010 	.word	0x000bc010

000b7720 <_ZN9TCPClientD0Ev>:
   b7720:	b510      	push	{r4, lr}
   b7722:	4604      	mov	r4, r0
   b7724:	f7ff ffe2 	bl	b76ec <_ZN9TCPClientD1Ev>
   b7728:	4620      	mov	r0, r4
   b772a:	211c      	movs	r1, #28
   b772c:	f7fc fcb7 	bl	b409e <_ZdlPvj>
   b7730:	4620      	mov	r0, r4
   b7732:	bd10      	pop	{r4, pc}

000b7734 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b7734:	b530      	push	{r4, r5, lr}
   b7736:	b087      	sub	sp, #28
   b7738:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b773a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b773c:	4668      	mov	r0, sp
   b773e:	f7ff fc03 	bl	b6f48 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7744:	3404      	adds	r4, #4
   b7746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7748:	682b      	ldr	r3, [r5, #0]
   b774a:	7023      	strb	r3, [r4, #0]
    }
   b774c:	b007      	add	sp, #28
   b774e:	bd30      	pop	{r4, r5, pc}

000b7750 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b7750:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b7752:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b7754:	4b05      	ldr	r3, [pc, #20]	; (b776c <_ZN9TCPClient8remoteIPEv+0x1c>)
   b7756:	4604      	mov	r4, r0
   b7758:	358c      	adds	r5, #140	; 0x8c
   b775a:	f844 3b04 	str.w	r3, [r4], #4
   b775e:	4606      	mov	r6, r0
   b7760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7764:	682b      	ldr	r3, [r5, #0]
   b7766:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b7768:	4630      	mov	r0, r6
   b776a:	bd70      	pop	{r4, r5, r6, pc}
   b776c:	000bbf70 	.word	0x000bbf70

000b7770 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7774:	4698      	mov	r8, r3
    stop();
   b7776:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7778:	b093      	sub	sp, #76	; 0x4c
   b777a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b777c:	2400      	movs	r4, #0
    stop();
   b777e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7780:	4606      	mov	r6, r0
   b7782:	4617      	mov	r7, r2
    stop();
   b7784:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7786:	4628      	mov	r0, r5
   b7788:	466b      	mov	r3, sp
   b778a:	4622      	mov	r2, r4
   b778c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b778e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7790:	f7ff f8a4 	bl	b68dc <netdb_getaddrinfo>
   b7794:	4605      	mov	r5, r0
   b7796:	2800      	cmp	r0, #0
   b7798:	d163      	bne.n	b7862 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b779a:	9b00      	ldr	r3, [sp, #0]
   b779c:	2b00      	cmp	r3, #0
   b779e:	d04b      	beq.n	b7838 <_ZN9TCPClient7connectEPKctm+0xc8>
   b77a0:	695b      	ldr	r3, [r3, #20]
   b77a2:	2b00      	cmp	r3, #0
   b77a4:	d048      	beq.n	b7838 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b77a6:	a806      	add	r0, sp, #24
   b77a8:	f7ff fb7e 	bl	b6ea8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b77ac:	9b00      	ldr	r3, [sp, #0]
   b77ae:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b77b0:	7863      	ldrb	r3, [r4, #1]
   b77b2:	2b02      	cmp	r3, #2
   b77b4:	d104      	bne.n	b77c0 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b77b6:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b77b8:	a806      	add	r0, sp, #24
   b77ba:	f7ff ffbb 	bl	b7734 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b77be:	e026      	b.n	b780e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b77c0:	2b0a      	cmp	r3, #10
   b77c2:	d124      	bne.n	b780e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b77c4:	2211      	movs	r2, #17
   b77c6:	4629      	mov	r1, r5
   b77c8:	a801      	add	r0, sp, #4
   b77ca:	f001 fb24 	bl	b8e16 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b77ce:	68a3      	ldr	r3, [r4, #8]
   b77d0:	2b00      	cmp	r3, #0
   b77d2:	d038      	beq.n	b7846 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b77d4:	f104 0308 	add.w	r3, r4, #8
   b77d8:	f10d 0c04 	add.w	ip, sp, #4
   b77dc:	3418      	adds	r4, #24
   b77de:	6818      	ldr	r0, [r3, #0]
   b77e0:	6859      	ldr	r1, [r3, #4]
   b77e2:	4662      	mov	r2, ip
   b77e4:	c203      	stmia	r2!, {r0, r1}
   b77e6:	3308      	adds	r3, #8
   b77e8:	42a3      	cmp	r3, r4
   b77ea:	4694      	mov	ip, r2
   b77ec:	d1f7      	bne.n	b77de <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b77ee:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b77f0:	a901      	add	r1, sp, #4
   b77f2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b77f4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b77f8:	f7ff fb64 	bl	b6ec4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b77fc:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7800:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7804:	ac07      	add	r4, sp, #28
   b7806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7808:	f8dc 3000 	ldr.w	r3, [ip]
   b780c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b780e:	a806      	add	r0, sp, #24
   b7810:	f7ff fb6a 	bl	b6ee8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b7814:	b180      	cbz	r0, b7838 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b7816:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b7818:	ad07      	add	r5, sp, #28
   b781a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b781e:	4b12      	ldr	r3, [pc, #72]	; (b7868 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7820:	930c      	str	r3, [sp, #48]	; 0x30
   b7822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7824:	ac0d      	add	r4, sp, #52	; 0x34
   b7826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7828:	682b      	ldr	r3, [r5, #0]
   b782a:	7023      	strb	r3, [r4, #0]
   b782c:	463a      	mov	r2, r7
   b782e:	4643      	mov	r3, r8
   b7830:	a90c      	add	r1, sp, #48	; 0x30
   b7832:	4630      	mov	r0, r6
   b7834:	47c8      	blx	r9
   b7836:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b7838:	9800      	ldr	r0, [sp, #0]
   b783a:	f7ff f847 	bl	b68cc <netdb_freeaddrinfo>
}
   b783e:	4628      	mov	r0, r5
   b7840:	b013      	add	sp, #76	; 0x4c
   b7842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7846:	68e3      	ldr	r3, [r4, #12]
   b7848:	2b00      	cmp	r3, #0
   b784a:	d1c3      	bne.n	b77d4 <_ZN9TCPClient7connectEPKctm+0x64>
   b784c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7850:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b7854:	f7ff f82a 	bl	b68ac <inet_htonl>
   b7858:	4581      	cmp	r9, r0
   b785a:	d1bb      	bne.n	b77d4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b785c:	f104 0114 	add.w	r1, r4, #20
   b7860:	e7aa      	b.n	b77b8 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7862:	4625      	mov	r5, r4
   b7864:	e7e8      	b.n	b7838 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7866:	bf00      	nop
   b7868:	000bbf70 	.word	0x000bbf70

000b786c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b786c:	b538      	push	{r3, r4, r5, lr}
   b786e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b7870:	681a      	ldr	r2, [r3, #0]
   b7872:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b7874:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b7876:	da10      	bge.n	b789a <_ZN9TCPClient9connectedEv+0x2e>
   b7878:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b787c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7880:	429a      	cmp	r2, r3
   b7882:	d10a      	bne.n	b789a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b7884:	6803      	ldr	r3, [r0, #0]
   b7886:	691b      	ldr	r3, [r3, #16]
   b7888:	4798      	blx	r3
        if (!rv) {
   b788a:	4604      	mov	r4, r0
   b788c:	b928      	cbnz	r0, b789a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b788e:	682b      	ldr	r3, [r5, #0]
   b7890:	4628      	mov	r0, r5
   b7892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7894:	4798      	blx	r3
        rv = available();
   b7896:	4620      	mov	r0, r4
}
   b7898:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b789a:	2001      	movs	r0, #1
   b789c:	e7fc      	b.n	b7898 <_ZN9TCPClient9connectedEv+0x2c>

000b789e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b789e:	b510      	push	{r4, lr}
   b78a0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b78a2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b78a6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b78aa:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b78ac:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b78ae:	d005      	beq.n	b78bc <_ZN9TCPClient4peekEv+0x1e>
   b78b0:	6963      	ldr	r3, [r4, #20]
   b78b2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b78b6:	4413      	add	r3, r2
   b78b8:	7918      	ldrb	r0, [r3, #4]
}
   b78ba:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b78bc:	6803      	ldr	r3, [r0, #0]
   b78be:	691b      	ldr	r3, [r3, #16]
   b78c0:	4798      	blx	r3
   b78c2:	2800      	cmp	r0, #0
   b78c4:	d1f4      	bne.n	b78b0 <_ZN9TCPClient4peekEv+0x12>
   b78c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b78ca:	e7f6      	b.n	b78ba <_ZN9TCPClient4peekEv+0x1c>

000b78cc <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b78cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b78ce:	6943      	ldr	r3, [r0, #20]
   b78d0:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b78d2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b78d6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b78da:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b78dc:	4605      	mov	r5, r0
   b78de:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b78e0:	d016      	beq.n	b7910 <_ZN9TCPClient4readEPhj+0x44>
   b78e2:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b78e4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b78e8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b78ec:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b78ee:	42bc      	cmp	r4, r7
   b78f0:	bf28      	it	cs
   b78f2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b78f4:	3304      	adds	r3, #4
   b78f6:	4622      	mov	r2, r4
   b78f8:	4419      	add	r1, r3
   b78fa:	4630      	mov	r0, r6
   b78fc:	f001 fa7d 	bl	b8dfa <memcpy>
   b7900:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b7902:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b7906:	4423      	add	r3, r4
   b7908:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b790c:	4620      	mov	r0, r4
   b790e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7910:	6803      	ldr	r3, [r0, #0]
   b7912:	691b      	ldr	r3, [r3, #16]
   b7914:	4798      	blx	r3
   b7916:	2800      	cmp	r0, #0
   b7918:	d1e3      	bne.n	b78e2 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b791a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b791e:	e7f5      	b.n	b790c <_ZN9TCPClient4readEPhj+0x40>

000b7920 <_ZN9TCPClient12flush_bufferEv>:
   b7920:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b7922:	2300      	movs	r3, #0
   b7924:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b7928:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b792a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b792e:	4770      	bx	lr

000b7930 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7934:	461f      	mov	r7, r3
    stop();
   b7936:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7938:	460c      	mov	r4, r1
    stop();
   b793a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b793c:	b08a      	sub	sp, #40	; 0x28
   b793e:	4605      	mov	r5, r0
   b7940:	4616      	mov	r6, r2
    stop();
   b7942:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7944:	7d23      	ldrb	r3, [r4, #20]
   b7946:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b794a:	2b04      	cmp	r3, #4
   b794c:	bf0c      	ite	eq
   b794e:	2002      	moveq	r0, #2
   b7950:	200a      	movne	r0, #10
   b7952:	2206      	movs	r2, #6
   b7954:	2101      	movs	r1, #1
   b7956:	f7fe fff1 	bl	b693c <sock_socket>
   b795a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b795e:	696b      	ldr	r3, [r5, #20]
   b7960:	681b      	ldr	r3, [r3, #0]
   b7962:	2b00      	cmp	r3, #0
   b7964:	da08      	bge.n	b7978 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b7966:	682b      	ldr	r3, [r5, #0]
   b7968:	4628      	mov	r0, r5
   b796a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b796c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b796e:	4798      	blx	r3
}
   b7970:	4620      	mov	r0, r4
   b7972:	b00a      	add	sp, #40	; 0x28
   b7974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b7978:	4628      	mov	r0, r5
   b797a:	f7ff ffd1 	bl	b7920 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b797e:	b1b7      	cbz	r7, b79ae <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7980:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7982:	a903      	add	r1, sp, #12
   b7984:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b7986:	9303      	str	r3, [sp, #12]
   b7988:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b798c:	f7fe ff7e 	bl	b688c <if_index_to_name>
   b7990:	2800      	cmp	r0, #0
   b7992:	d1e8      	bne.n	b7966 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7994:	6968      	ldr	r0, [r5, #20]
   b7996:	2306      	movs	r3, #6
   b7998:	9300      	str	r3, [sp, #0]
   b799a:	6800      	ldr	r0, [r0, #0]
   b799c:	ab03      	add	r3, sp, #12
   b799e:	f241 020b 	movw	r2, #4107	; 0x100b
   b79a2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b79a6:	f7fe ffa1 	bl	b68ec <sock_setsockopt>
   b79aa:	2800      	cmp	r0, #0
   b79ac:	d1db      	bne.n	b7966 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b79ae:	221c      	movs	r2, #28
   b79b0:	2100      	movs	r1, #0
   b79b2:	a803      	add	r0, sp, #12
   b79b4:	f001 fa2f 	bl	b8e16 <memset>
    if (ip.version() == 4) {
   b79b8:	7d23      	ldrb	r3, [r4, #20]
   b79ba:	2b04      	cmp	r3, #4
   b79bc:	d11d      	bne.n	b79fa <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b79be:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b79c2:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b79c4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b79c8:	f7fe ff78 	bl	b68bc <inet_htons>
   b79cc:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b79d0:	6860      	ldr	r0, [r4, #4]
   b79d2:	f7fe ff6b 	bl	b68ac <inet_htonl>
   b79d6:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b79d8:	696b      	ldr	r3, [r5, #20]
   b79da:	221c      	movs	r2, #28
   b79dc:	6818      	ldr	r0, [r3, #0]
   b79de:	a903      	add	r1, sp, #12
   b79e0:	f7fe ff94 	bl	b690c <sock_connect>
   b79e4:	2800      	cmp	r0, #0
   b79e6:	d1be      	bne.n	b7966 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b79e8:	3404      	adds	r4, #4
   b79ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b79ec:	696d      	ldr	r5, [r5, #20]
   b79ee:	358c      	adds	r5, #140	; 0x8c
   b79f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b79f2:	6823      	ldr	r3, [r4, #0]
   b79f4:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b79f6:	2401      	movs	r4, #1
   b79f8:	e7ba      	b.n	b7970 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b79fa:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b79fe:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7a00:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b7a04:	f7fe ff5a 	bl	b68bc <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7a08:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b7a0a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7a0e:	1d23      	adds	r3, r4, #4
   b7a10:	f104 0714 	add.w	r7, r4, #20
   b7a14:	6818      	ldr	r0, [r3, #0]
   b7a16:	6859      	ldr	r1, [r3, #4]
   b7a18:	4632      	mov	r2, r6
   b7a1a:	c203      	stmia	r2!, {r0, r1}
   b7a1c:	3308      	adds	r3, #8
   b7a1e:	42bb      	cmp	r3, r7
   b7a20:	4616      	mov	r6, r2
   b7a22:	d1f7      	bne.n	b7a14 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b7a24:	e7d8      	b.n	b79d8 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b7a28 <_ZN9TCPClient9availableEv>:
{
   b7a28:	b530      	push	{r4, r5, lr}
   b7a2a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b7a2c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7a30:	b08b      	sub	sp, #44	; 0x2c
   b7a32:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b7a34:	b12b      	cbz	r3, b7a42 <_ZN9TCPClient9availableEv+0x1a>
   b7a36:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b7a3a:	429a      	cmp	r2, r3
   b7a3c:	d101      	bne.n	b7a42 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b7a3e:	f7ff ff6f 	bl	b7920 <_ZN9TCPClient12flush_bufferEv>
   b7a42:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b7a44:	6808      	ldr	r0, [r1, #0]
   b7a46:	2800      	cmp	r0, #0
   b7a48:	db18      	blt.n	b7a7c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b7a4a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b7a4e:	2d7f      	cmp	r5, #127	; 0x7f
   b7a50:	d814      	bhi.n	b7a7c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b7a52:	3104      	adds	r1, #4
   b7a54:	2308      	movs	r3, #8
   b7a56:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b7a5a:	4429      	add	r1, r5
   b7a5c:	f7fe ff5e 	bl	b691c <sock_recv>
            if (ret > 0) {
   b7a60:	2800      	cmp	r0, #0
   b7a62:	dd13      	ble.n	b7a8c <_ZN9TCPClient9availableEv+0x64>
   b7a64:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b7a66:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7a6a:	b90a      	cbnz	r2, b7a70 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b7a6c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7a70:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7a72:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7a76:	4410      	add	r0, r2
   b7a78:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b7a7c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b7a7e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7a82:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b7a86:	1ac0      	subs	r0, r0, r3
   b7a88:	b00b      	add	sp, #44	; 0x2c
   b7a8a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b7a8c:	f7ff f8e2 	bl	b6c54 <__errno>
   b7a90:	6803      	ldr	r3, [r0, #0]
   b7a92:	2b0b      	cmp	r3, #11
   b7a94:	d0f2      	beq.n	b7a7c <_ZN9TCPClient9availableEv+0x54>
   b7a96:	f7ff f8dd 	bl	b6c54 <__errno>
   b7a9a:	6803      	ldr	r3, [r0, #0]
   b7a9c:	2b0b      	cmp	r3, #11
   b7a9e:	d0ed      	beq.n	b7a7c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7aa0:	2320      	movs	r3, #32
   b7aa2:	2500      	movs	r5, #0
   b7aa4:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7aa8:	f7ff f8d4 	bl	b6c54 <__errno>
   b7aac:	6803      	ldr	r3, [r0, #0]
   b7aae:	9301      	str	r3, [sp, #4]
   b7ab0:	4b08      	ldr	r3, [pc, #32]	; (b7ad4 <_ZN9TCPClient9availableEv+0xac>)
   b7ab2:	4909      	ldr	r1, [pc, #36]	; (b7ad8 <_ZN9TCPClient9availableEv+0xb0>)
   b7ab4:	9300      	str	r3, [sp, #0]
   b7ab6:	aa02      	add	r2, sp, #8
   b7ab8:	462b      	mov	r3, r5
   b7aba:	2032      	movs	r0, #50	; 0x32
   b7abc:	f7fe fffe 	bl	b6abc <log_message>
                    sock_close(d_->sock);
   b7ac0:	6963      	ldr	r3, [r4, #20]
   b7ac2:	6818      	ldr	r0, [r3, #0]
   b7ac4:	f7fe ff1a 	bl	b68fc <sock_close>
   b7ac8:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b7aca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7ace:	601a      	str	r2, [r3, #0]
   b7ad0:	e7d4      	b.n	b7a7c <_ZN9TCPClient9availableEv+0x54>
   b7ad2:	bf00      	nop
   b7ad4:	000bbfd9 	.word	0x000bbfd9
   b7ad8:	000bbfd2 	.word	0x000bbfd2

000b7adc <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7adc:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b7ade:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7ae0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b7ae2:	6818      	ldr	r0, [r3, #0]
   b7ae4:	2800      	cmp	r0, #0
   b7ae6:	db01      	blt.n	b7aec <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b7ae8:	f7fe ff08 	bl	b68fc <sock_close>
   b7aec:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b7aee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7af2:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b7af4:	6960      	ldr	r0, [r4, #20]
   b7af6:	2211      	movs	r2, #17
   b7af8:	2100      	movs	r1, #0
   b7afa:	308c      	adds	r0, #140	; 0x8c
   b7afc:	f001 f98b 	bl	b8e16 <memset>
    flush_buffer();
   b7b00:	4620      	mov	r0, r4
}
   b7b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b7b06:	f7ff bf0b 	b.w	b7920 <_ZN9TCPClient12flush_bufferEv>

000b7b0a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b7b0a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b7b0c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b7b0e:	4604      	mov	r4, r0
          total(0) {
   b7b10:	6001      	str	r1, [r0, #0]
   b7b12:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b7b16:	3088      	adds	r0, #136	; 0x88
   b7b18:	f7ff f9c6 	bl	b6ea8 <_ZN9IPAddressC1Ev>
}
   b7b1c:	4620      	mov	r0, r4
   b7b1e:	bd10      	pop	{r4, pc}

000b7b20 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7b20:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7b22:	2300      	movs	r3, #0
   b7b24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7b28:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b7b2c:	4a0e      	ldr	r2, [pc, #56]	; (b7b68 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b7b2e:	6103      	str	r3, [r0, #16]
   b7b30:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7b32:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7b34:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7b36:	20ac      	movs	r0, #172	; 0xac
   b7b38:	9101      	str	r1, [sp, #4]
   b7b3a:	f7fc faac 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7b3e:	1e05      	subs	r5, r0, #0
   b7b40:	f105 060c 	add.w	r6, r5, #12
   b7b44:	d008      	beq.n	b7b58 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b7b46:	2301      	movs	r3, #1
   b7b48:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7b4c:	4b07      	ldr	r3, [pc, #28]	; (b7b6c <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7b4e:	9901      	ldr	r1, [sp, #4]
   b7b50:	602b      	str	r3, [r5, #0]
   b7b52:	4630      	mov	r0, r6
   b7b54:	f7ff ffd9 	bl	b7b0a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b7b58:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b7b5a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b7b5e:	f7ff fedf 	bl	b7920 <_ZN9TCPClient12flush_bufferEv>
}
   b7b62:	b002      	add	sp, #8
   b7b64:	bd70      	pop	{r4, r5, r6, pc}
   b7b66:	bf00      	nop
   b7b68:	000bc010 	.word	0x000bc010
   b7b6c:	000bbff4 	.word	0x000bbff4

000b7b70 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7b70:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b7b72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b7b76:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b7b78:	f7ff ffd2 	bl	b7b20 <_ZN9TCPClientC1Ei>
}
   b7b7c:	4620      	mov	r0, r4
   b7b7e:	bd10      	pop	{r4, pc}

000b7b80 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7b80:	b510      	push	{r4, lr}
   b7b82:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7b84:	6800      	ldr	r0, [r0, #0]
   b7b86:	2800      	cmp	r0, #0
   b7b88:	db01      	blt.n	b7b8e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b7b8a:	f7fe feb7 	bl	b68fc <sock_close>
    }
}
   b7b8e:	4620      	mov	r0, r4
   b7b90:	bd10      	pop	{r4, pc}

000b7b92 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7b92:	300c      	adds	r0, #12
   b7b94:	f7ff bff4 	b.w	b7b80 <_ZN9TCPClient4DataD1Ev>

000b7b98 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7b98:	4b02      	ldr	r3, [pc, #8]	; (b7ba4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7b9a:	681a      	ldr	r2, [r3, #0]
   b7b9c:	4b02      	ldr	r3, [pc, #8]	; (b7ba8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7b9e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7ba0:	4770      	bx	lr
   b7ba2:	bf00      	nop
   b7ba4:	2003e3e4 	.word	0x2003e3e4
   b7ba8:	2003e6fc 	.word	0x2003e6fc

000b7bac <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7bac:	4770      	bx	lr

000b7bae <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7bae:	7441      	strb	r1, [r0, #17]
}
   b7bb0:	4770      	bx	lr

000b7bb2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7bb2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7bb4:	7c00      	ldrb	r0, [r0, #16]
   b7bb6:	f7fe ff39 	bl	b6a2c <hal_usart_available_data_for_write>
}
   b7bba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7bbe:	bd08      	pop	{r3, pc}

000b7bc0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7bc0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7bc2:	7c00      	ldrb	r0, [r0, #16]
   b7bc4:	f7fe ff0a 	bl	b69dc <hal_usart_available>
}
   b7bc8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7bcc:	bd08      	pop	{r3, pc}

000b7bce <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7bce:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7bd0:	7c00      	ldrb	r0, [r0, #16]
   b7bd2:	f7fe ff13 	bl	b69fc <hal_usart_peek>
}
   b7bd6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7bda:	bd08      	pop	{r3, pc}

000b7bdc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7bdc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7bde:	7c00      	ldrb	r0, [r0, #16]
   b7be0:	f7fe ff04 	bl	b69ec <hal_usart_read>
}
   b7be4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7be8:	bd08      	pop	{r3, pc}

000b7bea <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7bea:	7c00      	ldrb	r0, [r0, #16]
   b7bec:	f7fe bf0e 	b.w	b6a0c <hal_usart_flush>

000b7bf0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7bf2:	7c45      	ldrb	r5, [r0, #17]
{
   b7bf4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7bf6:	b12d      	cbz	r5, b7c04 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7bf8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7bfa:	b003      	add	sp, #12
   b7bfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7c00:	f7fe bee4 	b.w	b69cc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7c04:	7c00      	ldrb	r0, [r0, #16]
   b7c06:	9101      	str	r1, [sp, #4]
   b7c08:	f7fe ff10 	bl	b6a2c <hal_usart_available_data_for_write>
   b7c0c:	2800      	cmp	r0, #0
   b7c0e:	9901      	ldr	r1, [sp, #4]
   b7c10:	dcf2      	bgt.n	b7bf8 <_ZN11USARTSerial5writeEh+0x8>
}
   b7c12:	4628      	mov	r0, r5
   b7c14:	b003      	add	sp, #12
   b7c16:	bd30      	pop	{r4, r5, pc}

000b7c18 <_ZN11USARTSerialD0Ev>:
   b7c18:	b510      	push	{r4, lr}
   b7c1a:	2114      	movs	r1, #20
   b7c1c:	4604      	mov	r4, r0
   b7c1e:	f7fc fa3e 	bl	b409e <_ZdlPvj>
   b7c22:	4620      	mov	r0, r4
   b7c24:	bd10      	pop	{r4, pc}
	...

000b7c28 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7c28:	b510      	push	{r4, lr}
   b7c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7c2e:	4604      	mov	r4, r0
   b7c30:	4608      	mov	r0, r1
   b7c32:	4611      	mov	r1, r2
   b7c34:	2200      	movs	r2, #0
   b7c36:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7c3a:	4b04      	ldr	r3, [pc, #16]	; (b7c4c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7c3c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7c3e:	2301      	movs	r3, #1
  _serial = serial;
   b7c40:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7c42:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7c44:	f7fe fefa 	bl	b6a3c <hal_usart_init_ex>
}
   b7c48:	4620      	mov	r0, r4
   b7c4a:	bd10      	pop	{r4, pc}
   b7c4c:	000bc078 	.word	0x000bc078

000b7c50 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7c50:	7441      	strb	r1, [r0, #17]
}
   b7c52:	4770      	bx	lr

000b7c54 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7c54:	4770      	bx	lr

000b7c56 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7c56:	4770      	bx	lr

000b7c58 <_ZN9USBSerial4readEv>:
{
   b7c58:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7c5a:	2100      	movs	r1, #0
   b7c5c:	7c00      	ldrb	r0, [r0, #16]
   b7c5e:	f7fe ff0d 	bl	b6a7c <HAL_USB_USART_Receive_Data>
}
   b7c62:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7c66:	bd08      	pop	{r3, pc}

000b7c68 <_ZN9USBSerial4peekEv>:
{
   b7c68:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7c6a:	2101      	movs	r1, #1
   b7c6c:	7c00      	ldrb	r0, [r0, #16]
   b7c6e:	f7fe ff05 	bl	b6a7c <HAL_USB_USART_Receive_Data>
}
   b7c72:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7c76:	bd08      	pop	{r3, pc}

000b7c78 <_ZN9USBSerial17availableForWriteEv>:
{
   b7c78:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7c7a:	7c00      	ldrb	r0, [r0, #16]
   b7c7c:	f7fe fef6 	bl	b6a6c <HAL_USB_USART_Available_Data_For_Write>
}
   b7c80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7c84:	bd08      	pop	{r3, pc}

000b7c86 <_ZN9USBSerial9availableEv>:
{
   b7c86:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7c88:	7c00      	ldrb	r0, [r0, #16]
   b7c8a:	f7fe fee7 	bl	b6a5c <HAL_USB_USART_Available_Data>
}
   b7c8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7c92:	bd08      	pop	{r3, pc}

000b7c94 <_ZN9USBSerial5writeEh>:
{
   b7c94:	b513      	push	{r0, r1, r4, lr}
   b7c96:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7c98:	7c00      	ldrb	r0, [r0, #16]
{
   b7c9a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7c9c:	f7fe fee6 	bl	b6a6c <HAL_USB_USART_Available_Data_For_Write>
   b7ca0:	2800      	cmp	r0, #0
   b7ca2:	9901      	ldr	r1, [sp, #4]
   b7ca4:	dc01      	bgt.n	b7caa <_ZN9USBSerial5writeEh+0x16>
   b7ca6:	7c60      	ldrb	r0, [r4, #17]
   b7ca8:	b120      	cbz	r0, b7cb4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7caa:	7c20      	ldrb	r0, [r4, #16]
   b7cac:	f7fe feee 	bl	b6a8c <HAL_USB_USART_Send_Data>
   b7cb0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7cb4:	b002      	add	sp, #8
   b7cb6:	bd10      	pop	{r4, pc}

000b7cb8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7cb8:	7c00      	ldrb	r0, [r0, #16]
   b7cba:	f7fe beef 	b.w	b6a9c <HAL_USB_USART_Flush_Data>

000b7cbe <_ZN9USBSerialD0Ev>:
   b7cbe:	b510      	push	{r4, lr}
   b7cc0:	2114      	movs	r1, #20
   b7cc2:	4604      	mov	r4, r0
   b7cc4:	f7fc f9eb 	bl	b409e <_ZdlPvj>
   b7cc8:	4620      	mov	r0, r4
   b7cca:	bd10      	pop	{r4, pc}

000b7ccc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7ccc:	b510      	push	{r4, lr}
   b7cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7cd2:	4604      	mov	r4, r0
   b7cd4:	4608      	mov	r0, r1
   b7cd6:	2100      	movs	r1, #0
   b7cd8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7cdc:	4b04      	ldr	r3, [pc, #16]	; (b7cf0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7cde:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7ce0:	2301      	movs	r3, #1
  _serial = serial;
   b7ce2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7ce4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7ce6:	4611      	mov	r1, r2
   b7ce8:	f7fe feb0 	bl	b6a4c <HAL_USB_USART_Init>
}
   b7cec:	4620      	mov	r0, r4
   b7cee:	bd10      	pop	{r4, pc}
   b7cf0:	000bc0a8 	.word	0x000bc0a8

000b7cf4 <_Z19acquireSerialBufferv>:
{
   b7cf4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7cf6:	2214      	movs	r2, #20
{
   b7cf8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7cfa:	2100      	movs	r1, #0
   b7cfc:	f001 f88b 	bl	b8e16 <memset>
}
   b7d00:	4620      	mov	r0, r4
   b7d02:	bd10      	pop	{r4, pc}

000b7d04 <_Z16_fetch_usbserialv>:
{
   b7d04:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7d06:	4c0f      	ldr	r4, [pc, #60]	; (b7d44 <_Z16_fetch_usbserialv+0x40>)
{
   b7d08:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7d0a:	a803      	add	r0, sp, #12
   b7d0c:	f7ff fff2 	bl	b7cf4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7d10:	7821      	ldrb	r1, [r4, #0]
   b7d12:	f3bf 8f5b 	dmb	ish
   b7d16:	f011 0101 	ands.w	r1, r1, #1
   b7d1a:	d10f      	bne.n	b7d3c <_Z16_fetch_usbserialv+0x38>
   b7d1c:	4620      	mov	r0, r4
   b7d1e:	9101      	str	r1, [sp, #4]
   b7d20:	f7fc f9cc 	bl	b40bc <__cxa_guard_acquire>
   b7d24:	9901      	ldr	r1, [sp, #4]
   b7d26:	b148      	cbz	r0, b7d3c <_Z16_fetch_usbserialv+0x38>
   b7d28:	aa03      	add	r2, sp, #12
   b7d2a:	4807      	ldr	r0, [pc, #28]	; (b7d48 <_Z16_fetch_usbserialv+0x44>)
   b7d2c:	f7ff ffce 	bl	b7ccc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7d30:	4620      	mov	r0, r4
   b7d32:	f7fc f9c8 	bl	b40c6 <__cxa_guard_release>
   b7d36:	4805      	ldr	r0, [pc, #20]	; (b7d4c <_Z16_fetch_usbserialv+0x48>)
   b7d38:	f001 f84e 	bl	b8dd8 <atexit>
	return _usbserial;
}
   b7d3c:	4802      	ldr	r0, [pc, #8]	; (b7d48 <_Z16_fetch_usbserialv+0x44>)
   b7d3e:	b008      	add	sp, #32
   b7d40:	bd10      	pop	{r4, pc}
   b7d42:	bf00      	nop
   b7d44:	2003e700 	.word	0x2003e700
   b7d48:	2003e704 	.word	0x2003e704
   b7d4c:	000b7c55 	.word	0x000b7c55

000b7d50 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7d50:	2200      	movs	r2, #0
   b7d52:	6840      	ldr	r0, [r0, #4]
   b7d54:	4611      	mov	r1, r2
   b7d56:	f7fe bf0d 	b.w	b6b74 <network_ready>

000b7d5a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7d5a:	2200      	movs	r2, #0
   b7d5c:	6840      	ldr	r0, [r0, #4]
   b7d5e:	4611      	mov	r1, r2
   b7d60:	f7fe bf28 	b.w	b6bb4 <network_listening>

000b7d64 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7d64:	2200      	movs	r2, #0
   b7d66:	6840      	ldr	r0, [r0, #4]
   b7d68:	4611      	mov	r1, r2
   b7d6a:	f7fe bf33 	b.w	b6bd4 <network_get_listen_timeout>

000b7d6e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7d6e:	6840      	ldr	r0, [r0, #4]
   b7d70:	2200      	movs	r2, #0
   b7d72:	f7fe bf27 	b.w	b6bc4 <network_set_listen_timeout>

000b7d76 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7d76:	6840      	ldr	r0, [r0, #4]
   b7d78:	2200      	movs	r2, #0
   b7d7a:	f081 0101 	eor.w	r1, r1, #1
   b7d7e:	f7fe bf11 	b.w	b6ba4 <network_listen>

000b7d82 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7d82:	2300      	movs	r3, #0
   b7d84:	6840      	ldr	r0, [r0, #4]
   b7d86:	461a      	mov	r2, r3
   b7d88:	4619      	mov	r1, r3
   b7d8a:	f7fe bf03 	b.w	b6b94 <network_off>

000b7d8e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7d8e:	2300      	movs	r3, #0
   b7d90:	6840      	ldr	r0, [r0, #4]
   b7d92:	461a      	mov	r2, r3
   b7d94:	4619      	mov	r1, r3
   b7d96:	f7fe bef5 	b.w	b6b84 <network_on>

000b7d9a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7d9a:	2200      	movs	r2, #0
   b7d9c:	6840      	ldr	r0, [r0, #4]
   b7d9e:	4611      	mov	r1, r2
   b7da0:	f7fe bed8 	b.w	b6b54 <network_connecting>

000b7da4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7da4:	6840      	ldr	r0, [r0, #4]
   b7da6:	2200      	movs	r2, #0
   b7da8:	2102      	movs	r1, #2
   b7daa:	f7fe bedb 	b.w	b6b64 <network_disconnect>

000b7dae <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7dae:	2300      	movs	r3, #0
   b7db0:	6840      	ldr	r0, [r0, #4]
   b7db2:	461a      	mov	r2, r3
   b7db4:	f7fe bec6 	b.w	b6b44 <network_connect>

000b7db8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7db8:	4b02      	ldr	r3, [pc, #8]	; (b7dc4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7dba:	2204      	movs	r2, #4
   b7dbc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7dbe:	4a02      	ldr	r2, [pc, #8]	; (b7dc8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7dc0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7dc2:	4770      	bx	lr
   b7dc4:	2003e718 	.word	0x2003e718
   b7dc8:	000bc0d8 	.word	0x000bc0d8

000b7dcc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7dcc:	4b01      	ldr	r3, [pc, #4]	; (b7dd4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7dce:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7dd0:	4770      	bx	lr
   b7dd2:	bf00      	nop
   b7dd4:	2003e3e8 	.word	0x2003e3e8

000b7dd8 <serialEventRun>:
{
   b7dd8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7dda:	4b0b      	ldr	r3, [pc, #44]	; (b7e08 <serialEventRun+0x30>)
   b7ddc:	b143      	cbz	r3, b7df0 <serialEventRun+0x18>
   b7dde:	f7ff ff91 	bl	b7d04 <_Z16_fetch_usbserialv>
   b7de2:	6803      	ldr	r3, [r0, #0]
   b7de4:	691b      	ldr	r3, [r3, #16]
   b7de6:	4798      	blx	r3
   b7de8:	2800      	cmp	r0, #0
   b7dea:	dd01      	ble.n	b7df0 <serialEventRun+0x18>
        serialEvent();
   b7dec:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7df0:	4b06      	ldr	r3, [pc, #24]	; (b7e0c <serialEventRun+0x34>)
   b7df2:	b143      	cbz	r3, b7e06 <serialEventRun+0x2e>
   b7df4:	f000 f996 	bl	b8124 <_Z22__fetch_global_Serial1v>
   b7df8:	6803      	ldr	r3, [r0, #0]
   b7dfa:	691b      	ldr	r3, [r3, #16]
   b7dfc:	4798      	blx	r3
   b7dfe:	2800      	cmp	r0, #0
   b7e00:	dd01      	ble.n	b7e06 <serialEventRun+0x2e>
        serialEvent1();
   b7e02:	f3af 8000 	nop.w
}
   b7e06:	bd08      	pop	{r3, pc}
	...

000b7e10 <_post_loop>:
{
   b7e10:	b508      	push	{r3, lr}
	serialEventRun();
   b7e12:	f7ff ffe1 	bl	b7dd8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7e16:	f7fe fc91 	bl	b673c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7e1a:	4b01      	ldr	r3, [pc, #4]	; (b7e20 <_post_loop+0x10>)
   b7e1c:	6018      	str	r0, [r3, #0]
}
   b7e1e:	bd08      	pop	{r3, pc}
   b7e20:	2003e728 	.word	0x2003e728

000b7e24 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7e24:	4805      	ldr	r0, [pc, #20]	; (b7e3c <_Z33system_initialize_user_backup_ramv+0x18>)
   b7e26:	4a06      	ldr	r2, [pc, #24]	; (b7e40 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7e28:	4906      	ldr	r1, [pc, #24]	; (b7e44 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7e2a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7e2c:	1a12      	subs	r2, r2, r0
   b7e2e:	f000 ffe4 	bl	b8dfa <memcpy>
    __backup_sram_signature = signature;
   b7e32:	4b05      	ldr	r3, [pc, #20]	; (b7e48 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7e34:	4a05      	ldr	r2, [pc, #20]	; (b7e4c <_Z33system_initialize_user_backup_ramv+0x28>)
   b7e36:	601a      	str	r2, [r3, #0]
}
   b7e38:	bd08      	pop	{r3, pc}
   b7e3a:	bf00      	nop
   b7e3c:	2003f400 	.word	0x2003f400
   b7e40:	2003f404 	.word	0x2003f404
   b7e44:	000bc5f4 	.word	0x000bc5f4
   b7e48:	2003f400 	.word	0x2003f400
   b7e4c:	9a271c1e 	.word	0x9a271c1e

000b7e50 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7e50:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7e52:	2300      	movs	r3, #0
   b7e54:	9300      	str	r3, [sp, #0]
   b7e56:	461a      	mov	r2, r3
   b7e58:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7e5c:	f7fe fe58 	bl	b6b10 <system_ctrl_set_result>
}
   b7e60:	b003      	add	sp, #12
   b7e62:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7e68 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7e68:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7e6a:	8843      	ldrh	r3, [r0, #2]
   b7e6c:	2b0a      	cmp	r3, #10
   b7e6e:	d008      	beq.n	b7e82 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7e70:	2b50      	cmp	r3, #80	; 0x50
   b7e72:	d10b      	bne.n	b7e8c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7e74:	4b09      	ldr	r3, [pc, #36]	; (b7e9c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7e76:	681b      	ldr	r3, [r3, #0]
   b7e78:	b14b      	cbz	r3, b7e8e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7e7a:	b003      	add	sp, #12
   b7e7c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7e80:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7e82:	f7ff ffe5 	bl	b7e50 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7e86:	b003      	add	sp, #12
   b7e88:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7e8c:	2300      	movs	r3, #0
   b7e8e:	9300      	str	r3, [sp, #0]
   b7e90:	461a      	mov	r2, r3
   b7e92:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7e96:	f7fe fe3b 	bl	b6b10 <system_ctrl_set_result>
}
   b7e9a:	e7f4      	b.n	b7e86 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7e9c:	2003e724 	.word	0x2003e724

000b7ea0 <module_user_init_hook>:
{
   b7ea0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7ea2:	4812      	ldr	r0, [pc, #72]	; (b7eec <module_user_init_hook+0x4c>)
   b7ea4:	2100      	movs	r1, #0
   b7ea6:	f7fe fee5 	bl	b6c74 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7eaa:	4b11      	ldr	r3, [pc, #68]	; (b7ef0 <module_user_init_hook+0x50>)
   b7eac:	681a      	ldr	r2, [r3, #0]
   b7eae:	4b11      	ldr	r3, [pc, #68]	; (b7ef4 <module_user_init_hook+0x54>)
   b7eb0:	429a      	cmp	r2, r3
   b7eb2:	4b11      	ldr	r3, [pc, #68]	; (b7ef8 <module_user_init_hook+0x58>)
   b7eb4:	bf0c      	ite	eq
   b7eb6:	2201      	moveq	r2, #1
   b7eb8:	2200      	movne	r2, #0
   b7eba:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7ebc:	d001      	beq.n	b7ec2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7ebe:	f7ff ffb1 	bl	b7e24 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7ec2:	f7fe fc2b 	bl	b671c <HAL_RNG_GetRandomNumber>
   b7ec6:	4604      	mov	r4, r0
    srand(seed);
   b7ec8:	f000 ffae 	bl	b8e28 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7ecc:	4b0b      	ldr	r3, [pc, #44]	; (b7efc <module_user_init_hook+0x5c>)
   b7ece:	b113      	cbz	r3, b7ed6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7ed0:	4620      	mov	r0, r4
   b7ed2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7ed6:	2100      	movs	r1, #0
   b7ed8:	4808      	ldr	r0, [pc, #32]	; (b7efc <module_user_init_hook+0x5c>)
   b7eda:	f7fe fe2b 	bl	b6b34 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7ee2:	4807      	ldr	r0, [pc, #28]	; (b7f00 <module_user_init_hook+0x60>)
   b7ee4:	2100      	movs	r1, #0
   b7ee6:	f7fe be09 	b.w	b6afc <system_ctrl_set_app_request_handler>
   b7eea:	bf00      	nop
   b7eec:	000b7dcd 	.word	0x000b7dcd
   b7ef0:	2003f400 	.word	0x2003f400
   b7ef4:	9a271c1e 	.word	0x9a271c1e
   b7ef8:	2003e720 	.word	0x2003e720
   b7efc:	00000000 	.word	0x00000000
   b7f00:	000b7e69 	.word	0x000b7e69

000b7f04 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7f04:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7f06:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7f08:	d902      	bls.n	b7f10 <pinAvailable+0xc>
    return false;
   b7f0a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7f0c:	b002      	add	sp, #8
   b7f0e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7f10:	f1a0 030b 	sub.w	r3, r0, #11
   b7f14:	2b02      	cmp	r3, #2
   b7f16:	d81a      	bhi.n	b7f4e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7f18:	4c17      	ldr	r4, [pc, #92]	; (b7f78 <pinAvailable+0x74>)
   b7f1a:	7821      	ldrb	r1, [r4, #0]
   b7f1c:	f3bf 8f5b 	dmb	ish
   b7f20:	f011 0101 	ands.w	r1, r1, #1
   b7f24:	d10b      	bne.n	b7f3e <pinAvailable+0x3a>
   b7f26:	4620      	mov	r0, r4
   b7f28:	9101      	str	r1, [sp, #4]
   b7f2a:	f7fc f8c7 	bl	b40bc <__cxa_guard_acquire>
   b7f2e:	9901      	ldr	r1, [sp, #4]
   b7f30:	b128      	cbz	r0, b7f3e <pinAvailable+0x3a>
   b7f32:	4812      	ldr	r0, [pc, #72]	; (b7f7c <pinAvailable+0x78>)
   b7f34:	f7ff fa58 	bl	b73e8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7f38:	4620      	mov	r0, r4
   b7f3a:	f7fc f8c4 	bl	b40c6 <__cxa_guard_release>
   b7f3e:	4b0f      	ldr	r3, [pc, #60]	; (b7f7c <pinAvailable+0x78>)
   b7f40:	7818      	ldrb	r0, [r3, #0]
   b7f42:	f7fe fd1b 	bl	b697c <hal_spi_is_enabled>
   b7f46:	2800      	cmp	r0, #0
   b7f48:	d1df      	bne.n	b7f0a <pinAvailable+0x6>
  return true; // 'pin' is available
   b7f4a:	2001      	movs	r0, #1
   b7f4c:	e7de      	b.n	b7f0c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7f4e:	2801      	cmp	r0, #1
   b7f50:	d809      	bhi.n	b7f66 <pinAvailable+0x62>
   b7f52:	f000 f8a7 	bl	b80a4 <_Z19__fetch_global_Wirev>
   b7f56:	2100      	movs	r1, #0
   b7f58:	7c00      	ldrb	r0, [r0, #16]
   b7f5a:	f7fe fc7f 	bl	b685c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7f5e:	f080 0001 	eor.w	r0, r0, #1
   b7f62:	b2c0      	uxtb	r0, r0
   b7f64:	e7d2      	b.n	b7f0c <pinAvailable+0x8>
   b7f66:	3809      	subs	r0, #9
   b7f68:	2801      	cmp	r0, #1
   b7f6a:	d8ee      	bhi.n	b7f4a <pinAvailable+0x46>
   b7f6c:	f000 f8da 	bl	b8124 <_Z22__fetch_global_Serial1v>
   b7f70:	7c00      	ldrb	r0, [r0, #16]
   b7f72:	f7fe fd53 	bl	b6a1c <hal_usart_is_enabled>
   b7f76:	e7f2      	b.n	b7f5e <pinAvailable+0x5a>
   b7f78:	2003e6b8 	.word	0x2003e6b8
   b7f7c:	2003e6bc 	.word	0x2003e6bc

000b7f80 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7f80:	2823      	cmp	r0, #35	; 0x23
{
   b7f82:	b538      	push	{r3, r4, r5, lr}
   b7f84:	4604      	mov	r4, r0
   b7f86:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7f88:	d80a      	bhi.n	b7fa0 <pinMode+0x20>
   b7f8a:	29ff      	cmp	r1, #255	; 0xff
   b7f8c:	d008      	beq.n	b7fa0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7f8e:	f7ff ffb9 	bl	b7f04 <pinAvailable>
   b7f92:	b128      	cbz	r0, b7fa0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7f94:	4629      	mov	r1, r5
   b7f96:	4620      	mov	r0, r4
}
   b7f98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7f9c:	f7fe bbde 	b.w	b675c <HAL_Pin_Mode>
}
   b7fa0:	bd38      	pop	{r3, r4, r5, pc}

000b7fa2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b7fa2:	b538      	push	{r3, r4, r5, lr}
   b7fa4:	4604      	mov	r4, r0
   b7fa6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7fa8:	f7fe fbe0 	bl	b676c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7fac:	28ff      	cmp	r0, #255	; 0xff
   b7fae:	d010      	beq.n	b7fd2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7fb0:	2806      	cmp	r0, #6
   b7fb2:	d804      	bhi.n	b7fbe <digitalWrite+0x1c>
   b7fb4:	234d      	movs	r3, #77	; 0x4d
   b7fb6:	fa23 f000 	lsr.w	r0, r3, r0
   b7fba:	07c3      	lsls	r3, r0, #31
   b7fbc:	d409      	bmi.n	b7fd2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7fbe:	4620      	mov	r0, r4
   b7fc0:	f7ff ffa0 	bl	b7f04 <pinAvailable>
   b7fc4:	b128      	cbz	r0, b7fd2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b7fc6:	4629      	mov	r1, r5
   b7fc8:	4620      	mov	r0, r4
}
   b7fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b7fce:	f7fe bbd5 	b.w	b677c <HAL_GPIO_Write>
}
   b7fd2:	bd38      	pop	{r3, r4, r5, pc}

000b7fd4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b7fd4:	b510      	push	{r4, lr}
   b7fd6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7fd8:	f7fe fbc8 	bl	b676c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7fdc:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b7fde:	b2db      	uxtb	r3, r3
   b7fe0:	2b01      	cmp	r3, #1
   b7fe2:	d908      	bls.n	b7ff6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7fe4:	4620      	mov	r0, r4
   b7fe6:	f7ff ff8d 	bl	b7f04 <pinAvailable>
   b7fea:	b120      	cbz	r0, b7ff6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b7fec:	4620      	mov	r0, r4
}
   b7fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b7ff2:	f7fe bbcb 	b.w	b678c <HAL_GPIO_Read>
}
   b7ff6:	2000      	movs	r0, #0
   b7ff8:	bd10      	pop	{r4, pc}

000b7ffa <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b7ffa:	280d      	cmp	r0, #13
{
   b7ffc:	b510      	push	{r4, lr}
   b7ffe:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b8000:	bf9c      	itt	ls
   b8002:	340e      	addls	r4, #14
   b8004:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b8006:	4620      	mov	r0, r4
   b8008:	f7ff ff7c 	bl	b7f04 <pinAvailable>
   b800c:	b150      	cbz	r0, b8024 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b800e:	2103      	movs	r1, #3
   b8010:	4620      	mov	r0, r4
   b8012:	f7fe fb9b 	bl	b674c <HAL_Validate_Pin_Function>
   b8016:	2803      	cmp	r0, #3
   b8018:	d104      	bne.n	b8024 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b801a:	4620      	mov	r0, r4
}
   b801c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b8020:	f7fe bbc4 	b.w	b67ac <hal_adc_read>
}
   b8024:	2000      	movs	r0, #0
   b8026:	bd10      	pop	{r4, pc}

000b8028 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   b8028:	b538      	push	{r3, r4, r5, lr}
   b802a:	4604      	mov	r4, r0
   b802c:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b802e:	f7ff ff69 	bl	b7f04 <pinAvailable>
   b8032:	b1f0      	cbz	r0, b8072 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   b8034:	2104      	movs	r1, #4
   b8036:	4620      	mov	r0, r4
   b8038:	f7fe fb88 	bl	b674c <HAL_Validate_Pin_Function>
   b803c:	2804      	cmp	r0, #4
   b803e:	d105      	bne.n	b804c <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b8040:	b2a9      	uxth	r1, r5
   b8042:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b8044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b8048:	f7fe bba8 	b.w	b679c <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   b804c:	2102      	movs	r1, #2
   b804e:	4620      	mov	r0, r4
   b8050:	f7fe fb7c 	bl	b674c <HAL_Validate_Pin_Function>
   b8054:	2802      	cmp	r0, #2
   b8056:	d10c      	bne.n	b8072 <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   b8058:	4620      	mov	r0, r4
   b805a:	f7fe fb87 	bl	b676c <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b805e:	2801      	cmp	r0, #1
   b8060:	d001      	beq.n	b8066 <_Z11analogWritetm+0x3e>
   b8062:	2804      	cmp	r0, #4
   b8064:	d105      	bne.n	b8072 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b8066:	4629      	mov	r1, r5
   b8068:	4620      	mov	r0, r4
}
   b806a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b806e:	f7fe bba5 	b.w	b67bc <hal_pwm_write_ext>
}
   b8072:	bd38      	pop	{r3, r4, r5, pc}

000b8074 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8074:	4770      	bx	lr
	...

000b8078 <_Z17acquireWireBufferv>:
{
   b8078:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b807a:	2520      	movs	r5, #32
   b807c:	2314      	movs	r3, #20
{
   b807e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b8080:	6003      	str	r3, [r0, #0]
   b8082:	6085      	str	r5, [r0, #8]
   b8084:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8086:	4906      	ldr	r1, [pc, #24]	; (b80a0 <_Z17acquireWireBufferv+0x28>)
   b8088:	4628      	mov	r0, r5
   b808a:	f000 f86f 	bl	b816c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b808e:	4904      	ldr	r1, [pc, #16]	; (b80a0 <_Z17acquireWireBufferv+0x28>)
	};
   b8090:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8092:	4628      	mov	r0, r5
   b8094:	f000 f86a 	bl	b816c <_ZnajRKSt9nothrow_t>
	};
   b8098:	60e0      	str	r0, [r4, #12]
}
   b809a:	4620      	mov	r0, r4
   b809c:	bd38      	pop	{r3, r4, r5, pc}
   b809e:	bf00      	nop
   b80a0:	000bc10c 	.word	0x000bc10c

000b80a4 <_Z19__fetch_global_Wirev>:
{
   b80a4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b80a6:	4d0e      	ldr	r5, [pc, #56]	; (b80e0 <_Z19__fetch_global_Wirev+0x3c>)
   b80a8:	7829      	ldrb	r1, [r5, #0]
   b80aa:	f3bf 8f5b 	dmb	ish
   b80ae:	f011 0401 	ands.w	r4, r1, #1
{
   b80b2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b80b4:	d111      	bne.n	b80da <_Z19__fetch_global_Wirev+0x36>
   b80b6:	4628      	mov	r0, r5
   b80b8:	f7fc f800 	bl	b40bc <__cxa_guard_acquire>
   b80bc:	b168      	cbz	r0, b80da <_Z19__fetch_global_Wirev+0x36>
   b80be:	a801      	add	r0, sp, #4
   b80c0:	f7ff ffda 	bl	b8078 <_Z17acquireWireBufferv>
   b80c4:	aa01      	add	r2, sp, #4
   b80c6:	4621      	mov	r1, r4
   b80c8:	4806      	ldr	r0, [pc, #24]	; (b80e4 <_Z19__fetch_global_Wirev+0x40>)
   b80ca:	f7fe fe5d 	bl	b6d88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b80ce:	4628      	mov	r0, r5
   b80d0:	f7fb fff9 	bl	b40c6 <__cxa_guard_release>
   b80d4:	4804      	ldr	r0, [pc, #16]	; (b80e8 <_Z19__fetch_global_Wirev+0x44>)
   b80d6:	f000 fe7f 	bl	b8dd8 <atexit>
	return wire;
}
   b80da:	4802      	ldr	r0, [pc, #8]	; (b80e4 <_Z19__fetch_global_Wirev+0x40>)
   b80dc:	b007      	add	sp, #28
   b80de:	bd30      	pop	{r4, r5, pc}
   b80e0:	2003e72c 	.word	0x2003e72c
   b80e4:	2003e730 	.word	0x2003e730
   b80e8:	000b8075 	.word	0x000b8075

000b80ec <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b80ec:	4770      	bx	lr
	...

000b80f0 <_Z20acquireSerial1Bufferv>:
{
   b80f0:	b538      	push	{r3, r4, r5, lr}
   b80f2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b80f4:	2514      	movs	r5, #20
   b80f6:	462a      	mov	r2, r5
   b80f8:	2100      	movs	r1, #0
   b80fa:	f000 fe8c 	bl	b8e16 <memset>
   b80fe:	8025      	strh	r5, [r4, #0]
   b8100:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8102:	4907      	ldr	r1, [pc, #28]	; (b8120 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8104:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8106:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8108:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b810a:	f000 f82f 	bl	b816c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b810e:	4904      	ldr	r1, [pc, #16]	; (b8120 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8110:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8112:	4628      	mov	r0, r5
   b8114:	f000 f82a 	bl	b816c <_ZnajRKSt9nothrow_t>
    };
   b8118:	60e0      	str	r0, [r4, #12]
}
   b811a:	4620      	mov	r0, r4
   b811c:	bd38      	pop	{r3, r4, r5, pc}
   b811e:	bf00      	nop
   b8120:	000bc10c 	.word	0x000bc10c

000b8124 <_Z22__fetch_global_Serial1v>:
{
   b8124:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8126:	4d0e      	ldr	r5, [pc, #56]	; (b8160 <_Z22__fetch_global_Serial1v+0x3c>)
   b8128:	7829      	ldrb	r1, [r5, #0]
   b812a:	f3bf 8f5b 	dmb	ish
   b812e:	f011 0401 	ands.w	r4, r1, #1
{
   b8132:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8134:	d111      	bne.n	b815a <_Z22__fetch_global_Serial1v+0x36>
   b8136:	4628      	mov	r0, r5
   b8138:	f7fb ffc0 	bl	b40bc <__cxa_guard_acquire>
   b813c:	b168      	cbz	r0, b815a <_Z22__fetch_global_Serial1v+0x36>
   b813e:	a801      	add	r0, sp, #4
   b8140:	f7ff ffd6 	bl	b80f0 <_Z20acquireSerial1Bufferv>
   b8144:	aa01      	add	r2, sp, #4
   b8146:	4621      	mov	r1, r4
   b8148:	4806      	ldr	r0, [pc, #24]	; (b8164 <_Z22__fetch_global_Serial1v+0x40>)
   b814a:	f7ff fd6d 	bl	b7c28 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b814e:	4628      	mov	r0, r5
   b8150:	f7fb ffb9 	bl	b40c6 <__cxa_guard_release>
   b8154:	4804      	ldr	r0, [pc, #16]	; (b8168 <_Z22__fetch_global_Serial1v+0x44>)
   b8156:	f000 fe3f 	bl	b8dd8 <atexit>
    return serial1;
}
   b815a:	4802      	ldr	r0, [pc, #8]	; (b8164 <_Z22__fetch_global_Serial1v+0x40>)
   b815c:	b007      	add	sp, #28
   b815e:	bd30      	pop	{r4, r5, pc}
   b8160:	2003e744 	.word	0x2003e744
   b8164:	2003e748 	.word	0x2003e748
   b8168:	000b80ed 	.word	0x000b80ed

000b816c <_ZnajRKSt9nothrow_t>:
   b816c:	f7fb bf95 	b.w	b409a <_Znaj>

000b8170 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b8170:	4901      	ldr	r1, [pc, #4]	; (b8178 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b8172:	f000 b8f9 	b.w	b8368 <_ZNKSt9type_infoeqERKS_>
   b8176:	bf00      	nop
   b8178:	000bc128 	.word	0x000bc128

000b817c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b817c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b817e:	2400      	movs	r4, #0
   b8180:	2310      	movs	r3, #16
   b8182:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b8186:	6803      	ldr	r3, [r0, #0]
   b8188:	4615      	mov	r5, r2
   b818a:	699e      	ldr	r6, [r3, #24]
   b818c:	6812      	ldr	r2, [r2, #0]
   b818e:	466b      	mov	r3, sp
   b8190:	e9cd 4400 	strd	r4, r4, [sp]
   b8194:	47b0      	blx	r6
   b8196:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b819a:	f003 0306 	and.w	r3, r3, #6
   b819e:	2b06      	cmp	r3, #6
   b81a0:	bf03      	ittte	eq
   b81a2:	9b00      	ldreq	r3, [sp, #0]
   b81a4:	602b      	streq	r3, [r5, #0]
   b81a6:	2001      	moveq	r0, #1
   b81a8:	4620      	movne	r0, r4
   b81aa:	b004      	add	sp, #16
   b81ac:	bd70      	pop	{r4, r5, r6, pc}

000b81ae <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b81ae:	9800      	ldr	r0, [sp, #0]
   b81b0:	4290      	cmp	r0, r2
   b81b2:	bf14      	ite	ne
   b81b4:	2001      	movne	r0, #1
   b81b6:	2006      	moveq	r0, #6
   b81b8:	4770      	bx	lr
	...

000b81bc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b81bc:	b510      	push	{r4, lr}
   b81be:	4b03      	ldr	r3, [pc, #12]	; (b81cc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b81c0:	6003      	str	r3, [r0, #0]
   b81c2:	4604      	mov	r4, r0
   b81c4:	f000 f8cd 	bl	b8362 <_ZNSt9type_infoD1Ev>
   b81c8:	4620      	mov	r0, r4
   b81ca:	bd10      	pop	{r4, pc}
   b81cc:	000bc168 	.word	0x000bc168

000b81d0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b81d0:	b510      	push	{r4, lr}
   b81d2:	4604      	mov	r4, r0
   b81d4:	f7ff fff2 	bl	b81bc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b81d8:	4620      	mov	r0, r4
   b81da:	2108      	movs	r1, #8
   b81dc:	f7fb ff5f 	bl	b409e <_ZdlPvj>
   b81e0:	4620      	mov	r0, r4
   b81e2:	bd10      	pop	{r4, pc}

000b81e4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b81e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b81e8:	461f      	mov	r7, r3
   b81ea:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b81ee:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b81f2:	4598      	cmp	r8, r3
   b81f4:	4606      	mov	r6, r0
   b81f6:	4615      	mov	r5, r2
   b81f8:	d107      	bne.n	b820a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b81fa:	9907      	ldr	r1, [sp, #28]
   b81fc:	f000 f8b4 	bl	b8368 <_ZNKSt9type_infoeqERKS_>
   b8200:	b118      	cbz	r0, b820a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8202:	7165      	strb	r5, [r4, #5]
   b8204:	2000      	movs	r0, #0
   b8206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b820a:	4639      	mov	r1, r7
   b820c:	4630      	mov	r0, r6
   b820e:	f000 f8ab 	bl	b8368 <_ZNKSt9type_infoeqERKS_>
   b8212:	2800      	cmp	r0, #0
   b8214:	d0f6      	beq.n	b8204 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b8216:	2301      	movs	r3, #1
   b8218:	f8c4 8000 	str.w	r8, [r4]
   b821c:	7125      	strb	r5, [r4, #4]
   b821e:	71a3      	strb	r3, [r4, #6]
   b8220:	e7f0      	b.n	b8204 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b8222 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b8222:	b538      	push	{r3, r4, r5, lr}
   b8224:	4615      	mov	r5, r2
   b8226:	461c      	mov	r4, r3
   b8228:	f000 f89e 	bl	b8368 <_ZNKSt9type_infoeqERKS_>
   b822c:	b120      	cbz	r0, b8238 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b822e:	2308      	movs	r3, #8
   b8230:	60e3      	str	r3, [r4, #12]
   b8232:	2306      	movs	r3, #6
   b8234:	6025      	str	r5, [r4, #0]
   b8236:	7123      	strb	r3, [r4, #4]
   b8238:	bd38      	pop	{r3, r4, r5, pc}

000b823a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b823a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b823c:	4605      	mov	r5, r0
   b823e:	460c      	mov	r4, r1
   b8240:	9201      	str	r2, [sp, #4]
   b8242:	461e      	mov	r6, r3
   b8244:	f000 f890 	bl	b8368 <_ZNKSt9type_infoeqERKS_>
   b8248:	b950      	cbnz	r0, b8260 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b824a:	2e03      	cmp	r6, #3
   b824c:	d808      	bhi.n	b8260 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b824e:	6823      	ldr	r3, [r4, #0]
   b8250:	9a01      	ldr	r2, [sp, #4]
   b8252:	695b      	ldr	r3, [r3, #20]
   b8254:	4629      	mov	r1, r5
   b8256:	4620      	mov	r0, r4
   b8258:	b002      	add	sp, #8
   b825a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b825e:	4718      	bx	r3
   b8260:	b002      	add	sp, #8
   b8262:	bd70      	pop	{r4, r5, r6, pc}

000b8264 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b8264:	b510      	push	{r4, lr}
   b8266:	4b03      	ldr	r3, [pc, #12]	; (b8274 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b8268:	6003      	str	r3, [r0, #0]
   b826a:	4604      	mov	r4, r0
   b826c:	f7ff ffa6 	bl	b81bc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8270:	4620      	mov	r0, r4
   b8272:	bd10      	pop	{r4, pc}
   b8274:	000bc1c8 	.word	0x000bc1c8

000b8278 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b8278:	b510      	push	{r4, lr}
   b827a:	4604      	mov	r4, r0
   b827c:	f7ff fff2 	bl	b8264 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b8280:	4620      	mov	r0, r4
   b8282:	210c      	movs	r1, #12
   b8284:	f7fb ff0b 	bl	b409e <_ZdlPvj>
   b8288:	4620      	mov	r0, r4
   b828a:	bd10      	pop	{r4, pc}

000b828c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b828c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b828e:	9f08      	ldr	r7, [sp, #32]
   b8290:	4297      	cmp	r7, r2
   b8292:	4605      	mov	r5, r0
   b8294:	460e      	mov	r6, r1
   b8296:	4614      	mov	r4, r2
   b8298:	d00a      	beq.n	b82b0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b829a:	68a8      	ldr	r0, [r5, #8]
   b829c:	6802      	ldr	r2, [r0, #0]
   b829e:	9708      	str	r7, [sp, #32]
   b82a0:	6a15      	ldr	r5, [r2, #32]
   b82a2:	4631      	mov	r1, r6
   b82a4:	4622      	mov	r2, r4
   b82a6:	46ac      	mov	ip, r5
   b82a8:	b003      	add	sp, #12
   b82aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b82ae:	4760      	bx	ip
   b82b0:	4619      	mov	r1, r3
   b82b2:	9301      	str	r3, [sp, #4]
   b82b4:	f000 f858 	bl	b8368 <_ZNKSt9type_infoeqERKS_>
   b82b8:	9b01      	ldr	r3, [sp, #4]
   b82ba:	2800      	cmp	r0, #0
   b82bc:	d0ed      	beq.n	b829a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b82be:	2006      	movs	r0, #6
   b82c0:	b003      	add	sp, #12
   b82c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b82c4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b82c4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b82c8:	460d      	mov	r5, r1
   b82ca:	4619      	mov	r1, r3
   b82cc:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b82d0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b82d4:	4681      	mov	r9, r0
   b82d6:	4617      	mov	r7, r2
   b82d8:	4698      	mov	r8, r3
   b82da:	f000 f845 	bl	b8368 <_ZNKSt9type_infoeqERKS_>
   b82de:	b190      	cbz	r0, b8306 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b82e0:	2d00      	cmp	r5, #0
   b82e2:	6034      	str	r4, [r6, #0]
   b82e4:	7137      	strb	r7, [r6, #4]
   b82e6:	db09      	blt.n	b82fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b82e8:	1961      	adds	r1, r4, r5
   b82ea:	458a      	cmp	sl, r1
   b82ec:	bf0c      	ite	eq
   b82ee:	2106      	moveq	r1, #6
   b82f0:	2101      	movne	r1, #1
   b82f2:	71b1      	strb	r1, [r6, #6]
   b82f4:	2000      	movs	r0, #0
   b82f6:	b001      	add	sp, #4
   b82f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b82fc:	3502      	adds	r5, #2
   b82fe:	d1f9      	bne.n	b82f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8300:	2301      	movs	r3, #1
   b8302:	71b3      	strb	r3, [r6, #6]
   b8304:	e7f6      	b.n	b82f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8306:	4554      	cmp	r4, sl
   b8308:	d106      	bne.n	b8318 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b830a:	4659      	mov	r1, fp
   b830c:	4648      	mov	r0, r9
   b830e:	f000 f82b 	bl	b8368 <_ZNKSt9type_infoeqERKS_>
   b8312:	b108      	cbz	r0, b8318 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8314:	7177      	strb	r7, [r6, #5]
   b8316:	e7ed      	b.n	b82f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8318:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b831c:	6803      	ldr	r3, [r0, #0]
   b831e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b8322:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b8326:	69dc      	ldr	r4, [r3, #28]
   b8328:	463a      	mov	r2, r7
   b832a:	4643      	mov	r3, r8
   b832c:	4629      	mov	r1, r5
   b832e:	46a4      	mov	ip, r4
   b8330:	b001      	add	sp, #4
   b8332:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8336:	4760      	bx	ip

000b8338 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b8338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b833c:	4607      	mov	r7, r0
   b833e:	460c      	mov	r4, r1
   b8340:	4615      	mov	r5, r2
   b8342:	461e      	mov	r6, r3
   b8344:	f7ff ff6d 	bl	b8222 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b8348:	b948      	cbnz	r0, b835e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b834a:	68b8      	ldr	r0, [r7, #8]
   b834c:	6803      	ldr	r3, [r0, #0]
   b834e:	699f      	ldr	r7, [r3, #24]
   b8350:	462a      	mov	r2, r5
   b8352:	4633      	mov	r3, r6
   b8354:	4621      	mov	r1, r4
   b8356:	46bc      	mov	ip, r7
   b8358:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b835c:	4760      	bx	ip
   b835e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8362 <_ZNSt9type_infoD1Ev>:
   b8362:	4770      	bx	lr

000b8364 <_ZNKSt9type_info14__is_pointer_pEv>:
   b8364:	2000      	movs	r0, #0
   b8366:	4770      	bx	lr

000b8368 <_ZNKSt9type_infoeqERKS_>:
   b8368:	4281      	cmp	r1, r0
   b836a:	b508      	push	{r3, lr}
   b836c:	d00e      	beq.n	b838c <_ZNKSt9type_infoeqERKS_+0x24>
   b836e:	6840      	ldr	r0, [r0, #4]
   b8370:	7803      	ldrb	r3, [r0, #0]
   b8372:	2b2a      	cmp	r3, #42	; 0x2a
   b8374:	d00c      	beq.n	b8390 <_ZNKSt9type_infoeqERKS_+0x28>
   b8376:	6849      	ldr	r1, [r1, #4]
   b8378:	780b      	ldrb	r3, [r1, #0]
   b837a:	2b2a      	cmp	r3, #42	; 0x2a
   b837c:	bf08      	it	eq
   b837e:	3101      	addeq	r1, #1
   b8380:	f000 fd80 	bl	b8e84 <strcmp>
   b8384:	fab0 f080 	clz	r0, r0
   b8388:	0940      	lsrs	r0, r0, #5
   b838a:	bd08      	pop	{r3, pc}
   b838c:	2001      	movs	r0, #1
   b838e:	e7fc      	b.n	b838a <_ZNKSt9type_infoeqERKS_+0x22>
   b8390:	2000      	movs	r0, #0
   b8392:	e7fa      	b.n	b838a <_ZNKSt9type_infoeqERKS_+0x22>

000b8394 <__aeabi_drsub>:
   b8394:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b8398:	e002      	b.n	b83a0 <__adddf3>
   b839a:	bf00      	nop

000b839c <__aeabi_dsub>:
   b839c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b83a0 <__adddf3>:
   b83a0:	b530      	push	{r4, r5, lr}
   b83a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b83a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b83aa:	ea94 0f05 	teq	r4, r5
   b83ae:	bf08      	it	eq
   b83b0:	ea90 0f02 	teqeq	r0, r2
   b83b4:	bf1f      	itttt	ne
   b83b6:	ea54 0c00 	orrsne.w	ip, r4, r0
   b83ba:	ea55 0c02 	orrsne.w	ip, r5, r2
   b83be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b83c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b83c6:	f000 80e2 	beq.w	b858e <__adddf3+0x1ee>
   b83ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b83ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b83d2:	bfb8      	it	lt
   b83d4:	426d      	neglt	r5, r5
   b83d6:	dd0c      	ble.n	b83f2 <__adddf3+0x52>
   b83d8:	442c      	add	r4, r5
   b83da:	ea80 0202 	eor.w	r2, r0, r2
   b83de:	ea81 0303 	eor.w	r3, r1, r3
   b83e2:	ea82 0000 	eor.w	r0, r2, r0
   b83e6:	ea83 0101 	eor.w	r1, r3, r1
   b83ea:	ea80 0202 	eor.w	r2, r0, r2
   b83ee:	ea81 0303 	eor.w	r3, r1, r3
   b83f2:	2d36      	cmp	r5, #54	; 0x36
   b83f4:	bf88      	it	hi
   b83f6:	bd30      	pophi	{r4, r5, pc}
   b83f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b83fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8400:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b8404:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b8408:	d002      	beq.n	b8410 <__adddf3+0x70>
   b840a:	4240      	negs	r0, r0
   b840c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8410:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b8414:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8418:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b841c:	d002      	beq.n	b8424 <__adddf3+0x84>
   b841e:	4252      	negs	r2, r2
   b8420:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b8424:	ea94 0f05 	teq	r4, r5
   b8428:	f000 80a7 	beq.w	b857a <__adddf3+0x1da>
   b842c:	f1a4 0401 	sub.w	r4, r4, #1
   b8430:	f1d5 0e20 	rsbs	lr, r5, #32
   b8434:	db0d      	blt.n	b8452 <__adddf3+0xb2>
   b8436:	fa02 fc0e 	lsl.w	ip, r2, lr
   b843a:	fa22 f205 	lsr.w	r2, r2, r5
   b843e:	1880      	adds	r0, r0, r2
   b8440:	f141 0100 	adc.w	r1, r1, #0
   b8444:	fa03 f20e 	lsl.w	r2, r3, lr
   b8448:	1880      	adds	r0, r0, r2
   b844a:	fa43 f305 	asr.w	r3, r3, r5
   b844e:	4159      	adcs	r1, r3
   b8450:	e00e      	b.n	b8470 <__adddf3+0xd0>
   b8452:	f1a5 0520 	sub.w	r5, r5, #32
   b8456:	f10e 0e20 	add.w	lr, lr, #32
   b845a:	2a01      	cmp	r2, #1
   b845c:	fa03 fc0e 	lsl.w	ip, r3, lr
   b8460:	bf28      	it	cs
   b8462:	f04c 0c02 	orrcs.w	ip, ip, #2
   b8466:	fa43 f305 	asr.w	r3, r3, r5
   b846a:	18c0      	adds	r0, r0, r3
   b846c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b8470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8474:	d507      	bpl.n	b8486 <__adddf3+0xe6>
   b8476:	f04f 0e00 	mov.w	lr, #0
   b847a:	f1dc 0c00 	rsbs	ip, ip, #0
   b847e:	eb7e 0000 	sbcs.w	r0, lr, r0
   b8482:	eb6e 0101 	sbc.w	r1, lr, r1
   b8486:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b848a:	d31b      	bcc.n	b84c4 <__adddf3+0x124>
   b848c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b8490:	d30c      	bcc.n	b84ac <__adddf3+0x10c>
   b8492:	0849      	lsrs	r1, r1, #1
   b8494:	ea5f 0030 	movs.w	r0, r0, rrx
   b8498:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b849c:	f104 0401 	add.w	r4, r4, #1
   b84a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b84a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b84a8:	f080 809a 	bcs.w	b85e0 <__adddf3+0x240>
   b84ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b84b0:	bf08      	it	eq
   b84b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b84b6:	f150 0000 	adcs.w	r0, r0, #0
   b84ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b84be:	ea41 0105 	orr.w	r1, r1, r5
   b84c2:	bd30      	pop	{r4, r5, pc}
   b84c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b84c8:	4140      	adcs	r0, r0
   b84ca:	eb41 0101 	adc.w	r1, r1, r1
   b84ce:	3c01      	subs	r4, #1
   b84d0:	bf28      	it	cs
   b84d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b84d6:	d2e9      	bcs.n	b84ac <__adddf3+0x10c>
   b84d8:	f091 0f00 	teq	r1, #0
   b84dc:	bf04      	itt	eq
   b84de:	4601      	moveq	r1, r0
   b84e0:	2000      	moveq	r0, #0
   b84e2:	fab1 f381 	clz	r3, r1
   b84e6:	bf08      	it	eq
   b84e8:	3320      	addeq	r3, #32
   b84ea:	f1a3 030b 	sub.w	r3, r3, #11
   b84ee:	f1b3 0220 	subs.w	r2, r3, #32
   b84f2:	da0c      	bge.n	b850e <__adddf3+0x16e>
   b84f4:	320c      	adds	r2, #12
   b84f6:	dd08      	ble.n	b850a <__adddf3+0x16a>
   b84f8:	f102 0c14 	add.w	ip, r2, #20
   b84fc:	f1c2 020c 	rsb	r2, r2, #12
   b8500:	fa01 f00c 	lsl.w	r0, r1, ip
   b8504:	fa21 f102 	lsr.w	r1, r1, r2
   b8508:	e00c      	b.n	b8524 <__adddf3+0x184>
   b850a:	f102 0214 	add.w	r2, r2, #20
   b850e:	bfd8      	it	le
   b8510:	f1c2 0c20 	rsble	ip, r2, #32
   b8514:	fa01 f102 	lsl.w	r1, r1, r2
   b8518:	fa20 fc0c 	lsr.w	ip, r0, ip
   b851c:	bfdc      	itt	le
   b851e:	ea41 010c 	orrle.w	r1, r1, ip
   b8522:	4090      	lslle	r0, r2
   b8524:	1ae4      	subs	r4, r4, r3
   b8526:	bfa2      	ittt	ge
   b8528:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b852c:	4329      	orrge	r1, r5
   b852e:	bd30      	popge	{r4, r5, pc}
   b8530:	ea6f 0404 	mvn.w	r4, r4
   b8534:	3c1f      	subs	r4, #31
   b8536:	da1c      	bge.n	b8572 <__adddf3+0x1d2>
   b8538:	340c      	adds	r4, #12
   b853a:	dc0e      	bgt.n	b855a <__adddf3+0x1ba>
   b853c:	f104 0414 	add.w	r4, r4, #20
   b8540:	f1c4 0220 	rsb	r2, r4, #32
   b8544:	fa20 f004 	lsr.w	r0, r0, r4
   b8548:	fa01 f302 	lsl.w	r3, r1, r2
   b854c:	ea40 0003 	orr.w	r0, r0, r3
   b8550:	fa21 f304 	lsr.w	r3, r1, r4
   b8554:	ea45 0103 	orr.w	r1, r5, r3
   b8558:	bd30      	pop	{r4, r5, pc}
   b855a:	f1c4 040c 	rsb	r4, r4, #12
   b855e:	f1c4 0220 	rsb	r2, r4, #32
   b8562:	fa20 f002 	lsr.w	r0, r0, r2
   b8566:	fa01 f304 	lsl.w	r3, r1, r4
   b856a:	ea40 0003 	orr.w	r0, r0, r3
   b856e:	4629      	mov	r1, r5
   b8570:	bd30      	pop	{r4, r5, pc}
   b8572:	fa21 f004 	lsr.w	r0, r1, r4
   b8576:	4629      	mov	r1, r5
   b8578:	bd30      	pop	{r4, r5, pc}
   b857a:	f094 0f00 	teq	r4, #0
   b857e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b8582:	bf06      	itte	eq
   b8584:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b8588:	3401      	addeq	r4, #1
   b858a:	3d01      	subne	r5, #1
   b858c:	e74e      	b.n	b842c <__adddf3+0x8c>
   b858e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b8592:	bf18      	it	ne
   b8594:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8598:	d029      	beq.n	b85ee <__adddf3+0x24e>
   b859a:	ea94 0f05 	teq	r4, r5
   b859e:	bf08      	it	eq
   b85a0:	ea90 0f02 	teqeq	r0, r2
   b85a4:	d005      	beq.n	b85b2 <__adddf3+0x212>
   b85a6:	ea54 0c00 	orrs.w	ip, r4, r0
   b85aa:	bf04      	itt	eq
   b85ac:	4619      	moveq	r1, r3
   b85ae:	4610      	moveq	r0, r2
   b85b0:	bd30      	pop	{r4, r5, pc}
   b85b2:	ea91 0f03 	teq	r1, r3
   b85b6:	bf1e      	ittt	ne
   b85b8:	2100      	movne	r1, #0
   b85ba:	2000      	movne	r0, #0
   b85bc:	bd30      	popne	{r4, r5, pc}
   b85be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b85c2:	d105      	bne.n	b85d0 <__adddf3+0x230>
   b85c4:	0040      	lsls	r0, r0, #1
   b85c6:	4149      	adcs	r1, r1
   b85c8:	bf28      	it	cs
   b85ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b85ce:	bd30      	pop	{r4, r5, pc}
   b85d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b85d4:	bf3c      	itt	cc
   b85d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b85da:	bd30      	popcc	{r4, r5, pc}
   b85dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b85e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b85e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b85e8:	f04f 0000 	mov.w	r0, #0
   b85ec:	bd30      	pop	{r4, r5, pc}
   b85ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b85f2:	bf1a      	itte	ne
   b85f4:	4619      	movne	r1, r3
   b85f6:	4610      	movne	r0, r2
   b85f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b85fc:	bf1c      	itt	ne
   b85fe:	460b      	movne	r3, r1
   b8600:	4602      	movne	r2, r0
   b8602:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8606:	bf06      	itte	eq
   b8608:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b860c:	ea91 0f03 	teqeq	r1, r3
   b8610:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b8614:	bd30      	pop	{r4, r5, pc}
   b8616:	bf00      	nop

000b8618 <__aeabi_ui2d>:
   b8618:	f090 0f00 	teq	r0, #0
   b861c:	bf04      	itt	eq
   b861e:	2100      	moveq	r1, #0
   b8620:	4770      	bxeq	lr
   b8622:	b530      	push	{r4, r5, lr}
   b8624:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8628:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b862c:	f04f 0500 	mov.w	r5, #0
   b8630:	f04f 0100 	mov.w	r1, #0
   b8634:	e750      	b.n	b84d8 <__adddf3+0x138>
   b8636:	bf00      	nop

000b8638 <__aeabi_i2d>:
   b8638:	f090 0f00 	teq	r0, #0
   b863c:	bf04      	itt	eq
   b863e:	2100      	moveq	r1, #0
   b8640:	4770      	bxeq	lr
   b8642:	b530      	push	{r4, r5, lr}
   b8644:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8648:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b864c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b8650:	bf48      	it	mi
   b8652:	4240      	negmi	r0, r0
   b8654:	f04f 0100 	mov.w	r1, #0
   b8658:	e73e      	b.n	b84d8 <__adddf3+0x138>
   b865a:	bf00      	nop

000b865c <__aeabi_f2d>:
   b865c:	0042      	lsls	r2, r0, #1
   b865e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b8662:	ea4f 0131 	mov.w	r1, r1, rrx
   b8666:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b866a:	bf1f      	itttt	ne
   b866c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b8670:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b8674:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b8678:	4770      	bxne	lr
   b867a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b867e:	bf08      	it	eq
   b8680:	4770      	bxeq	lr
   b8682:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b8686:	bf04      	itt	eq
   b8688:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b868c:	4770      	bxeq	lr
   b868e:	b530      	push	{r4, r5, lr}
   b8690:	f44f 7460 	mov.w	r4, #896	; 0x380
   b8694:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b869c:	e71c      	b.n	b84d8 <__adddf3+0x138>
   b869e:	bf00      	nop

000b86a0 <__aeabi_ul2d>:
   b86a0:	ea50 0201 	orrs.w	r2, r0, r1
   b86a4:	bf08      	it	eq
   b86a6:	4770      	bxeq	lr
   b86a8:	b530      	push	{r4, r5, lr}
   b86aa:	f04f 0500 	mov.w	r5, #0
   b86ae:	e00a      	b.n	b86c6 <__aeabi_l2d+0x16>

000b86b0 <__aeabi_l2d>:
   b86b0:	ea50 0201 	orrs.w	r2, r0, r1
   b86b4:	bf08      	it	eq
   b86b6:	4770      	bxeq	lr
   b86b8:	b530      	push	{r4, r5, lr}
   b86ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b86be:	d502      	bpl.n	b86c6 <__aeabi_l2d+0x16>
   b86c0:	4240      	negs	r0, r0
   b86c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b86c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b86ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b86ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b86d2:	f43f aed8 	beq.w	b8486 <__adddf3+0xe6>
   b86d6:	f04f 0203 	mov.w	r2, #3
   b86da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b86de:	bf18      	it	ne
   b86e0:	3203      	addne	r2, #3
   b86e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b86e6:	bf18      	it	ne
   b86e8:	3203      	addne	r2, #3
   b86ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b86ee:	f1c2 0320 	rsb	r3, r2, #32
   b86f2:	fa00 fc03 	lsl.w	ip, r0, r3
   b86f6:	fa20 f002 	lsr.w	r0, r0, r2
   b86fa:	fa01 fe03 	lsl.w	lr, r1, r3
   b86fe:	ea40 000e 	orr.w	r0, r0, lr
   b8702:	fa21 f102 	lsr.w	r1, r1, r2
   b8706:	4414      	add	r4, r2
   b8708:	e6bd      	b.n	b8486 <__adddf3+0xe6>
   b870a:	bf00      	nop

000b870c <__aeabi_dmul>:
   b870c:	b570      	push	{r4, r5, r6, lr}
   b870e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b8712:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b8716:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b871a:	bf1d      	ittte	ne
   b871c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8720:	ea94 0f0c 	teqne	r4, ip
   b8724:	ea95 0f0c 	teqne	r5, ip
   b8728:	f000 f8de 	bleq	b88e8 <__aeabi_dmul+0x1dc>
   b872c:	442c      	add	r4, r5
   b872e:	ea81 0603 	eor.w	r6, r1, r3
   b8732:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b8736:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b873a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b873e:	bf18      	it	ne
   b8740:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b8744:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8748:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b874c:	d038      	beq.n	b87c0 <__aeabi_dmul+0xb4>
   b874e:	fba0 ce02 	umull	ip, lr, r0, r2
   b8752:	f04f 0500 	mov.w	r5, #0
   b8756:	fbe1 e502 	umlal	lr, r5, r1, r2
   b875a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b875e:	fbe0 e503 	umlal	lr, r5, r0, r3
   b8762:	f04f 0600 	mov.w	r6, #0
   b8766:	fbe1 5603 	umlal	r5, r6, r1, r3
   b876a:	f09c 0f00 	teq	ip, #0
   b876e:	bf18      	it	ne
   b8770:	f04e 0e01 	orrne.w	lr, lr, #1
   b8774:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b8778:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b877c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b8780:	d204      	bcs.n	b878c <__aeabi_dmul+0x80>
   b8782:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b8786:	416d      	adcs	r5, r5
   b8788:	eb46 0606 	adc.w	r6, r6, r6
   b878c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b8790:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b8794:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b8798:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b879c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b87a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b87a4:	bf88      	it	hi
   b87a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b87aa:	d81e      	bhi.n	b87ea <__aeabi_dmul+0xde>
   b87ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b87b0:	bf08      	it	eq
   b87b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b87b6:	f150 0000 	adcs.w	r0, r0, #0
   b87ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b87be:	bd70      	pop	{r4, r5, r6, pc}
   b87c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b87c4:	ea46 0101 	orr.w	r1, r6, r1
   b87c8:	ea40 0002 	orr.w	r0, r0, r2
   b87cc:	ea81 0103 	eor.w	r1, r1, r3
   b87d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b87d4:	bfc2      	ittt	gt
   b87d6:	ebd4 050c 	rsbsgt	r5, r4, ip
   b87da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b87de:	bd70      	popgt	{r4, r5, r6, pc}
   b87e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b87e4:	f04f 0e00 	mov.w	lr, #0
   b87e8:	3c01      	subs	r4, #1
   b87ea:	f300 80ab 	bgt.w	b8944 <__aeabi_dmul+0x238>
   b87ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b87f2:	bfde      	ittt	le
   b87f4:	2000      	movle	r0, #0
   b87f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b87fa:	bd70      	pople	{r4, r5, r6, pc}
   b87fc:	f1c4 0400 	rsb	r4, r4, #0
   b8800:	3c20      	subs	r4, #32
   b8802:	da35      	bge.n	b8870 <__aeabi_dmul+0x164>
   b8804:	340c      	adds	r4, #12
   b8806:	dc1b      	bgt.n	b8840 <__aeabi_dmul+0x134>
   b8808:	f104 0414 	add.w	r4, r4, #20
   b880c:	f1c4 0520 	rsb	r5, r4, #32
   b8810:	fa00 f305 	lsl.w	r3, r0, r5
   b8814:	fa20 f004 	lsr.w	r0, r0, r4
   b8818:	fa01 f205 	lsl.w	r2, r1, r5
   b881c:	ea40 0002 	orr.w	r0, r0, r2
   b8820:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b8824:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8828:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b882c:	fa21 f604 	lsr.w	r6, r1, r4
   b8830:	eb42 0106 	adc.w	r1, r2, r6
   b8834:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8838:	bf08      	it	eq
   b883a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b883e:	bd70      	pop	{r4, r5, r6, pc}
   b8840:	f1c4 040c 	rsb	r4, r4, #12
   b8844:	f1c4 0520 	rsb	r5, r4, #32
   b8848:	fa00 f304 	lsl.w	r3, r0, r4
   b884c:	fa20 f005 	lsr.w	r0, r0, r5
   b8850:	fa01 f204 	lsl.w	r2, r1, r4
   b8854:	ea40 0002 	orr.w	r0, r0, r2
   b8858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b885c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8860:	f141 0100 	adc.w	r1, r1, #0
   b8864:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8868:	bf08      	it	eq
   b886a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b886e:	bd70      	pop	{r4, r5, r6, pc}
   b8870:	f1c4 0520 	rsb	r5, r4, #32
   b8874:	fa00 f205 	lsl.w	r2, r0, r5
   b8878:	ea4e 0e02 	orr.w	lr, lr, r2
   b887c:	fa20 f304 	lsr.w	r3, r0, r4
   b8880:	fa01 f205 	lsl.w	r2, r1, r5
   b8884:	ea43 0302 	orr.w	r3, r3, r2
   b8888:	fa21 f004 	lsr.w	r0, r1, r4
   b888c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8890:	fa21 f204 	lsr.w	r2, r1, r4
   b8894:	ea20 0002 	bic.w	r0, r0, r2
   b8898:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b889c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b88a0:	bf08      	it	eq
   b88a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b88a6:	bd70      	pop	{r4, r5, r6, pc}
   b88a8:	f094 0f00 	teq	r4, #0
   b88ac:	d10f      	bne.n	b88ce <__aeabi_dmul+0x1c2>
   b88ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b88b2:	0040      	lsls	r0, r0, #1
   b88b4:	eb41 0101 	adc.w	r1, r1, r1
   b88b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b88bc:	bf08      	it	eq
   b88be:	3c01      	subeq	r4, #1
   b88c0:	d0f7      	beq.n	b88b2 <__aeabi_dmul+0x1a6>
   b88c2:	ea41 0106 	orr.w	r1, r1, r6
   b88c6:	f095 0f00 	teq	r5, #0
   b88ca:	bf18      	it	ne
   b88cc:	4770      	bxne	lr
   b88ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b88d2:	0052      	lsls	r2, r2, #1
   b88d4:	eb43 0303 	adc.w	r3, r3, r3
   b88d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b88dc:	bf08      	it	eq
   b88de:	3d01      	subeq	r5, #1
   b88e0:	d0f7      	beq.n	b88d2 <__aeabi_dmul+0x1c6>
   b88e2:	ea43 0306 	orr.w	r3, r3, r6
   b88e6:	4770      	bx	lr
   b88e8:	ea94 0f0c 	teq	r4, ip
   b88ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b88f0:	bf18      	it	ne
   b88f2:	ea95 0f0c 	teqne	r5, ip
   b88f6:	d00c      	beq.n	b8912 <__aeabi_dmul+0x206>
   b88f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b88fc:	bf18      	it	ne
   b88fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8902:	d1d1      	bne.n	b88a8 <__aeabi_dmul+0x19c>
   b8904:	ea81 0103 	eor.w	r1, r1, r3
   b8908:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b890c:	f04f 0000 	mov.w	r0, #0
   b8910:	bd70      	pop	{r4, r5, r6, pc}
   b8912:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8916:	bf06      	itte	eq
   b8918:	4610      	moveq	r0, r2
   b891a:	4619      	moveq	r1, r3
   b891c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8920:	d019      	beq.n	b8956 <__aeabi_dmul+0x24a>
   b8922:	ea94 0f0c 	teq	r4, ip
   b8926:	d102      	bne.n	b892e <__aeabi_dmul+0x222>
   b8928:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b892c:	d113      	bne.n	b8956 <__aeabi_dmul+0x24a>
   b892e:	ea95 0f0c 	teq	r5, ip
   b8932:	d105      	bne.n	b8940 <__aeabi_dmul+0x234>
   b8934:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b8938:	bf1c      	itt	ne
   b893a:	4610      	movne	r0, r2
   b893c:	4619      	movne	r1, r3
   b893e:	d10a      	bne.n	b8956 <__aeabi_dmul+0x24a>
   b8940:	ea81 0103 	eor.w	r1, r1, r3
   b8944:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8948:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b894c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8950:	f04f 0000 	mov.w	r0, #0
   b8954:	bd70      	pop	{r4, r5, r6, pc}
   b8956:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b895a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b895e:	bd70      	pop	{r4, r5, r6, pc}

000b8960 <__aeabi_ddiv>:
   b8960:	b570      	push	{r4, r5, r6, lr}
   b8962:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b8966:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b896a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b896e:	bf1d      	ittte	ne
   b8970:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8974:	ea94 0f0c 	teqne	r4, ip
   b8978:	ea95 0f0c 	teqne	r5, ip
   b897c:	f000 f8a7 	bleq	b8ace <__aeabi_ddiv+0x16e>
   b8980:	eba4 0405 	sub.w	r4, r4, r5
   b8984:	ea81 0e03 	eor.w	lr, r1, r3
   b8988:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b898c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8990:	f000 8088 	beq.w	b8aa4 <__aeabi_ddiv+0x144>
   b8994:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8998:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b899c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b89a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b89a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b89a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b89ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b89b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b89b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b89b8:	429d      	cmp	r5, r3
   b89ba:	bf08      	it	eq
   b89bc:	4296      	cmpeq	r6, r2
   b89be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b89c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b89c6:	d202      	bcs.n	b89ce <__aeabi_ddiv+0x6e>
   b89c8:	085b      	lsrs	r3, r3, #1
   b89ca:	ea4f 0232 	mov.w	r2, r2, rrx
   b89ce:	1ab6      	subs	r6, r6, r2
   b89d0:	eb65 0503 	sbc.w	r5, r5, r3
   b89d4:	085b      	lsrs	r3, r3, #1
   b89d6:	ea4f 0232 	mov.w	r2, r2, rrx
   b89da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b89de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b89e2:	ebb6 0e02 	subs.w	lr, r6, r2
   b89e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b89ea:	bf22      	ittt	cs
   b89ec:	1ab6      	subcs	r6, r6, r2
   b89ee:	4675      	movcs	r5, lr
   b89f0:	ea40 000c 	orrcs.w	r0, r0, ip
   b89f4:	085b      	lsrs	r3, r3, #1
   b89f6:	ea4f 0232 	mov.w	r2, r2, rrx
   b89fa:	ebb6 0e02 	subs.w	lr, r6, r2
   b89fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8a02:	bf22      	ittt	cs
   b8a04:	1ab6      	subcs	r6, r6, r2
   b8a06:	4675      	movcs	r5, lr
   b8a08:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b8a0c:	085b      	lsrs	r3, r3, #1
   b8a0e:	ea4f 0232 	mov.w	r2, r2, rrx
   b8a12:	ebb6 0e02 	subs.w	lr, r6, r2
   b8a16:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8a1a:	bf22      	ittt	cs
   b8a1c:	1ab6      	subcs	r6, r6, r2
   b8a1e:	4675      	movcs	r5, lr
   b8a20:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b8a24:	085b      	lsrs	r3, r3, #1
   b8a26:	ea4f 0232 	mov.w	r2, r2, rrx
   b8a2a:	ebb6 0e02 	subs.w	lr, r6, r2
   b8a2e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8a32:	bf22      	ittt	cs
   b8a34:	1ab6      	subcs	r6, r6, r2
   b8a36:	4675      	movcs	r5, lr
   b8a38:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b8a3c:	ea55 0e06 	orrs.w	lr, r5, r6
   b8a40:	d018      	beq.n	b8a74 <__aeabi_ddiv+0x114>
   b8a42:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b8a46:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b8a4a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b8a4e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b8a52:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b8a56:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b8a5a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b8a5e:	d1c0      	bne.n	b89e2 <__aeabi_ddiv+0x82>
   b8a60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8a64:	d10b      	bne.n	b8a7e <__aeabi_ddiv+0x11e>
   b8a66:	ea41 0100 	orr.w	r1, r1, r0
   b8a6a:	f04f 0000 	mov.w	r0, #0
   b8a6e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b8a72:	e7b6      	b.n	b89e2 <__aeabi_ddiv+0x82>
   b8a74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8a78:	bf04      	itt	eq
   b8a7a:	4301      	orreq	r1, r0
   b8a7c:	2000      	moveq	r0, #0
   b8a7e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b8a82:	bf88      	it	hi
   b8a84:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8a88:	f63f aeaf 	bhi.w	b87ea <__aeabi_dmul+0xde>
   b8a8c:	ebb5 0c03 	subs.w	ip, r5, r3
   b8a90:	bf04      	itt	eq
   b8a92:	ebb6 0c02 	subseq.w	ip, r6, r2
   b8a96:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8a9a:	f150 0000 	adcs.w	r0, r0, #0
   b8a9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8aa2:	bd70      	pop	{r4, r5, r6, pc}
   b8aa4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b8aa8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b8aac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b8ab0:	bfc2      	ittt	gt
   b8ab2:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8ab6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8aba:	bd70      	popgt	{r4, r5, r6, pc}
   b8abc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8ac0:	f04f 0e00 	mov.w	lr, #0
   b8ac4:	3c01      	subs	r4, #1
   b8ac6:	e690      	b.n	b87ea <__aeabi_dmul+0xde>
   b8ac8:	ea45 0e06 	orr.w	lr, r5, r6
   b8acc:	e68d      	b.n	b87ea <__aeabi_dmul+0xde>
   b8ace:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8ad2:	ea94 0f0c 	teq	r4, ip
   b8ad6:	bf08      	it	eq
   b8ad8:	ea95 0f0c 	teqeq	r5, ip
   b8adc:	f43f af3b 	beq.w	b8956 <__aeabi_dmul+0x24a>
   b8ae0:	ea94 0f0c 	teq	r4, ip
   b8ae4:	d10a      	bne.n	b8afc <__aeabi_ddiv+0x19c>
   b8ae6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8aea:	f47f af34 	bne.w	b8956 <__aeabi_dmul+0x24a>
   b8aee:	ea95 0f0c 	teq	r5, ip
   b8af2:	f47f af25 	bne.w	b8940 <__aeabi_dmul+0x234>
   b8af6:	4610      	mov	r0, r2
   b8af8:	4619      	mov	r1, r3
   b8afa:	e72c      	b.n	b8956 <__aeabi_dmul+0x24a>
   b8afc:	ea95 0f0c 	teq	r5, ip
   b8b00:	d106      	bne.n	b8b10 <__aeabi_ddiv+0x1b0>
   b8b02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8b06:	f43f aefd 	beq.w	b8904 <__aeabi_dmul+0x1f8>
   b8b0a:	4610      	mov	r0, r2
   b8b0c:	4619      	mov	r1, r3
   b8b0e:	e722      	b.n	b8956 <__aeabi_dmul+0x24a>
   b8b10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8b14:	bf18      	it	ne
   b8b16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8b1a:	f47f aec5 	bne.w	b88a8 <__aeabi_dmul+0x19c>
   b8b1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b8b22:	f47f af0d 	bne.w	b8940 <__aeabi_dmul+0x234>
   b8b26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b8b2a:	f47f aeeb 	bne.w	b8904 <__aeabi_dmul+0x1f8>
   b8b2e:	e712      	b.n	b8956 <__aeabi_dmul+0x24a>

000b8b30 <__gedf2>:
   b8b30:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8b34:	e006      	b.n	b8b44 <__cmpdf2+0x4>
   b8b36:	bf00      	nop

000b8b38 <__ledf2>:
   b8b38:	f04f 0c01 	mov.w	ip, #1
   b8b3c:	e002      	b.n	b8b44 <__cmpdf2+0x4>
   b8b3e:	bf00      	nop

000b8b40 <__cmpdf2>:
   b8b40:	f04f 0c01 	mov.w	ip, #1
   b8b44:	f84d cd04 	str.w	ip, [sp, #-4]!
   b8b48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8b4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8b54:	bf18      	it	ne
   b8b56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b8b5a:	d01b      	beq.n	b8b94 <__cmpdf2+0x54>
   b8b5c:	b001      	add	sp, #4
   b8b5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b8b62:	bf0c      	ite	eq
   b8b64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b8b68:	ea91 0f03 	teqne	r1, r3
   b8b6c:	bf02      	ittt	eq
   b8b6e:	ea90 0f02 	teqeq	r0, r2
   b8b72:	2000      	moveq	r0, #0
   b8b74:	4770      	bxeq	lr
   b8b76:	f110 0f00 	cmn.w	r0, #0
   b8b7a:	ea91 0f03 	teq	r1, r3
   b8b7e:	bf58      	it	pl
   b8b80:	4299      	cmppl	r1, r3
   b8b82:	bf08      	it	eq
   b8b84:	4290      	cmpeq	r0, r2
   b8b86:	bf2c      	ite	cs
   b8b88:	17d8      	asrcs	r0, r3, #31
   b8b8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b8b8e:	f040 0001 	orr.w	r0, r0, #1
   b8b92:	4770      	bx	lr
   b8b94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8b9c:	d102      	bne.n	b8ba4 <__cmpdf2+0x64>
   b8b9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b8ba2:	d107      	bne.n	b8bb4 <__cmpdf2+0x74>
   b8ba4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8ba8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8bac:	d1d6      	bne.n	b8b5c <__cmpdf2+0x1c>
   b8bae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b8bb2:	d0d3      	beq.n	b8b5c <__cmpdf2+0x1c>
   b8bb4:	f85d 0b04 	ldr.w	r0, [sp], #4
   b8bb8:	4770      	bx	lr
   b8bba:	bf00      	nop

000b8bbc <__aeabi_cdrcmple>:
   b8bbc:	4684      	mov	ip, r0
   b8bbe:	4610      	mov	r0, r2
   b8bc0:	4662      	mov	r2, ip
   b8bc2:	468c      	mov	ip, r1
   b8bc4:	4619      	mov	r1, r3
   b8bc6:	4663      	mov	r3, ip
   b8bc8:	e000      	b.n	b8bcc <__aeabi_cdcmpeq>
   b8bca:	bf00      	nop

000b8bcc <__aeabi_cdcmpeq>:
   b8bcc:	b501      	push	{r0, lr}
   b8bce:	f7ff ffb7 	bl	b8b40 <__cmpdf2>
   b8bd2:	2800      	cmp	r0, #0
   b8bd4:	bf48      	it	mi
   b8bd6:	f110 0f00 	cmnmi.w	r0, #0
   b8bda:	bd01      	pop	{r0, pc}

000b8bdc <__aeabi_dcmpeq>:
   b8bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8be0:	f7ff fff4 	bl	b8bcc <__aeabi_cdcmpeq>
   b8be4:	bf0c      	ite	eq
   b8be6:	2001      	moveq	r0, #1
   b8be8:	2000      	movne	r0, #0
   b8bea:	f85d fb08 	ldr.w	pc, [sp], #8
   b8bee:	bf00      	nop

000b8bf0 <__aeabi_dcmplt>:
   b8bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8bf4:	f7ff ffea 	bl	b8bcc <__aeabi_cdcmpeq>
   b8bf8:	bf34      	ite	cc
   b8bfa:	2001      	movcc	r0, #1
   b8bfc:	2000      	movcs	r0, #0
   b8bfe:	f85d fb08 	ldr.w	pc, [sp], #8
   b8c02:	bf00      	nop

000b8c04 <__aeabi_dcmple>:
   b8c04:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8c08:	f7ff ffe0 	bl	b8bcc <__aeabi_cdcmpeq>
   b8c0c:	bf94      	ite	ls
   b8c0e:	2001      	movls	r0, #1
   b8c10:	2000      	movhi	r0, #0
   b8c12:	f85d fb08 	ldr.w	pc, [sp], #8
   b8c16:	bf00      	nop

000b8c18 <__aeabi_dcmpge>:
   b8c18:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8c1c:	f7ff ffce 	bl	b8bbc <__aeabi_cdrcmple>
   b8c20:	bf94      	ite	ls
   b8c22:	2001      	movls	r0, #1
   b8c24:	2000      	movhi	r0, #0
   b8c26:	f85d fb08 	ldr.w	pc, [sp], #8
   b8c2a:	bf00      	nop

000b8c2c <__aeabi_dcmpgt>:
   b8c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8c30:	f7ff ffc4 	bl	b8bbc <__aeabi_cdrcmple>
   b8c34:	bf34      	ite	cc
   b8c36:	2001      	movcc	r0, #1
   b8c38:	2000      	movcs	r0, #0
   b8c3a:	f85d fb08 	ldr.w	pc, [sp], #8
   b8c3e:	bf00      	nop

000b8c40 <__aeabi_dcmpun>:
   b8c40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8c44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8c48:	d102      	bne.n	b8c50 <__aeabi_dcmpun+0x10>
   b8c4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b8c4e:	d10a      	bne.n	b8c66 <__aeabi_dcmpun+0x26>
   b8c50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8c54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8c58:	d102      	bne.n	b8c60 <__aeabi_dcmpun+0x20>
   b8c5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b8c5e:	d102      	bne.n	b8c66 <__aeabi_dcmpun+0x26>
   b8c60:	f04f 0000 	mov.w	r0, #0
   b8c64:	4770      	bx	lr
   b8c66:	f04f 0001 	mov.w	r0, #1
   b8c6a:	4770      	bx	lr

000b8c6c <__aeabi_d2iz>:
   b8c6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b8c70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b8c74:	d215      	bcs.n	b8ca2 <__aeabi_d2iz+0x36>
   b8c76:	d511      	bpl.n	b8c9c <__aeabi_d2iz+0x30>
   b8c78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b8c7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b8c80:	d912      	bls.n	b8ca8 <__aeabi_d2iz+0x3c>
   b8c82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8c86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b8c8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b8c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b8c92:	fa23 f002 	lsr.w	r0, r3, r2
   b8c96:	bf18      	it	ne
   b8c98:	4240      	negne	r0, r0
   b8c9a:	4770      	bx	lr
   b8c9c:	f04f 0000 	mov.w	r0, #0
   b8ca0:	4770      	bx	lr
   b8ca2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b8ca6:	d105      	bne.n	b8cb4 <__aeabi_d2iz+0x48>
   b8ca8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b8cac:	bf08      	it	eq
   b8cae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b8cb2:	4770      	bx	lr
   b8cb4:	f04f 0000 	mov.w	r0, #0
   b8cb8:	4770      	bx	lr
   b8cba:	bf00      	nop

000b8cbc <__aeabi_d2uiz>:
   b8cbc:	004a      	lsls	r2, r1, #1
   b8cbe:	d211      	bcs.n	b8ce4 <__aeabi_d2uiz+0x28>
   b8cc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b8cc4:	d211      	bcs.n	b8cea <__aeabi_d2uiz+0x2e>
   b8cc6:	d50d      	bpl.n	b8ce4 <__aeabi_d2uiz+0x28>
   b8cc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b8ccc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b8cd0:	d40e      	bmi.n	b8cf0 <__aeabi_d2uiz+0x34>
   b8cd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8cd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b8cda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b8cde:	fa23 f002 	lsr.w	r0, r3, r2
   b8ce2:	4770      	bx	lr
   b8ce4:	f04f 0000 	mov.w	r0, #0
   b8ce8:	4770      	bx	lr
   b8cea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b8cee:	d102      	bne.n	b8cf6 <__aeabi_d2uiz+0x3a>
   b8cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8cf4:	4770      	bx	lr
   b8cf6:	f04f 0000 	mov.w	r0, #0
   b8cfa:	4770      	bx	lr

000b8cfc <__aeabi_d2f>:
   b8cfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b8d00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b8d04:	bf24      	itt	cs
   b8d06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b8d0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b8d0e:	d90d      	bls.n	b8d2c <__aeabi_d2f+0x30>
   b8d10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b8d14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b8d18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b8d1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b8d20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b8d24:	bf08      	it	eq
   b8d26:	f020 0001 	biceq.w	r0, r0, #1
   b8d2a:	4770      	bx	lr
   b8d2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b8d30:	d121      	bne.n	b8d76 <__aeabi_d2f+0x7a>
   b8d32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b8d36:	bfbc      	itt	lt
   b8d38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b8d3c:	4770      	bxlt	lr
   b8d3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8d42:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b8d46:	f1c2 0218 	rsb	r2, r2, #24
   b8d4a:	f1c2 0c20 	rsb	ip, r2, #32
   b8d4e:	fa10 f30c 	lsls.w	r3, r0, ip
   b8d52:	fa20 f002 	lsr.w	r0, r0, r2
   b8d56:	bf18      	it	ne
   b8d58:	f040 0001 	orrne.w	r0, r0, #1
   b8d5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8d60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b8d64:	fa03 fc0c 	lsl.w	ip, r3, ip
   b8d68:	ea40 000c 	orr.w	r0, r0, ip
   b8d6c:	fa23 f302 	lsr.w	r3, r3, r2
   b8d70:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b8d74:	e7cc      	b.n	b8d10 <__aeabi_d2f+0x14>
   b8d76:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b8d7a:	d107      	bne.n	b8d8c <__aeabi_d2f+0x90>
   b8d7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b8d80:	bf1e      	ittt	ne
   b8d82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b8d86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b8d8a:	4770      	bxne	lr
   b8d8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b8d90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b8d94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b8d98:	4770      	bx	lr
   b8d9a:	bf00      	nop

000b8d9c <__aeabi_d2ulz>:
   b8d9c:	b5d0      	push	{r4, r6, r7, lr}
   b8d9e:	4b0c      	ldr	r3, [pc, #48]	; (b8dd0 <__aeabi_d2ulz+0x34>)
   b8da0:	2200      	movs	r2, #0
   b8da2:	4606      	mov	r6, r0
   b8da4:	460f      	mov	r7, r1
   b8da6:	f7ff fcb1 	bl	b870c <__aeabi_dmul>
   b8daa:	f7ff ff87 	bl	b8cbc <__aeabi_d2uiz>
   b8dae:	4604      	mov	r4, r0
   b8db0:	f7ff fc32 	bl	b8618 <__aeabi_ui2d>
   b8db4:	4b07      	ldr	r3, [pc, #28]	; (b8dd4 <__aeabi_d2ulz+0x38>)
   b8db6:	2200      	movs	r2, #0
   b8db8:	f7ff fca8 	bl	b870c <__aeabi_dmul>
   b8dbc:	4602      	mov	r2, r0
   b8dbe:	460b      	mov	r3, r1
   b8dc0:	4630      	mov	r0, r6
   b8dc2:	4639      	mov	r1, r7
   b8dc4:	f7ff faea 	bl	b839c <__aeabi_dsub>
   b8dc8:	f7ff ff78 	bl	b8cbc <__aeabi_d2uiz>
   b8dcc:	4621      	mov	r1, r4
   b8dce:	bdd0      	pop	{r4, r6, r7, pc}
   b8dd0:	3df00000 	.word	0x3df00000
   b8dd4:	41f00000 	.word	0x41f00000

000b8dd8 <atexit>:
   b8dd8:	2300      	movs	r3, #0
   b8dda:	4601      	mov	r1, r0
   b8ddc:	461a      	mov	r2, r3
   b8dde:	4618      	mov	r0, r3
   b8de0:	f000 bf44 	b.w	b9c6c <__register_exitproc>

000b8de4 <atof>:
   b8de4:	2100      	movs	r1, #0
   b8de6:	f000 bea9 	b.w	b9b3c <strtod>

000b8dea <atoi>:
   b8dea:	220a      	movs	r2, #10
   b8dec:	2100      	movs	r1, #0
   b8dee:	f000 bf33 	b.w	b9c58 <strtol>

000b8df2 <atol>:
   b8df2:	220a      	movs	r2, #10
   b8df4:	2100      	movs	r1, #0
   b8df6:	f000 bf2f 	b.w	b9c58 <strtol>

000b8dfa <memcpy>:
   b8dfa:	440a      	add	r2, r1
   b8dfc:	4291      	cmp	r1, r2
   b8dfe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8e02:	d100      	bne.n	b8e06 <memcpy+0xc>
   b8e04:	4770      	bx	lr
   b8e06:	b510      	push	{r4, lr}
   b8e08:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8e0c:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8e10:	4291      	cmp	r1, r2
   b8e12:	d1f9      	bne.n	b8e08 <memcpy+0xe>
   b8e14:	bd10      	pop	{r4, pc}

000b8e16 <memset>:
   b8e16:	4402      	add	r2, r0
   b8e18:	4603      	mov	r3, r0
   b8e1a:	4293      	cmp	r3, r2
   b8e1c:	d100      	bne.n	b8e20 <memset+0xa>
   b8e1e:	4770      	bx	lr
   b8e20:	f803 1b01 	strb.w	r1, [r3], #1
   b8e24:	e7f9      	b.n	b8e1a <memset+0x4>
	...

000b8e28 <srand>:
   b8e28:	b538      	push	{r3, r4, r5, lr}
   b8e2a:	4b10      	ldr	r3, [pc, #64]	; (b8e6c <srand+0x44>)
   b8e2c:	681d      	ldr	r5, [r3, #0]
   b8e2e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8e30:	4604      	mov	r4, r0
   b8e32:	b9b3      	cbnz	r3, b8e62 <srand+0x3a>
   b8e34:	2018      	movs	r0, #24
   b8e36:	f7fd fee5 	bl	b6c04 <malloc>
   b8e3a:	4602      	mov	r2, r0
   b8e3c:	63a8      	str	r0, [r5, #56]	; 0x38
   b8e3e:	b920      	cbnz	r0, b8e4a <srand+0x22>
   b8e40:	4b0b      	ldr	r3, [pc, #44]	; (b8e70 <srand+0x48>)
   b8e42:	480c      	ldr	r0, [pc, #48]	; (b8e74 <srand+0x4c>)
   b8e44:	2142      	movs	r1, #66	; 0x42
   b8e46:	f7fd ff0d 	bl	b6c64 <__assert_func>
   b8e4a:	490b      	ldr	r1, [pc, #44]	; (b8e78 <srand+0x50>)
   b8e4c:	4b0b      	ldr	r3, [pc, #44]	; (b8e7c <srand+0x54>)
   b8e4e:	e9c0 1300 	strd	r1, r3, [r0]
   b8e52:	4b0b      	ldr	r3, [pc, #44]	; (b8e80 <srand+0x58>)
   b8e54:	6083      	str	r3, [r0, #8]
   b8e56:	230b      	movs	r3, #11
   b8e58:	8183      	strh	r3, [r0, #12]
   b8e5a:	2100      	movs	r1, #0
   b8e5c:	2001      	movs	r0, #1
   b8e5e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8e62:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8e64:	2200      	movs	r2, #0
   b8e66:	611c      	str	r4, [r3, #16]
   b8e68:	615a      	str	r2, [r3, #20]
   b8e6a:	bd38      	pop	{r3, r4, r5, pc}
   b8e6c:	2003e3e8 	.word	0x2003e3e8
   b8e70:	000bc201 	.word	0x000bc201
   b8e74:	000bc218 	.word	0x000bc218
   b8e78:	abcd330e 	.word	0xabcd330e
   b8e7c:	e66d1234 	.word	0xe66d1234
   b8e80:	0005deec 	.word	0x0005deec

000b8e84 <strcmp>:
   b8e84:	f810 2b01 	ldrb.w	r2, [r0], #1
   b8e88:	f811 3b01 	ldrb.w	r3, [r1], #1
   b8e8c:	2a01      	cmp	r2, #1
   b8e8e:	bf28      	it	cs
   b8e90:	429a      	cmpcs	r2, r3
   b8e92:	d0f7      	beq.n	b8e84 <strcmp>
   b8e94:	1ad0      	subs	r0, r2, r3
   b8e96:	4770      	bx	lr

000b8e98 <strlen>:
   b8e98:	4603      	mov	r3, r0
   b8e9a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8e9e:	2a00      	cmp	r2, #0
   b8ea0:	d1fb      	bne.n	b8e9a <strlen+0x2>
   b8ea2:	1a18      	subs	r0, r3, r0
   b8ea4:	3801      	subs	r0, #1
   b8ea6:	4770      	bx	lr

000b8ea8 <strncmp>:
   b8ea8:	b510      	push	{r4, lr}
   b8eaa:	b17a      	cbz	r2, b8ecc <strncmp+0x24>
   b8eac:	4603      	mov	r3, r0
   b8eae:	3901      	subs	r1, #1
   b8eb0:	1884      	adds	r4, r0, r2
   b8eb2:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8eb6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b8eba:	4290      	cmp	r0, r2
   b8ebc:	d101      	bne.n	b8ec2 <strncmp+0x1a>
   b8ebe:	42a3      	cmp	r3, r4
   b8ec0:	d101      	bne.n	b8ec6 <strncmp+0x1e>
   b8ec2:	1a80      	subs	r0, r0, r2
   b8ec4:	bd10      	pop	{r4, pc}
   b8ec6:	2800      	cmp	r0, #0
   b8ec8:	d1f3      	bne.n	b8eb2 <strncmp+0xa>
   b8eca:	e7fa      	b.n	b8ec2 <strncmp+0x1a>
   b8ecc:	4610      	mov	r0, r2
   b8ece:	e7f9      	b.n	b8ec4 <strncmp+0x1c>

000b8ed0 <strncpy>:
   b8ed0:	b510      	push	{r4, lr}
   b8ed2:	3901      	subs	r1, #1
   b8ed4:	4603      	mov	r3, r0
   b8ed6:	b132      	cbz	r2, b8ee6 <strncpy+0x16>
   b8ed8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8edc:	f803 4b01 	strb.w	r4, [r3], #1
   b8ee0:	3a01      	subs	r2, #1
   b8ee2:	2c00      	cmp	r4, #0
   b8ee4:	d1f7      	bne.n	b8ed6 <strncpy+0x6>
   b8ee6:	441a      	add	r2, r3
   b8ee8:	2100      	movs	r1, #0
   b8eea:	4293      	cmp	r3, r2
   b8eec:	d100      	bne.n	b8ef0 <strncpy+0x20>
   b8eee:	bd10      	pop	{r4, pc}
   b8ef0:	f803 1b01 	strb.w	r1, [r3], #1
   b8ef4:	e7f9      	b.n	b8eea <strncpy+0x1a>

000b8ef6 <sulp>:
   b8ef6:	b570      	push	{r4, r5, r6, lr}
   b8ef8:	4604      	mov	r4, r0
   b8efa:	460d      	mov	r5, r1
   b8efc:	ec45 4b10 	vmov	d0, r4, r5
   b8f00:	4616      	mov	r6, r2
   b8f02:	f001 fe0d 	bl	bab20 <__ulp>
   b8f06:	ec51 0b10 	vmov	r0, r1, d0
   b8f0a:	b17e      	cbz	r6, b8f2c <sulp+0x36>
   b8f0c:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b8f10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b8f14:	2b00      	cmp	r3, #0
   b8f16:	dd09      	ble.n	b8f2c <sulp+0x36>
   b8f18:	051b      	lsls	r3, r3, #20
   b8f1a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b8f1e:	2400      	movs	r4, #0
   b8f20:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b8f24:	4622      	mov	r2, r4
   b8f26:	462b      	mov	r3, r5
   b8f28:	f7ff fbf0 	bl	b870c <__aeabi_dmul>
   b8f2c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b8f30 <_strtod_l>:
   b8f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8f34:	ed2d 8b02 	vpush	{d8}
   b8f38:	b09d      	sub	sp, #116	; 0x74
   b8f3a:	461f      	mov	r7, r3
   b8f3c:	2300      	movs	r3, #0
   b8f3e:	9318      	str	r3, [sp, #96]	; 0x60
   b8f40:	4ba2      	ldr	r3, [pc, #648]	; (b91cc <_strtod_l+0x29c>)
   b8f42:	9213      	str	r2, [sp, #76]	; 0x4c
   b8f44:	681b      	ldr	r3, [r3, #0]
   b8f46:	9305      	str	r3, [sp, #20]
   b8f48:	4604      	mov	r4, r0
   b8f4a:	4618      	mov	r0, r3
   b8f4c:	4688      	mov	r8, r1
   b8f4e:	f7ff ffa3 	bl	b8e98 <strlen>
   b8f52:	f04f 0a00 	mov.w	sl, #0
   b8f56:	4605      	mov	r5, r0
   b8f58:	f04f 0b00 	mov.w	fp, #0
   b8f5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8f60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8f62:	781a      	ldrb	r2, [r3, #0]
   b8f64:	2a2b      	cmp	r2, #43	; 0x2b
   b8f66:	d04e      	beq.n	b9006 <_strtod_l+0xd6>
   b8f68:	d83b      	bhi.n	b8fe2 <_strtod_l+0xb2>
   b8f6a:	2a0d      	cmp	r2, #13
   b8f6c:	d834      	bhi.n	b8fd8 <_strtod_l+0xa8>
   b8f6e:	2a08      	cmp	r2, #8
   b8f70:	d834      	bhi.n	b8fdc <_strtod_l+0xac>
   b8f72:	2a00      	cmp	r2, #0
   b8f74:	d03e      	beq.n	b8ff4 <_strtod_l+0xc4>
   b8f76:	2300      	movs	r3, #0
   b8f78:	930a      	str	r3, [sp, #40]	; 0x28
   b8f7a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b8f7c:	7833      	ldrb	r3, [r6, #0]
   b8f7e:	2b30      	cmp	r3, #48	; 0x30
   b8f80:	f040 80b0 	bne.w	b90e4 <_strtod_l+0x1b4>
   b8f84:	7873      	ldrb	r3, [r6, #1]
   b8f86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b8f8a:	2b58      	cmp	r3, #88	; 0x58
   b8f8c:	d168      	bne.n	b9060 <_strtod_l+0x130>
   b8f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8f90:	9301      	str	r3, [sp, #4]
   b8f92:	ab18      	add	r3, sp, #96	; 0x60
   b8f94:	9702      	str	r7, [sp, #8]
   b8f96:	9300      	str	r3, [sp, #0]
   b8f98:	4a8d      	ldr	r2, [pc, #564]	; (b91d0 <_strtod_l+0x2a0>)
   b8f9a:	ab19      	add	r3, sp, #100	; 0x64
   b8f9c:	a917      	add	r1, sp, #92	; 0x5c
   b8f9e:	4620      	mov	r0, r4
   b8fa0:	f000 ff2e 	bl	b9e00 <__gethex>
   b8fa4:	f010 0707 	ands.w	r7, r0, #7
   b8fa8:	4605      	mov	r5, r0
   b8faa:	d005      	beq.n	b8fb8 <_strtod_l+0x88>
   b8fac:	2f06      	cmp	r7, #6
   b8fae:	d12c      	bne.n	b900a <_strtod_l+0xda>
   b8fb0:	3601      	adds	r6, #1
   b8fb2:	2300      	movs	r3, #0
   b8fb4:	9617      	str	r6, [sp, #92]	; 0x5c
   b8fb6:	930a      	str	r3, [sp, #40]	; 0x28
   b8fb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b8fba:	2b00      	cmp	r3, #0
   b8fbc:	f040 8590 	bne.w	b9ae0 <_strtod_l+0xbb0>
   b8fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8fc2:	b1eb      	cbz	r3, b9000 <_strtod_l+0xd0>
   b8fc4:	4652      	mov	r2, sl
   b8fc6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b8fca:	ec43 2b10 	vmov	d0, r2, r3
   b8fce:	b01d      	add	sp, #116	; 0x74
   b8fd0:	ecbd 8b02 	vpop	{d8}
   b8fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8fd8:	2a20      	cmp	r2, #32
   b8fda:	d1cc      	bne.n	b8f76 <_strtod_l+0x46>
   b8fdc:	3301      	adds	r3, #1
   b8fde:	9317      	str	r3, [sp, #92]	; 0x5c
   b8fe0:	e7be      	b.n	b8f60 <_strtod_l+0x30>
   b8fe2:	2a2d      	cmp	r2, #45	; 0x2d
   b8fe4:	d1c7      	bne.n	b8f76 <_strtod_l+0x46>
   b8fe6:	2201      	movs	r2, #1
   b8fe8:	920a      	str	r2, [sp, #40]	; 0x28
   b8fea:	1c5a      	adds	r2, r3, #1
   b8fec:	9217      	str	r2, [sp, #92]	; 0x5c
   b8fee:	785b      	ldrb	r3, [r3, #1]
   b8ff0:	2b00      	cmp	r3, #0
   b8ff2:	d1c2      	bne.n	b8f7a <_strtod_l+0x4a>
   b8ff4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b8ff6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8ffa:	2b00      	cmp	r3, #0
   b8ffc:	f040 856e 	bne.w	b9adc <_strtod_l+0xbac>
   b9000:	4652      	mov	r2, sl
   b9002:	465b      	mov	r3, fp
   b9004:	e7e1      	b.n	b8fca <_strtod_l+0x9a>
   b9006:	2200      	movs	r2, #0
   b9008:	e7ee      	b.n	b8fe8 <_strtod_l+0xb8>
   b900a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b900c:	b13a      	cbz	r2, b901e <_strtod_l+0xee>
   b900e:	2135      	movs	r1, #53	; 0x35
   b9010:	a81a      	add	r0, sp, #104	; 0x68
   b9012:	f001 fe90 	bl	bad36 <__copybits>
   b9016:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9018:	4620      	mov	r0, r4
   b901a:	f001 fa4f 	bl	ba4bc <_Bfree>
   b901e:	3f01      	subs	r7, #1
   b9020:	2f04      	cmp	r7, #4
   b9022:	d806      	bhi.n	b9032 <_strtod_l+0x102>
   b9024:	e8df f007 	tbb	[pc, r7]
   b9028:	1714030a 	.word	0x1714030a
   b902c:	0a          	.byte	0x0a
   b902d:	00          	.byte	0x00
   b902e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b9032:	0728      	lsls	r0, r5, #28
   b9034:	d5c0      	bpl.n	b8fb8 <_strtod_l+0x88>
   b9036:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b903a:	e7bd      	b.n	b8fb8 <_strtod_l+0x88>
   b903c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b9040:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b9042:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b9046:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b904a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b904e:	e7f0      	b.n	b9032 <_strtod_l+0x102>
   b9050:	f8df b180 	ldr.w	fp, [pc, #384]	; b91d4 <_strtod_l+0x2a4>
   b9054:	e7ed      	b.n	b9032 <_strtod_l+0x102>
   b9056:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b905a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b905e:	e7e8      	b.n	b9032 <_strtod_l+0x102>
   b9060:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9062:	1c5a      	adds	r2, r3, #1
   b9064:	9217      	str	r2, [sp, #92]	; 0x5c
   b9066:	785b      	ldrb	r3, [r3, #1]
   b9068:	2b30      	cmp	r3, #48	; 0x30
   b906a:	d0f9      	beq.n	b9060 <_strtod_l+0x130>
   b906c:	2b00      	cmp	r3, #0
   b906e:	d0a3      	beq.n	b8fb8 <_strtod_l+0x88>
   b9070:	2301      	movs	r3, #1
   b9072:	f04f 0900 	mov.w	r9, #0
   b9076:	9304      	str	r3, [sp, #16]
   b9078:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b907a:	9308      	str	r3, [sp, #32]
   b907c:	f8cd 901c 	str.w	r9, [sp, #28]
   b9080:	464f      	mov	r7, r9
   b9082:	220a      	movs	r2, #10
   b9084:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b9086:	7806      	ldrb	r6, [r0, #0]
   b9088:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b908c:	b2d9      	uxtb	r1, r3
   b908e:	2909      	cmp	r1, #9
   b9090:	d92a      	bls.n	b90e8 <_strtod_l+0x1b8>
   b9092:	9905      	ldr	r1, [sp, #20]
   b9094:	462a      	mov	r2, r5
   b9096:	f7ff ff07 	bl	b8ea8 <strncmp>
   b909a:	b398      	cbz	r0, b9104 <_strtod_l+0x1d4>
   b909c:	2000      	movs	r0, #0
   b909e:	4632      	mov	r2, r6
   b90a0:	463d      	mov	r5, r7
   b90a2:	9005      	str	r0, [sp, #20]
   b90a4:	4603      	mov	r3, r0
   b90a6:	2a65      	cmp	r2, #101	; 0x65
   b90a8:	d001      	beq.n	b90ae <_strtod_l+0x17e>
   b90aa:	2a45      	cmp	r2, #69	; 0x45
   b90ac:	d118      	bne.n	b90e0 <_strtod_l+0x1b0>
   b90ae:	b91d      	cbnz	r5, b90b8 <_strtod_l+0x188>
   b90b0:	9a04      	ldr	r2, [sp, #16]
   b90b2:	4302      	orrs	r2, r0
   b90b4:	d09e      	beq.n	b8ff4 <_strtod_l+0xc4>
   b90b6:	2500      	movs	r5, #0
   b90b8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b90bc:	f108 0201 	add.w	r2, r8, #1
   b90c0:	9217      	str	r2, [sp, #92]	; 0x5c
   b90c2:	f898 2001 	ldrb.w	r2, [r8, #1]
   b90c6:	2a2b      	cmp	r2, #43	; 0x2b
   b90c8:	d075      	beq.n	b91b6 <_strtod_l+0x286>
   b90ca:	2a2d      	cmp	r2, #45	; 0x2d
   b90cc:	d07b      	beq.n	b91c6 <_strtod_l+0x296>
   b90ce:	f04f 0c00 	mov.w	ip, #0
   b90d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b90d6:	2909      	cmp	r1, #9
   b90d8:	f240 8082 	bls.w	b91e0 <_strtod_l+0x2b0>
   b90dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b90e0:	2600      	movs	r6, #0
   b90e2:	e09d      	b.n	b9220 <_strtod_l+0x2f0>
   b90e4:	2300      	movs	r3, #0
   b90e6:	e7c4      	b.n	b9072 <_strtod_l+0x142>
   b90e8:	2f08      	cmp	r7, #8
   b90ea:	bfd8      	it	le
   b90ec:	9907      	ldrle	r1, [sp, #28]
   b90ee:	f100 0001 	add.w	r0, r0, #1
   b90f2:	bfda      	itte	le
   b90f4:	fb02 3301 	mlale	r3, r2, r1, r3
   b90f8:	9307      	strle	r3, [sp, #28]
   b90fa:	fb02 3909 	mlagt	r9, r2, r9, r3
   b90fe:	3701      	adds	r7, #1
   b9100:	9017      	str	r0, [sp, #92]	; 0x5c
   b9102:	e7bf      	b.n	b9084 <_strtod_l+0x154>
   b9104:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9106:	195a      	adds	r2, r3, r5
   b9108:	9217      	str	r2, [sp, #92]	; 0x5c
   b910a:	5d5a      	ldrb	r2, [r3, r5]
   b910c:	2f00      	cmp	r7, #0
   b910e:	d037      	beq.n	b9180 <_strtod_l+0x250>
   b9110:	9005      	str	r0, [sp, #20]
   b9112:	463d      	mov	r5, r7
   b9114:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b9118:	2b09      	cmp	r3, #9
   b911a:	d912      	bls.n	b9142 <_strtod_l+0x212>
   b911c:	2301      	movs	r3, #1
   b911e:	e7c2      	b.n	b90a6 <_strtod_l+0x176>
   b9120:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9122:	1c5a      	adds	r2, r3, #1
   b9124:	9217      	str	r2, [sp, #92]	; 0x5c
   b9126:	785a      	ldrb	r2, [r3, #1]
   b9128:	3001      	adds	r0, #1
   b912a:	2a30      	cmp	r2, #48	; 0x30
   b912c:	d0f8      	beq.n	b9120 <_strtod_l+0x1f0>
   b912e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b9132:	2b08      	cmp	r3, #8
   b9134:	f200 84d9 	bhi.w	b9aea <_strtod_l+0xbba>
   b9138:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b913a:	9005      	str	r0, [sp, #20]
   b913c:	2000      	movs	r0, #0
   b913e:	9308      	str	r3, [sp, #32]
   b9140:	4605      	mov	r5, r0
   b9142:	3a30      	subs	r2, #48	; 0x30
   b9144:	f100 0301 	add.w	r3, r0, #1
   b9148:	d014      	beq.n	b9174 <_strtod_l+0x244>
   b914a:	9905      	ldr	r1, [sp, #20]
   b914c:	4419      	add	r1, r3
   b914e:	9105      	str	r1, [sp, #20]
   b9150:	462b      	mov	r3, r5
   b9152:	eb00 0e05 	add.w	lr, r0, r5
   b9156:	210a      	movs	r1, #10
   b9158:	4573      	cmp	r3, lr
   b915a:	d113      	bne.n	b9184 <_strtod_l+0x254>
   b915c:	182b      	adds	r3, r5, r0
   b915e:	2b08      	cmp	r3, #8
   b9160:	f105 0501 	add.w	r5, r5, #1
   b9164:	4405      	add	r5, r0
   b9166:	dc1c      	bgt.n	b91a2 <_strtod_l+0x272>
   b9168:	9907      	ldr	r1, [sp, #28]
   b916a:	230a      	movs	r3, #10
   b916c:	fb03 2301 	mla	r3, r3, r1, r2
   b9170:	9307      	str	r3, [sp, #28]
   b9172:	2300      	movs	r3, #0
   b9174:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9176:	1c51      	adds	r1, r2, #1
   b9178:	9117      	str	r1, [sp, #92]	; 0x5c
   b917a:	7852      	ldrb	r2, [r2, #1]
   b917c:	4618      	mov	r0, r3
   b917e:	e7c9      	b.n	b9114 <_strtod_l+0x1e4>
   b9180:	4638      	mov	r0, r7
   b9182:	e7d2      	b.n	b912a <_strtod_l+0x1fa>
   b9184:	2b08      	cmp	r3, #8
   b9186:	dc04      	bgt.n	b9192 <_strtod_l+0x262>
   b9188:	9e07      	ldr	r6, [sp, #28]
   b918a:	434e      	muls	r6, r1
   b918c:	9607      	str	r6, [sp, #28]
   b918e:	3301      	adds	r3, #1
   b9190:	e7e2      	b.n	b9158 <_strtod_l+0x228>
   b9192:	f103 0c01 	add.w	ip, r3, #1
   b9196:	f1bc 0f10 	cmp.w	ip, #16
   b919a:	bfd8      	it	le
   b919c:	fb01 f909 	mulle.w	r9, r1, r9
   b91a0:	e7f5      	b.n	b918e <_strtod_l+0x25e>
   b91a2:	2d10      	cmp	r5, #16
   b91a4:	bfdc      	itt	le
   b91a6:	230a      	movle	r3, #10
   b91a8:	fb03 2909 	mlale	r9, r3, r9, r2
   b91ac:	e7e1      	b.n	b9172 <_strtod_l+0x242>
   b91ae:	2300      	movs	r3, #0
   b91b0:	9305      	str	r3, [sp, #20]
   b91b2:	2301      	movs	r3, #1
   b91b4:	e77c      	b.n	b90b0 <_strtod_l+0x180>
   b91b6:	f04f 0c00 	mov.w	ip, #0
   b91ba:	f108 0202 	add.w	r2, r8, #2
   b91be:	9217      	str	r2, [sp, #92]	; 0x5c
   b91c0:	f898 2002 	ldrb.w	r2, [r8, #2]
   b91c4:	e785      	b.n	b90d2 <_strtod_l+0x1a2>
   b91c6:	f04f 0c01 	mov.w	ip, #1
   b91ca:	e7f6      	b.n	b91ba <_strtod_l+0x28a>
   b91cc:	000bc43c 	.word	0x000bc43c
   b91d0:	000bc278 	.word	0x000bc278
   b91d4:	7ff00000 	.word	0x7ff00000
   b91d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b91da:	1c51      	adds	r1, r2, #1
   b91dc:	9117      	str	r1, [sp, #92]	; 0x5c
   b91de:	7852      	ldrb	r2, [r2, #1]
   b91e0:	2a30      	cmp	r2, #48	; 0x30
   b91e2:	d0f9      	beq.n	b91d8 <_strtod_l+0x2a8>
   b91e4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b91e8:	2908      	cmp	r1, #8
   b91ea:	f63f af79 	bhi.w	b90e0 <_strtod_l+0x1b0>
   b91ee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b91f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b91f4:	9206      	str	r2, [sp, #24]
   b91f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b91f8:	1c51      	adds	r1, r2, #1
   b91fa:	9117      	str	r1, [sp, #92]	; 0x5c
   b91fc:	7852      	ldrb	r2, [r2, #1]
   b91fe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b9202:	2e09      	cmp	r6, #9
   b9204:	d937      	bls.n	b9276 <_strtod_l+0x346>
   b9206:	9e06      	ldr	r6, [sp, #24]
   b9208:	1b89      	subs	r1, r1, r6
   b920a:	2908      	cmp	r1, #8
   b920c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b9210:	dc02      	bgt.n	b9218 <_strtod_l+0x2e8>
   b9212:	4576      	cmp	r6, lr
   b9214:	bfa8      	it	ge
   b9216:	4676      	movge	r6, lr
   b9218:	f1bc 0f00 	cmp.w	ip, #0
   b921c:	d000      	beq.n	b9220 <_strtod_l+0x2f0>
   b921e:	4276      	negs	r6, r6
   b9220:	2d00      	cmp	r5, #0
   b9222:	d14d      	bne.n	b92c0 <_strtod_l+0x390>
   b9224:	9904      	ldr	r1, [sp, #16]
   b9226:	4301      	orrs	r1, r0
   b9228:	f47f aec6 	bne.w	b8fb8 <_strtod_l+0x88>
   b922c:	2b00      	cmp	r3, #0
   b922e:	f47f aee1 	bne.w	b8ff4 <_strtod_l+0xc4>
   b9232:	2a69      	cmp	r2, #105	; 0x69
   b9234:	d027      	beq.n	b9286 <_strtod_l+0x356>
   b9236:	dc24      	bgt.n	b9282 <_strtod_l+0x352>
   b9238:	2a49      	cmp	r2, #73	; 0x49
   b923a:	d024      	beq.n	b9286 <_strtod_l+0x356>
   b923c:	2a4e      	cmp	r2, #78	; 0x4e
   b923e:	f47f aed9 	bne.w	b8ff4 <_strtod_l+0xc4>
   b9242:	499f      	ldr	r1, [pc, #636]	; (b94c0 <_strtod_l+0x590>)
   b9244:	a817      	add	r0, sp, #92	; 0x5c
   b9246:	f001 f833 	bl	ba2b0 <__match>
   b924a:	2800      	cmp	r0, #0
   b924c:	f43f aed2 	beq.w	b8ff4 <_strtod_l+0xc4>
   b9250:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9252:	781b      	ldrb	r3, [r3, #0]
   b9254:	2b28      	cmp	r3, #40	; 0x28
   b9256:	d12d      	bne.n	b92b4 <_strtod_l+0x384>
   b9258:	499a      	ldr	r1, [pc, #616]	; (b94c4 <_strtod_l+0x594>)
   b925a:	aa1a      	add	r2, sp, #104	; 0x68
   b925c:	a817      	add	r0, sp, #92	; 0x5c
   b925e:	f001 f83b 	bl	ba2d8 <__hexnan>
   b9262:	2805      	cmp	r0, #5
   b9264:	d126      	bne.n	b92b4 <_strtod_l+0x384>
   b9266:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b9268:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b926c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b9270:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b9274:	e6a0      	b.n	b8fb8 <_strtod_l+0x88>
   b9276:	210a      	movs	r1, #10
   b9278:	fb01 2e0e 	mla	lr, r1, lr, r2
   b927c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b9280:	e7b9      	b.n	b91f6 <_strtod_l+0x2c6>
   b9282:	2a6e      	cmp	r2, #110	; 0x6e
   b9284:	e7db      	b.n	b923e <_strtod_l+0x30e>
   b9286:	4990      	ldr	r1, [pc, #576]	; (b94c8 <_strtod_l+0x598>)
   b9288:	a817      	add	r0, sp, #92	; 0x5c
   b928a:	f001 f811 	bl	ba2b0 <__match>
   b928e:	2800      	cmp	r0, #0
   b9290:	f43f aeb0 	beq.w	b8ff4 <_strtod_l+0xc4>
   b9294:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9296:	498d      	ldr	r1, [pc, #564]	; (b94cc <_strtod_l+0x59c>)
   b9298:	3b01      	subs	r3, #1
   b929a:	a817      	add	r0, sp, #92	; 0x5c
   b929c:	9317      	str	r3, [sp, #92]	; 0x5c
   b929e:	f001 f807 	bl	ba2b0 <__match>
   b92a2:	b910      	cbnz	r0, b92aa <_strtod_l+0x37a>
   b92a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b92a6:	3301      	adds	r3, #1
   b92a8:	9317      	str	r3, [sp, #92]	; 0x5c
   b92aa:	f8df b230 	ldr.w	fp, [pc, #560]	; b94dc <_strtod_l+0x5ac>
   b92ae:	f04f 0a00 	mov.w	sl, #0
   b92b2:	e681      	b.n	b8fb8 <_strtod_l+0x88>
   b92b4:	4886      	ldr	r0, [pc, #536]	; (b94d0 <_strtod_l+0x5a0>)
   b92b6:	f001 fd93 	bl	bade0 <nan>
   b92ba:	ec5b ab10 	vmov	sl, fp, d0
   b92be:	e67b      	b.n	b8fb8 <_strtod_l+0x88>
   b92c0:	9b05      	ldr	r3, [sp, #20]
   b92c2:	9807      	ldr	r0, [sp, #28]
   b92c4:	1af3      	subs	r3, r6, r3
   b92c6:	2f00      	cmp	r7, #0
   b92c8:	bf08      	it	eq
   b92ca:	462f      	moveq	r7, r5
   b92cc:	2d10      	cmp	r5, #16
   b92ce:	9306      	str	r3, [sp, #24]
   b92d0:	46a8      	mov	r8, r5
   b92d2:	bfa8      	it	ge
   b92d4:	f04f 0810 	movge.w	r8, #16
   b92d8:	f7ff f99e 	bl	b8618 <__aeabi_ui2d>
   b92dc:	2d09      	cmp	r5, #9
   b92de:	4682      	mov	sl, r0
   b92e0:	468b      	mov	fp, r1
   b92e2:	dd13      	ble.n	b930c <_strtod_l+0x3dc>
   b92e4:	4b7b      	ldr	r3, [pc, #492]	; (b94d4 <_strtod_l+0x5a4>)
   b92e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b92ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b92ee:	f7ff fa0d 	bl	b870c <__aeabi_dmul>
   b92f2:	4682      	mov	sl, r0
   b92f4:	4648      	mov	r0, r9
   b92f6:	468b      	mov	fp, r1
   b92f8:	f7ff f98e 	bl	b8618 <__aeabi_ui2d>
   b92fc:	4602      	mov	r2, r0
   b92fe:	460b      	mov	r3, r1
   b9300:	4650      	mov	r0, sl
   b9302:	4659      	mov	r1, fp
   b9304:	f7ff f84c 	bl	b83a0 <__adddf3>
   b9308:	4682      	mov	sl, r0
   b930a:	468b      	mov	fp, r1
   b930c:	2d0f      	cmp	r5, #15
   b930e:	dc38      	bgt.n	b9382 <_strtod_l+0x452>
   b9310:	9b06      	ldr	r3, [sp, #24]
   b9312:	2b00      	cmp	r3, #0
   b9314:	f43f ae50 	beq.w	b8fb8 <_strtod_l+0x88>
   b9318:	dd24      	ble.n	b9364 <_strtod_l+0x434>
   b931a:	2b16      	cmp	r3, #22
   b931c:	dc0b      	bgt.n	b9336 <_strtod_l+0x406>
   b931e:	496d      	ldr	r1, [pc, #436]	; (b94d4 <_strtod_l+0x5a4>)
   b9320:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b9324:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9328:	4652      	mov	r2, sl
   b932a:	465b      	mov	r3, fp
   b932c:	f7ff f9ee 	bl	b870c <__aeabi_dmul>
   b9330:	4682      	mov	sl, r0
   b9332:	468b      	mov	fp, r1
   b9334:	e640      	b.n	b8fb8 <_strtod_l+0x88>
   b9336:	9a06      	ldr	r2, [sp, #24]
   b9338:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b933c:	4293      	cmp	r3, r2
   b933e:	db20      	blt.n	b9382 <_strtod_l+0x452>
   b9340:	4c64      	ldr	r4, [pc, #400]	; (b94d4 <_strtod_l+0x5a4>)
   b9342:	f1c5 050f 	rsb	r5, r5, #15
   b9346:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b934a:	4652      	mov	r2, sl
   b934c:	465b      	mov	r3, fp
   b934e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9352:	f7ff f9db 	bl	b870c <__aeabi_dmul>
   b9356:	9b06      	ldr	r3, [sp, #24]
   b9358:	1b5d      	subs	r5, r3, r5
   b935a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b935e:	e9d4 2300 	ldrd	r2, r3, [r4]
   b9362:	e7e3      	b.n	b932c <_strtod_l+0x3fc>
   b9364:	9b06      	ldr	r3, [sp, #24]
   b9366:	3316      	adds	r3, #22
   b9368:	db0b      	blt.n	b9382 <_strtod_l+0x452>
   b936a:	9b05      	ldr	r3, [sp, #20]
   b936c:	1b9e      	subs	r6, r3, r6
   b936e:	4b59      	ldr	r3, [pc, #356]	; (b94d4 <_strtod_l+0x5a4>)
   b9370:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b9374:	e9d6 2300 	ldrd	r2, r3, [r6]
   b9378:	4650      	mov	r0, sl
   b937a:	4659      	mov	r1, fp
   b937c:	f7ff faf0 	bl	b8960 <__aeabi_ddiv>
   b9380:	e7d6      	b.n	b9330 <_strtod_l+0x400>
   b9382:	9b06      	ldr	r3, [sp, #24]
   b9384:	eba5 0808 	sub.w	r8, r5, r8
   b9388:	4498      	add	r8, r3
   b938a:	f1b8 0f00 	cmp.w	r8, #0
   b938e:	dd74      	ble.n	b947a <_strtod_l+0x54a>
   b9390:	f018 030f 	ands.w	r3, r8, #15
   b9394:	d00a      	beq.n	b93ac <_strtod_l+0x47c>
   b9396:	494f      	ldr	r1, [pc, #316]	; (b94d4 <_strtod_l+0x5a4>)
   b9398:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b939c:	4652      	mov	r2, sl
   b939e:	465b      	mov	r3, fp
   b93a0:	e9d1 0100 	ldrd	r0, r1, [r1]
   b93a4:	f7ff f9b2 	bl	b870c <__aeabi_dmul>
   b93a8:	4682      	mov	sl, r0
   b93aa:	468b      	mov	fp, r1
   b93ac:	f038 080f 	bics.w	r8, r8, #15
   b93b0:	d04f      	beq.n	b9452 <_strtod_l+0x522>
   b93b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b93b6:	dd22      	ble.n	b93fe <_strtod_l+0x4ce>
   b93b8:	2500      	movs	r5, #0
   b93ba:	462e      	mov	r6, r5
   b93bc:	9507      	str	r5, [sp, #28]
   b93be:	9505      	str	r5, [sp, #20]
   b93c0:	2322      	movs	r3, #34	; 0x22
   b93c2:	f8df b118 	ldr.w	fp, [pc, #280]	; b94dc <_strtod_l+0x5ac>
   b93c6:	6023      	str	r3, [r4, #0]
   b93c8:	f04f 0a00 	mov.w	sl, #0
   b93cc:	9b07      	ldr	r3, [sp, #28]
   b93ce:	2b00      	cmp	r3, #0
   b93d0:	f43f adf2 	beq.w	b8fb8 <_strtod_l+0x88>
   b93d4:	9918      	ldr	r1, [sp, #96]	; 0x60
   b93d6:	4620      	mov	r0, r4
   b93d8:	f001 f870 	bl	ba4bc <_Bfree>
   b93dc:	9905      	ldr	r1, [sp, #20]
   b93de:	4620      	mov	r0, r4
   b93e0:	f001 f86c 	bl	ba4bc <_Bfree>
   b93e4:	4631      	mov	r1, r6
   b93e6:	4620      	mov	r0, r4
   b93e8:	f001 f868 	bl	ba4bc <_Bfree>
   b93ec:	9907      	ldr	r1, [sp, #28]
   b93ee:	4620      	mov	r0, r4
   b93f0:	f001 f864 	bl	ba4bc <_Bfree>
   b93f4:	4629      	mov	r1, r5
   b93f6:	4620      	mov	r0, r4
   b93f8:	f001 f860 	bl	ba4bc <_Bfree>
   b93fc:	e5dc      	b.n	b8fb8 <_strtod_l+0x88>
   b93fe:	4b36      	ldr	r3, [pc, #216]	; (b94d8 <_strtod_l+0x5a8>)
   b9400:	9304      	str	r3, [sp, #16]
   b9402:	2300      	movs	r3, #0
   b9404:	ea4f 1828 	mov.w	r8, r8, asr #4
   b9408:	4650      	mov	r0, sl
   b940a:	4659      	mov	r1, fp
   b940c:	4699      	mov	r9, r3
   b940e:	f1b8 0f01 	cmp.w	r8, #1
   b9412:	dc21      	bgt.n	b9458 <_strtod_l+0x528>
   b9414:	b10b      	cbz	r3, b941a <_strtod_l+0x4ea>
   b9416:	4682      	mov	sl, r0
   b9418:	468b      	mov	fp, r1
   b941a:	4b2f      	ldr	r3, [pc, #188]	; (b94d8 <_strtod_l+0x5a8>)
   b941c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b9420:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b9424:	4652      	mov	r2, sl
   b9426:	465b      	mov	r3, fp
   b9428:	e9d9 0100 	ldrd	r0, r1, [r9]
   b942c:	f7ff f96e 	bl	b870c <__aeabi_dmul>
   b9430:	4b2a      	ldr	r3, [pc, #168]	; (b94dc <_strtod_l+0x5ac>)
   b9432:	460a      	mov	r2, r1
   b9434:	400b      	ands	r3, r1
   b9436:	492a      	ldr	r1, [pc, #168]	; (b94e0 <_strtod_l+0x5b0>)
   b9438:	428b      	cmp	r3, r1
   b943a:	4682      	mov	sl, r0
   b943c:	d8bc      	bhi.n	b93b8 <_strtod_l+0x488>
   b943e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b9442:	428b      	cmp	r3, r1
   b9444:	bf86      	itte	hi
   b9446:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b94e4 <_strtod_l+0x5b4>
   b944a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   b944e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b9452:	2300      	movs	r3, #0
   b9454:	9304      	str	r3, [sp, #16]
   b9456:	e084      	b.n	b9562 <_strtod_l+0x632>
   b9458:	f018 0f01 	tst.w	r8, #1
   b945c:	d005      	beq.n	b946a <_strtod_l+0x53a>
   b945e:	9b04      	ldr	r3, [sp, #16]
   b9460:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9464:	f7ff f952 	bl	b870c <__aeabi_dmul>
   b9468:	2301      	movs	r3, #1
   b946a:	9a04      	ldr	r2, [sp, #16]
   b946c:	3208      	adds	r2, #8
   b946e:	f109 0901 	add.w	r9, r9, #1
   b9472:	ea4f 0868 	mov.w	r8, r8, asr #1
   b9476:	9204      	str	r2, [sp, #16]
   b9478:	e7c9      	b.n	b940e <_strtod_l+0x4de>
   b947a:	d0ea      	beq.n	b9452 <_strtod_l+0x522>
   b947c:	f1c8 0800 	rsb	r8, r8, #0
   b9480:	f018 020f 	ands.w	r2, r8, #15
   b9484:	d00a      	beq.n	b949c <_strtod_l+0x56c>
   b9486:	4b13      	ldr	r3, [pc, #76]	; (b94d4 <_strtod_l+0x5a4>)
   b9488:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b948c:	4650      	mov	r0, sl
   b948e:	4659      	mov	r1, fp
   b9490:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9494:	f7ff fa64 	bl	b8960 <__aeabi_ddiv>
   b9498:	4682      	mov	sl, r0
   b949a:	468b      	mov	fp, r1
   b949c:	ea5f 1828 	movs.w	r8, r8, asr #4
   b94a0:	d0d7      	beq.n	b9452 <_strtod_l+0x522>
   b94a2:	f1b8 0f1f 	cmp.w	r8, #31
   b94a6:	dd1f      	ble.n	b94e8 <_strtod_l+0x5b8>
   b94a8:	2500      	movs	r5, #0
   b94aa:	462e      	mov	r6, r5
   b94ac:	9507      	str	r5, [sp, #28]
   b94ae:	9505      	str	r5, [sp, #20]
   b94b0:	2322      	movs	r3, #34	; 0x22
   b94b2:	f04f 0a00 	mov.w	sl, #0
   b94b6:	f04f 0b00 	mov.w	fp, #0
   b94ba:	6023      	str	r3, [r4, #0]
   b94bc:	e786      	b.n	b93cc <_strtod_l+0x49c>
   b94be:	bf00      	nop
   b94c0:	000bbfbd 	.word	0x000bbfbd
   b94c4:	000bc28c 	.word	0x000bc28c
   b94c8:	000bbfc1 	.word	0x000bbfc1
   b94cc:	000bc271 	.word	0x000bc271
   b94d0:	000baf6c 	.word	0x000baf6c
   b94d4:	000bc4d0 	.word	0x000bc4d0
   b94d8:	000bc4a8 	.word	0x000bc4a8
   b94dc:	7ff00000 	.word	0x7ff00000
   b94e0:	7ca00000 	.word	0x7ca00000
   b94e4:	7fefffff 	.word	0x7fefffff
   b94e8:	f018 0310 	ands.w	r3, r8, #16
   b94ec:	bf18      	it	ne
   b94ee:	236a      	movne	r3, #106	; 0x6a
   b94f0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b98a0 <_strtod_l+0x970>
   b94f4:	9304      	str	r3, [sp, #16]
   b94f6:	4650      	mov	r0, sl
   b94f8:	4659      	mov	r1, fp
   b94fa:	2300      	movs	r3, #0
   b94fc:	f018 0f01 	tst.w	r8, #1
   b9500:	d004      	beq.n	b950c <_strtod_l+0x5dc>
   b9502:	e9d9 2300 	ldrd	r2, r3, [r9]
   b9506:	f7ff f901 	bl	b870c <__aeabi_dmul>
   b950a:	2301      	movs	r3, #1
   b950c:	ea5f 0868 	movs.w	r8, r8, asr #1
   b9510:	f109 0908 	add.w	r9, r9, #8
   b9514:	d1f2      	bne.n	b94fc <_strtod_l+0x5cc>
   b9516:	b10b      	cbz	r3, b951c <_strtod_l+0x5ec>
   b9518:	4682      	mov	sl, r0
   b951a:	468b      	mov	fp, r1
   b951c:	9b04      	ldr	r3, [sp, #16]
   b951e:	b1c3      	cbz	r3, b9552 <_strtod_l+0x622>
   b9520:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b9524:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b9528:	2b00      	cmp	r3, #0
   b952a:	4659      	mov	r1, fp
   b952c:	dd11      	ble.n	b9552 <_strtod_l+0x622>
   b952e:	2b1f      	cmp	r3, #31
   b9530:	f340 8124 	ble.w	b977c <_strtod_l+0x84c>
   b9534:	2b34      	cmp	r3, #52	; 0x34
   b9536:	bfde      	ittt	le
   b9538:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b953c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   b9540:	fa03 f202 	lslle.w	r2, r3, r2
   b9544:	f04f 0a00 	mov.w	sl, #0
   b9548:	bfcc      	ite	gt
   b954a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b954e:	ea02 0b01 	andle.w	fp, r2, r1
   b9552:	2200      	movs	r2, #0
   b9554:	2300      	movs	r3, #0
   b9556:	4650      	mov	r0, sl
   b9558:	4659      	mov	r1, fp
   b955a:	f7ff fb3f 	bl	b8bdc <__aeabi_dcmpeq>
   b955e:	2800      	cmp	r0, #0
   b9560:	d1a2      	bne.n	b94a8 <_strtod_l+0x578>
   b9562:	9b07      	ldr	r3, [sp, #28]
   b9564:	9300      	str	r3, [sp, #0]
   b9566:	9908      	ldr	r1, [sp, #32]
   b9568:	462b      	mov	r3, r5
   b956a:	463a      	mov	r2, r7
   b956c:	4620      	mov	r0, r4
   b956e:	f001 f80d 	bl	ba58c <__s2b>
   b9572:	9007      	str	r0, [sp, #28]
   b9574:	2800      	cmp	r0, #0
   b9576:	f43f af1f 	beq.w	b93b8 <_strtod_l+0x488>
   b957a:	9b05      	ldr	r3, [sp, #20]
   b957c:	1b9e      	subs	r6, r3, r6
   b957e:	9b06      	ldr	r3, [sp, #24]
   b9580:	2b00      	cmp	r3, #0
   b9582:	bfb4      	ite	lt
   b9584:	4633      	movlt	r3, r6
   b9586:	2300      	movge	r3, #0
   b9588:	930c      	str	r3, [sp, #48]	; 0x30
   b958a:	9b06      	ldr	r3, [sp, #24]
   b958c:	2500      	movs	r5, #0
   b958e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b9592:	9312      	str	r3, [sp, #72]	; 0x48
   b9594:	462e      	mov	r6, r5
   b9596:	9b07      	ldr	r3, [sp, #28]
   b9598:	4620      	mov	r0, r4
   b959a:	6859      	ldr	r1, [r3, #4]
   b959c:	f000 ff4e 	bl	ba43c <_Balloc>
   b95a0:	9005      	str	r0, [sp, #20]
   b95a2:	2800      	cmp	r0, #0
   b95a4:	f43f af0c 	beq.w	b93c0 <_strtod_l+0x490>
   b95a8:	9b07      	ldr	r3, [sp, #28]
   b95aa:	691a      	ldr	r2, [r3, #16]
   b95ac:	3202      	adds	r2, #2
   b95ae:	f103 010c 	add.w	r1, r3, #12
   b95b2:	0092      	lsls	r2, r2, #2
   b95b4:	300c      	adds	r0, #12
   b95b6:	f7ff fc20 	bl	b8dfa <memcpy>
   b95ba:	ec4b ab10 	vmov	d0, sl, fp
   b95be:	aa1a      	add	r2, sp, #104	; 0x68
   b95c0:	a919      	add	r1, sp, #100	; 0x64
   b95c2:	4620      	mov	r0, r4
   b95c4:	f001 fb28 	bl	bac18 <__d2b>
   b95c8:	ec4b ab18 	vmov	d8, sl, fp
   b95cc:	9018      	str	r0, [sp, #96]	; 0x60
   b95ce:	2800      	cmp	r0, #0
   b95d0:	f43f aef6 	beq.w	b93c0 <_strtod_l+0x490>
   b95d4:	2101      	movs	r1, #1
   b95d6:	4620      	mov	r0, r4
   b95d8:	f001 f872 	bl	ba6c0 <__i2b>
   b95dc:	4606      	mov	r6, r0
   b95de:	2800      	cmp	r0, #0
   b95e0:	f43f aeee 	beq.w	b93c0 <_strtod_l+0x490>
   b95e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b95e6:	9904      	ldr	r1, [sp, #16]
   b95e8:	2b00      	cmp	r3, #0
   b95ea:	bfab      	itete	ge
   b95ec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b95ee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b95f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b95f2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b95f6:	bfac      	ite	ge
   b95f8:	eb03 0902 	addge.w	r9, r3, r2
   b95fc:	1ad7      	sublt	r7, r2, r3
   b95fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b9600:	eba3 0801 	sub.w	r8, r3, r1
   b9604:	4490      	add	r8, r2
   b9606:	4ba1      	ldr	r3, [pc, #644]	; (b988c <_strtod_l+0x95c>)
   b9608:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b960c:	4598      	cmp	r8, r3
   b960e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b9612:	f280 80c7 	bge.w	b97a4 <_strtod_l+0x874>
   b9616:	eba3 0308 	sub.w	r3, r3, r8
   b961a:	2b1f      	cmp	r3, #31
   b961c:	eba2 0203 	sub.w	r2, r2, r3
   b9620:	f04f 0101 	mov.w	r1, #1
   b9624:	f300 80b1 	bgt.w	b978a <_strtod_l+0x85a>
   b9628:	fa01 f303 	lsl.w	r3, r1, r3
   b962c:	930d      	str	r3, [sp, #52]	; 0x34
   b962e:	2300      	movs	r3, #0
   b9630:	9308      	str	r3, [sp, #32]
   b9632:	eb09 0802 	add.w	r8, r9, r2
   b9636:	9b04      	ldr	r3, [sp, #16]
   b9638:	45c1      	cmp	r9, r8
   b963a:	4417      	add	r7, r2
   b963c:	441f      	add	r7, r3
   b963e:	464b      	mov	r3, r9
   b9640:	bfa8      	it	ge
   b9642:	4643      	movge	r3, r8
   b9644:	42bb      	cmp	r3, r7
   b9646:	bfa8      	it	ge
   b9648:	463b      	movge	r3, r7
   b964a:	2b00      	cmp	r3, #0
   b964c:	bfc2      	ittt	gt
   b964e:	eba8 0803 	subgt.w	r8, r8, r3
   b9652:	1aff      	subgt	r7, r7, r3
   b9654:	eba9 0903 	subgt.w	r9, r9, r3
   b9658:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b965a:	2b00      	cmp	r3, #0
   b965c:	dd17      	ble.n	b968e <_strtod_l+0x75e>
   b965e:	4631      	mov	r1, r6
   b9660:	461a      	mov	r2, r3
   b9662:	4620      	mov	r0, r4
   b9664:	f001 f8ec 	bl	ba840 <__pow5mult>
   b9668:	4606      	mov	r6, r0
   b966a:	2800      	cmp	r0, #0
   b966c:	f43f aea8 	beq.w	b93c0 <_strtod_l+0x490>
   b9670:	4601      	mov	r1, r0
   b9672:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b9674:	4620      	mov	r0, r4
   b9676:	f001 f839 	bl	ba6ec <__multiply>
   b967a:	900b      	str	r0, [sp, #44]	; 0x2c
   b967c:	2800      	cmp	r0, #0
   b967e:	f43f ae9f 	beq.w	b93c0 <_strtod_l+0x490>
   b9682:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9684:	4620      	mov	r0, r4
   b9686:	f000 ff19 	bl	ba4bc <_Bfree>
   b968a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b968c:	9318      	str	r3, [sp, #96]	; 0x60
   b968e:	f1b8 0f00 	cmp.w	r8, #0
   b9692:	f300 808c 	bgt.w	b97ae <_strtod_l+0x87e>
   b9696:	9b06      	ldr	r3, [sp, #24]
   b9698:	2b00      	cmp	r3, #0
   b969a:	dd08      	ble.n	b96ae <_strtod_l+0x77e>
   b969c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b969e:	9905      	ldr	r1, [sp, #20]
   b96a0:	4620      	mov	r0, r4
   b96a2:	f001 f8cd 	bl	ba840 <__pow5mult>
   b96a6:	9005      	str	r0, [sp, #20]
   b96a8:	2800      	cmp	r0, #0
   b96aa:	f43f ae89 	beq.w	b93c0 <_strtod_l+0x490>
   b96ae:	2f00      	cmp	r7, #0
   b96b0:	dd08      	ble.n	b96c4 <_strtod_l+0x794>
   b96b2:	9905      	ldr	r1, [sp, #20]
   b96b4:	463a      	mov	r2, r7
   b96b6:	4620      	mov	r0, r4
   b96b8:	f001 f91c 	bl	ba8f4 <__lshift>
   b96bc:	9005      	str	r0, [sp, #20]
   b96be:	2800      	cmp	r0, #0
   b96c0:	f43f ae7e 	beq.w	b93c0 <_strtod_l+0x490>
   b96c4:	f1b9 0f00 	cmp.w	r9, #0
   b96c8:	dd08      	ble.n	b96dc <_strtod_l+0x7ac>
   b96ca:	4631      	mov	r1, r6
   b96cc:	464a      	mov	r2, r9
   b96ce:	4620      	mov	r0, r4
   b96d0:	f001 f910 	bl	ba8f4 <__lshift>
   b96d4:	4606      	mov	r6, r0
   b96d6:	2800      	cmp	r0, #0
   b96d8:	f43f ae72 	beq.w	b93c0 <_strtod_l+0x490>
   b96dc:	9a05      	ldr	r2, [sp, #20]
   b96de:	9918      	ldr	r1, [sp, #96]	; 0x60
   b96e0:	4620      	mov	r0, r4
   b96e2:	f001 f993 	bl	baa0c <__mdiff>
   b96e6:	4605      	mov	r5, r0
   b96e8:	2800      	cmp	r0, #0
   b96ea:	f43f ae69 	beq.w	b93c0 <_strtod_l+0x490>
   b96ee:	68c3      	ldr	r3, [r0, #12]
   b96f0:	930b      	str	r3, [sp, #44]	; 0x2c
   b96f2:	2300      	movs	r3, #0
   b96f4:	60c3      	str	r3, [r0, #12]
   b96f6:	4631      	mov	r1, r6
   b96f8:	f001 f96c 	bl	ba9d4 <__mcmp>
   b96fc:	2800      	cmp	r0, #0
   b96fe:	da60      	bge.n	b97c2 <_strtod_l+0x892>
   b9700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9702:	ea53 030a 	orrs.w	r3, r3, sl
   b9706:	f040 8082 	bne.w	b980e <_strtod_l+0x8de>
   b970a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b970e:	2b00      	cmp	r3, #0
   b9710:	d17d      	bne.n	b980e <_strtod_l+0x8de>
   b9712:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b9716:	0d1b      	lsrs	r3, r3, #20
   b9718:	051b      	lsls	r3, r3, #20
   b971a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b971e:	d976      	bls.n	b980e <_strtod_l+0x8de>
   b9720:	696b      	ldr	r3, [r5, #20]
   b9722:	b913      	cbnz	r3, b972a <_strtod_l+0x7fa>
   b9724:	692b      	ldr	r3, [r5, #16]
   b9726:	2b01      	cmp	r3, #1
   b9728:	dd71      	ble.n	b980e <_strtod_l+0x8de>
   b972a:	4629      	mov	r1, r5
   b972c:	2201      	movs	r2, #1
   b972e:	4620      	mov	r0, r4
   b9730:	f001 f8e0 	bl	ba8f4 <__lshift>
   b9734:	4631      	mov	r1, r6
   b9736:	4605      	mov	r5, r0
   b9738:	f001 f94c 	bl	ba9d4 <__mcmp>
   b973c:	2800      	cmp	r0, #0
   b973e:	dd66      	ble.n	b980e <_strtod_l+0x8de>
   b9740:	9904      	ldr	r1, [sp, #16]
   b9742:	4a53      	ldr	r2, [pc, #332]	; (b9890 <_strtod_l+0x960>)
   b9744:	465b      	mov	r3, fp
   b9746:	2900      	cmp	r1, #0
   b9748:	f000 8081 	beq.w	b984e <_strtod_l+0x91e>
   b974c:	ea02 010b 	and.w	r1, r2, fp
   b9750:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b9754:	dc7b      	bgt.n	b984e <_strtod_l+0x91e>
   b9756:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b975a:	f77f aea9 	ble.w	b94b0 <_strtod_l+0x580>
   b975e:	4b4d      	ldr	r3, [pc, #308]	; (b9894 <_strtod_l+0x964>)
   b9760:	4650      	mov	r0, sl
   b9762:	4659      	mov	r1, fp
   b9764:	2200      	movs	r2, #0
   b9766:	f7fe ffd1 	bl	b870c <__aeabi_dmul>
   b976a:	460b      	mov	r3, r1
   b976c:	4303      	orrs	r3, r0
   b976e:	bf08      	it	eq
   b9770:	2322      	moveq	r3, #34	; 0x22
   b9772:	4682      	mov	sl, r0
   b9774:	468b      	mov	fp, r1
   b9776:	bf08      	it	eq
   b9778:	6023      	streq	r3, [r4, #0]
   b977a:	e62b      	b.n	b93d4 <_strtod_l+0x4a4>
   b977c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9780:	fa02 f303 	lsl.w	r3, r2, r3
   b9784:	ea03 0a0a 	and.w	sl, r3, sl
   b9788:	e6e3      	b.n	b9552 <_strtod_l+0x622>
   b978a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b978e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b9792:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b9796:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b979a:	fa01 f308 	lsl.w	r3, r1, r8
   b979e:	9308      	str	r3, [sp, #32]
   b97a0:	910d      	str	r1, [sp, #52]	; 0x34
   b97a2:	e746      	b.n	b9632 <_strtod_l+0x702>
   b97a4:	2300      	movs	r3, #0
   b97a6:	9308      	str	r3, [sp, #32]
   b97a8:	2301      	movs	r3, #1
   b97aa:	930d      	str	r3, [sp, #52]	; 0x34
   b97ac:	e741      	b.n	b9632 <_strtod_l+0x702>
   b97ae:	9918      	ldr	r1, [sp, #96]	; 0x60
   b97b0:	4642      	mov	r2, r8
   b97b2:	4620      	mov	r0, r4
   b97b4:	f001 f89e 	bl	ba8f4 <__lshift>
   b97b8:	9018      	str	r0, [sp, #96]	; 0x60
   b97ba:	2800      	cmp	r0, #0
   b97bc:	f47f af6b 	bne.w	b9696 <_strtod_l+0x766>
   b97c0:	e5fe      	b.n	b93c0 <_strtod_l+0x490>
   b97c2:	465f      	mov	r7, fp
   b97c4:	d16e      	bne.n	b98a4 <_strtod_l+0x974>
   b97c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b97c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b97cc:	b342      	cbz	r2, b9820 <_strtod_l+0x8f0>
   b97ce:	4a32      	ldr	r2, [pc, #200]	; (b9898 <_strtod_l+0x968>)
   b97d0:	4293      	cmp	r3, r2
   b97d2:	d128      	bne.n	b9826 <_strtod_l+0x8f6>
   b97d4:	9b04      	ldr	r3, [sp, #16]
   b97d6:	4651      	mov	r1, sl
   b97d8:	b1eb      	cbz	r3, b9816 <_strtod_l+0x8e6>
   b97da:	4b2d      	ldr	r3, [pc, #180]	; (b9890 <_strtod_l+0x960>)
   b97dc:	403b      	ands	r3, r7
   b97de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b97e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b97e6:	d819      	bhi.n	b981c <_strtod_l+0x8ec>
   b97e8:	0d1b      	lsrs	r3, r3, #20
   b97ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b97ee:	fa02 f303 	lsl.w	r3, r2, r3
   b97f2:	4299      	cmp	r1, r3
   b97f4:	d117      	bne.n	b9826 <_strtod_l+0x8f6>
   b97f6:	4b29      	ldr	r3, [pc, #164]	; (b989c <_strtod_l+0x96c>)
   b97f8:	429f      	cmp	r7, r3
   b97fa:	d102      	bne.n	b9802 <_strtod_l+0x8d2>
   b97fc:	3101      	adds	r1, #1
   b97fe:	f43f addf 	beq.w	b93c0 <_strtod_l+0x490>
   b9802:	4b23      	ldr	r3, [pc, #140]	; (b9890 <_strtod_l+0x960>)
   b9804:	403b      	ands	r3, r7
   b9806:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b980a:	f04f 0a00 	mov.w	sl, #0
   b980e:	9b04      	ldr	r3, [sp, #16]
   b9810:	2b00      	cmp	r3, #0
   b9812:	d1a4      	bne.n	b975e <_strtod_l+0x82e>
   b9814:	e5de      	b.n	b93d4 <_strtod_l+0x4a4>
   b9816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b981a:	e7ea      	b.n	b97f2 <_strtod_l+0x8c2>
   b981c:	4613      	mov	r3, r2
   b981e:	e7e8      	b.n	b97f2 <_strtod_l+0x8c2>
   b9820:	ea53 030a 	orrs.w	r3, r3, sl
   b9824:	d08c      	beq.n	b9740 <_strtod_l+0x810>
   b9826:	9b08      	ldr	r3, [sp, #32]
   b9828:	b1db      	cbz	r3, b9862 <_strtod_l+0x932>
   b982a:	423b      	tst	r3, r7
   b982c:	d0ef      	beq.n	b980e <_strtod_l+0x8de>
   b982e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9830:	9a04      	ldr	r2, [sp, #16]
   b9832:	4650      	mov	r0, sl
   b9834:	4659      	mov	r1, fp
   b9836:	b1c3      	cbz	r3, b986a <_strtod_l+0x93a>
   b9838:	f7ff fb5d 	bl	b8ef6 <sulp>
   b983c:	4602      	mov	r2, r0
   b983e:	460b      	mov	r3, r1
   b9840:	ec51 0b18 	vmov	r0, r1, d8
   b9844:	f7fe fdac 	bl	b83a0 <__adddf3>
   b9848:	4682      	mov	sl, r0
   b984a:	468b      	mov	fp, r1
   b984c:	e7df      	b.n	b980e <_strtod_l+0x8de>
   b984e:	4013      	ands	r3, r2
   b9850:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b9854:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b9858:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b985c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b9860:	e7d5      	b.n	b980e <_strtod_l+0x8de>
   b9862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b9864:	ea13 0f0a 	tst.w	r3, sl
   b9868:	e7e0      	b.n	b982c <_strtod_l+0x8fc>
   b986a:	f7ff fb44 	bl	b8ef6 <sulp>
   b986e:	4602      	mov	r2, r0
   b9870:	460b      	mov	r3, r1
   b9872:	ec51 0b18 	vmov	r0, r1, d8
   b9876:	f7fe fd91 	bl	b839c <__aeabi_dsub>
   b987a:	2200      	movs	r2, #0
   b987c:	2300      	movs	r3, #0
   b987e:	4682      	mov	sl, r0
   b9880:	468b      	mov	fp, r1
   b9882:	f7ff f9ab 	bl	b8bdc <__aeabi_dcmpeq>
   b9886:	2800      	cmp	r0, #0
   b9888:	d0c1      	beq.n	b980e <_strtod_l+0x8de>
   b988a:	e611      	b.n	b94b0 <_strtod_l+0x580>
   b988c:	fffffc02 	.word	0xfffffc02
   b9890:	7ff00000 	.word	0x7ff00000
   b9894:	39500000 	.word	0x39500000
   b9898:	000fffff 	.word	0x000fffff
   b989c:	7fefffff 	.word	0x7fefffff
   b98a0:	000bc2a0 	.word	0x000bc2a0
   b98a4:	4631      	mov	r1, r6
   b98a6:	4628      	mov	r0, r5
   b98a8:	f001 fa12 	bl	bacd0 <__ratio>
   b98ac:	ec59 8b10 	vmov	r8, r9, d0
   b98b0:	ee10 0a10 	vmov	r0, s0
   b98b4:	2200      	movs	r2, #0
   b98b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b98ba:	4649      	mov	r1, r9
   b98bc:	f7ff f9a2 	bl	b8c04 <__aeabi_dcmple>
   b98c0:	2800      	cmp	r0, #0
   b98c2:	d07a      	beq.n	b99ba <_strtod_l+0xa8a>
   b98c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b98c6:	2b00      	cmp	r3, #0
   b98c8:	d04a      	beq.n	b9960 <_strtod_l+0xa30>
   b98ca:	4b95      	ldr	r3, [pc, #596]	; (b9b20 <_strtod_l+0xbf0>)
   b98cc:	2200      	movs	r2, #0
   b98ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b98d2:	f8df 924c 	ldr.w	r9, [pc, #588]	; b9b20 <_strtod_l+0xbf0>
   b98d6:	f04f 0800 	mov.w	r8, #0
   b98da:	4b92      	ldr	r3, [pc, #584]	; (b9b24 <_strtod_l+0xbf4>)
   b98dc:	403b      	ands	r3, r7
   b98de:	930d      	str	r3, [sp, #52]	; 0x34
   b98e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b98e2:	4b91      	ldr	r3, [pc, #580]	; (b9b28 <_strtod_l+0xbf8>)
   b98e4:	429a      	cmp	r2, r3
   b98e6:	f040 80b0 	bne.w	b9a4a <_strtod_l+0xb1a>
   b98ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b98ee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b98f2:	ec4b ab10 	vmov	d0, sl, fp
   b98f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b98fa:	f001 f911 	bl	bab20 <__ulp>
   b98fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9902:	ec53 2b10 	vmov	r2, r3, d0
   b9906:	f7fe ff01 	bl	b870c <__aeabi_dmul>
   b990a:	4652      	mov	r2, sl
   b990c:	465b      	mov	r3, fp
   b990e:	f7fe fd47 	bl	b83a0 <__adddf3>
   b9912:	460b      	mov	r3, r1
   b9914:	4983      	ldr	r1, [pc, #524]	; (b9b24 <_strtod_l+0xbf4>)
   b9916:	4a85      	ldr	r2, [pc, #532]	; (b9b2c <_strtod_l+0xbfc>)
   b9918:	4019      	ands	r1, r3
   b991a:	4291      	cmp	r1, r2
   b991c:	4682      	mov	sl, r0
   b991e:	d960      	bls.n	b99e2 <_strtod_l+0xab2>
   b9920:	ee18 3a90 	vmov	r3, s17
   b9924:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b9928:	4293      	cmp	r3, r2
   b992a:	d104      	bne.n	b9936 <_strtod_l+0xa06>
   b992c:	ee18 3a10 	vmov	r3, s16
   b9930:	3301      	adds	r3, #1
   b9932:	f43f ad45 	beq.w	b93c0 <_strtod_l+0x490>
   b9936:	f8df b200 	ldr.w	fp, [pc, #512]	; b9b38 <_strtod_l+0xc08>
   b993a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b993e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9940:	4620      	mov	r0, r4
   b9942:	f000 fdbb 	bl	ba4bc <_Bfree>
   b9946:	9905      	ldr	r1, [sp, #20]
   b9948:	4620      	mov	r0, r4
   b994a:	f000 fdb7 	bl	ba4bc <_Bfree>
   b994e:	4631      	mov	r1, r6
   b9950:	4620      	mov	r0, r4
   b9952:	f000 fdb3 	bl	ba4bc <_Bfree>
   b9956:	4629      	mov	r1, r5
   b9958:	4620      	mov	r0, r4
   b995a:	f000 fdaf 	bl	ba4bc <_Bfree>
   b995e:	e61a      	b.n	b9596 <_strtod_l+0x666>
   b9960:	f1ba 0f00 	cmp.w	sl, #0
   b9964:	d11b      	bne.n	b999e <_strtod_l+0xa6e>
   b9966:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b996a:	b9f3      	cbnz	r3, b99aa <_strtod_l+0xa7a>
   b996c:	4b6c      	ldr	r3, [pc, #432]	; (b9b20 <_strtod_l+0xbf0>)
   b996e:	2200      	movs	r2, #0
   b9970:	4640      	mov	r0, r8
   b9972:	4649      	mov	r1, r9
   b9974:	f7ff f93c 	bl	b8bf0 <__aeabi_dcmplt>
   b9978:	b9d0      	cbnz	r0, b99b0 <_strtod_l+0xa80>
   b997a:	4640      	mov	r0, r8
   b997c:	4649      	mov	r1, r9
   b997e:	4b6c      	ldr	r3, [pc, #432]	; (b9b30 <_strtod_l+0xc00>)
   b9980:	2200      	movs	r2, #0
   b9982:	f7fe fec3 	bl	b870c <__aeabi_dmul>
   b9986:	4680      	mov	r8, r0
   b9988:	4689      	mov	r9, r1
   b998a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b998e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b9992:	9315      	str	r3, [sp, #84]	; 0x54
   b9994:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b9998:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b999c:	e79d      	b.n	b98da <_strtod_l+0x9aa>
   b999e:	f1ba 0f01 	cmp.w	sl, #1
   b99a2:	d102      	bne.n	b99aa <_strtod_l+0xa7a>
   b99a4:	2f00      	cmp	r7, #0
   b99a6:	f43f ad83 	beq.w	b94b0 <_strtod_l+0x580>
   b99aa:	4b62      	ldr	r3, [pc, #392]	; (b9b34 <_strtod_l+0xc04>)
   b99ac:	2200      	movs	r2, #0
   b99ae:	e78e      	b.n	b98ce <_strtod_l+0x99e>
   b99b0:	f8df 917c 	ldr.w	r9, [pc, #380]	; b9b30 <_strtod_l+0xc00>
   b99b4:	f04f 0800 	mov.w	r8, #0
   b99b8:	e7e7      	b.n	b998a <_strtod_l+0xa5a>
   b99ba:	4b5d      	ldr	r3, [pc, #372]	; (b9b30 <_strtod_l+0xc00>)
   b99bc:	4640      	mov	r0, r8
   b99be:	4649      	mov	r1, r9
   b99c0:	2200      	movs	r2, #0
   b99c2:	f7fe fea3 	bl	b870c <__aeabi_dmul>
   b99c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b99c8:	4680      	mov	r8, r0
   b99ca:	4689      	mov	r9, r1
   b99cc:	b933      	cbnz	r3, b99dc <_strtod_l+0xaac>
   b99ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b99d2:	900e      	str	r0, [sp, #56]	; 0x38
   b99d4:	930f      	str	r3, [sp, #60]	; 0x3c
   b99d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b99da:	e7dd      	b.n	b9998 <_strtod_l+0xa68>
   b99dc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b99e0:	e7f9      	b.n	b99d6 <_strtod_l+0xaa6>
   b99e2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b99e6:	9b04      	ldr	r3, [sp, #16]
   b99e8:	2b00      	cmp	r3, #0
   b99ea:	d1a8      	bne.n	b993e <_strtod_l+0xa0e>
   b99ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b99f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b99f2:	0d1b      	lsrs	r3, r3, #20
   b99f4:	051b      	lsls	r3, r3, #20
   b99f6:	429a      	cmp	r2, r3
   b99f8:	d1a1      	bne.n	b993e <_strtod_l+0xa0e>
   b99fa:	4640      	mov	r0, r8
   b99fc:	4649      	mov	r1, r9
   b99fe:	f001 fa05 	bl	bae0c <__aeabi_d2lz>
   b9a02:	f7fe fe55 	bl	b86b0 <__aeabi_l2d>
   b9a06:	4602      	mov	r2, r0
   b9a08:	460b      	mov	r3, r1
   b9a0a:	4640      	mov	r0, r8
   b9a0c:	4649      	mov	r1, r9
   b9a0e:	f7fe fcc5 	bl	b839c <__aeabi_dsub>
   b9a12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b9a14:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9a18:	ea43 030a 	orr.w	r3, r3, sl
   b9a1c:	4313      	orrs	r3, r2
   b9a1e:	4680      	mov	r8, r0
   b9a20:	4689      	mov	r9, r1
   b9a22:	d055      	beq.n	b9ad0 <_strtod_l+0xba0>
   b9a24:	a336      	add	r3, pc, #216	; (adr r3, b9b00 <_strtod_l+0xbd0>)
   b9a26:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9a2a:	f7ff f8e1 	bl	b8bf0 <__aeabi_dcmplt>
   b9a2e:	2800      	cmp	r0, #0
   b9a30:	f47f acd0 	bne.w	b93d4 <_strtod_l+0x4a4>
   b9a34:	a334      	add	r3, pc, #208	; (adr r3, b9b08 <_strtod_l+0xbd8>)
   b9a36:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9a3a:	4640      	mov	r0, r8
   b9a3c:	4649      	mov	r1, r9
   b9a3e:	f7ff f8f5 	bl	b8c2c <__aeabi_dcmpgt>
   b9a42:	2800      	cmp	r0, #0
   b9a44:	f43f af7b 	beq.w	b993e <_strtod_l+0xa0e>
   b9a48:	e4c4      	b.n	b93d4 <_strtod_l+0x4a4>
   b9a4a:	9b04      	ldr	r3, [sp, #16]
   b9a4c:	b333      	cbz	r3, b9a9c <_strtod_l+0xb6c>
   b9a4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b9a50:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b9a54:	d822      	bhi.n	b9a9c <_strtod_l+0xb6c>
   b9a56:	a32e      	add	r3, pc, #184	; (adr r3, b9b10 <_strtod_l+0xbe0>)
   b9a58:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9a5c:	4640      	mov	r0, r8
   b9a5e:	4649      	mov	r1, r9
   b9a60:	f7ff f8d0 	bl	b8c04 <__aeabi_dcmple>
   b9a64:	b1a0      	cbz	r0, b9a90 <_strtod_l+0xb60>
   b9a66:	4649      	mov	r1, r9
   b9a68:	4640      	mov	r0, r8
   b9a6a:	f7ff f927 	bl	b8cbc <__aeabi_d2uiz>
   b9a6e:	2801      	cmp	r0, #1
   b9a70:	bf38      	it	cc
   b9a72:	2001      	movcc	r0, #1
   b9a74:	f7fe fdd0 	bl	b8618 <__aeabi_ui2d>
   b9a78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9a7a:	4680      	mov	r8, r0
   b9a7c:	4689      	mov	r9, r1
   b9a7e:	bb23      	cbnz	r3, b9aca <_strtod_l+0xb9a>
   b9a80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b9a84:	9010      	str	r0, [sp, #64]	; 0x40
   b9a86:	9311      	str	r3, [sp, #68]	; 0x44
   b9a88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b9a8c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b9a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b9a92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9a94:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b9a98:	1a9b      	subs	r3, r3, r2
   b9a9a:	9309      	str	r3, [sp, #36]	; 0x24
   b9a9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9aa0:	eeb0 0a48 	vmov.f32	s0, s16
   b9aa4:	eef0 0a68 	vmov.f32	s1, s17
   b9aa8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b9aac:	f001 f838 	bl	bab20 <__ulp>
   b9ab0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9ab4:	ec53 2b10 	vmov	r2, r3, d0
   b9ab8:	f7fe fe28 	bl	b870c <__aeabi_dmul>
   b9abc:	ec53 2b18 	vmov	r2, r3, d8
   b9ac0:	f7fe fc6e 	bl	b83a0 <__adddf3>
   b9ac4:	4682      	mov	sl, r0
   b9ac6:	468b      	mov	fp, r1
   b9ac8:	e78d      	b.n	b99e6 <_strtod_l+0xab6>
   b9aca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b9ace:	e7db      	b.n	b9a88 <_strtod_l+0xb58>
   b9ad0:	a311      	add	r3, pc, #68	; (adr r3, b9b18 <_strtod_l+0xbe8>)
   b9ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9ad6:	f7ff f88b 	bl	b8bf0 <__aeabi_dcmplt>
   b9ada:	e7b2      	b.n	b9a42 <_strtod_l+0xb12>
   b9adc:	2300      	movs	r3, #0
   b9ade:	930a      	str	r3, [sp, #40]	; 0x28
   b9ae0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b9ae2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9ae4:	6013      	str	r3, [r2, #0]
   b9ae6:	f7ff ba6b 	b.w	b8fc0 <_strtod_l+0x90>
   b9aea:	2a65      	cmp	r2, #101	; 0x65
   b9aec:	f43f ab5f 	beq.w	b91ae <_strtod_l+0x27e>
   b9af0:	2a45      	cmp	r2, #69	; 0x45
   b9af2:	f43f ab5c 	beq.w	b91ae <_strtod_l+0x27e>
   b9af6:	2301      	movs	r3, #1
   b9af8:	f7ff bb94 	b.w	b9224 <_strtod_l+0x2f4>
   b9afc:	f3af 8000 	nop.w
   b9b00:	94a03595 	.word	0x94a03595
   b9b04:	3fdfffff 	.word	0x3fdfffff
   b9b08:	35afe535 	.word	0x35afe535
   b9b0c:	3fe00000 	.word	0x3fe00000
   b9b10:	ffc00000 	.word	0xffc00000
   b9b14:	41dfffff 	.word	0x41dfffff
   b9b18:	94a03595 	.word	0x94a03595
   b9b1c:	3fcfffff 	.word	0x3fcfffff
   b9b20:	3ff00000 	.word	0x3ff00000
   b9b24:	7ff00000 	.word	0x7ff00000
   b9b28:	7fe00000 	.word	0x7fe00000
   b9b2c:	7c9fffff 	.word	0x7c9fffff
   b9b30:	3fe00000 	.word	0x3fe00000
   b9b34:	bff00000 	.word	0xbff00000
   b9b38:	7fefffff 	.word	0x7fefffff

000b9b3c <strtod>:
   b9b3c:	460a      	mov	r2, r1
   b9b3e:	4601      	mov	r1, r0
   b9b40:	4802      	ldr	r0, [pc, #8]	; (b9b4c <strtod+0x10>)
   b9b42:	4b03      	ldr	r3, [pc, #12]	; (b9b50 <strtod+0x14>)
   b9b44:	6800      	ldr	r0, [r0, #0]
   b9b46:	f7ff b9f3 	b.w	b8f30 <_strtod_l>
   b9b4a:	bf00      	nop
   b9b4c:	2003e3e8 	.word	0x2003e3e8
   b9b50:	2003e454 	.word	0x2003e454

000b9b54 <_strtol_l.constprop.0>:
   b9b54:	2b01      	cmp	r3, #1
   b9b56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9b5a:	d001      	beq.n	b9b60 <_strtol_l.constprop.0+0xc>
   b9b5c:	2b24      	cmp	r3, #36	; 0x24
   b9b5e:	d906      	bls.n	b9b6e <_strtol_l.constprop.0+0x1a>
   b9b60:	f7fd f878 	bl	b6c54 <__errno>
   b9b64:	2316      	movs	r3, #22
   b9b66:	6003      	str	r3, [r0, #0]
   b9b68:	2000      	movs	r0, #0
   b9b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9b6e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b9c54 <_strtol_l.constprop.0+0x100>
   b9b72:	460d      	mov	r5, r1
   b9b74:	462e      	mov	r6, r5
   b9b76:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9b7a:	f814 700c 	ldrb.w	r7, [r4, ip]
   b9b7e:	f017 0708 	ands.w	r7, r7, #8
   b9b82:	d1f7      	bne.n	b9b74 <_strtol_l.constprop.0+0x20>
   b9b84:	2c2d      	cmp	r4, #45	; 0x2d
   b9b86:	d132      	bne.n	b9bee <_strtol_l.constprop.0+0x9a>
   b9b88:	782c      	ldrb	r4, [r5, #0]
   b9b8a:	2701      	movs	r7, #1
   b9b8c:	1cb5      	adds	r5, r6, #2
   b9b8e:	2b00      	cmp	r3, #0
   b9b90:	d05b      	beq.n	b9c4a <_strtol_l.constprop.0+0xf6>
   b9b92:	2b10      	cmp	r3, #16
   b9b94:	d109      	bne.n	b9baa <_strtol_l.constprop.0+0x56>
   b9b96:	2c30      	cmp	r4, #48	; 0x30
   b9b98:	d107      	bne.n	b9baa <_strtol_l.constprop.0+0x56>
   b9b9a:	782c      	ldrb	r4, [r5, #0]
   b9b9c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b9ba0:	2c58      	cmp	r4, #88	; 0x58
   b9ba2:	d14d      	bne.n	b9c40 <_strtol_l.constprop.0+0xec>
   b9ba4:	786c      	ldrb	r4, [r5, #1]
   b9ba6:	2310      	movs	r3, #16
   b9ba8:	3502      	adds	r5, #2
   b9baa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b9bae:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b9bb2:	f04f 0c00 	mov.w	ip, #0
   b9bb6:	fbb8 f9f3 	udiv	r9, r8, r3
   b9bba:	4666      	mov	r6, ip
   b9bbc:	fb03 8a19 	mls	sl, r3, r9, r8
   b9bc0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b9bc4:	f1be 0f09 	cmp.w	lr, #9
   b9bc8:	d816      	bhi.n	b9bf8 <_strtol_l.constprop.0+0xa4>
   b9bca:	4674      	mov	r4, lr
   b9bcc:	42a3      	cmp	r3, r4
   b9bce:	dd24      	ble.n	b9c1a <_strtol_l.constprop.0+0xc6>
   b9bd0:	f1bc 0f00 	cmp.w	ip, #0
   b9bd4:	db1e      	blt.n	b9c14 <_strtol_l.constprop.0+0xc0>
   b9bd6:	45b1      	cmp	r9, r6
   b9bd8:	d31c      	bcc.n	b9c14 <_strtol_l.constprop.0+0xc0>
   b9bda:	d101      	bne.n	b9be0 <_strtol_l.constprop.0+0x8c>
   b9bdc:	45a2      	cmp	sl, r4
   b9bde:	db19      	blt.n	b9c14 <_strtol_l.constprop.0+0xc0>
   b9be0:	fb06 4603 	mla	r6, r6, r3, r4
   b9be4:	f04f 0c01 	mov.w	ip, #1
   b9be8:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9bec:	e7e8      	b.n	b9bc0 <_strtol_l.constprop.0+0x6c>
   b9bee:	2c2b      	cmp	r4, #43	; 0x2b
   b9bf0:	bf04      	itt	eq
   b9bf2:	782c      	ldrbeq	r4, [r5, #0]
   b9bf4:	1cb5      	addeq	r5, r6, #2
   b9bf6:	e7ca      	b.n	b9b8e <_strtol_l.constprop.0+0x3a>
   b9bf8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b9bfc:	f1be 0f19 	cmp.w	lr, #25
   b9c00:	d801      	bhi.n	b9c06 <_strtol_l.constprop.0+0xb2>
   b9c02:	3c37      	subs	r4, #55	; 0x37
   b9c04:	e7e2      	b.n	b9bcc <_strtol_l.constprop.0+0x78>
   b9c06:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b9c0a:	f1be 0f19 	cmp.w	lr, #25
   b9c0e:	d804      	bhi.n	b9c1a <_strtol_l.constprop.0+0xc6>
   b9c10:	3c57      	subs	r4, #87	; 0x57
   b9c12:	e7db      	b.n	b9bcc <_strtol_l.constprop.0+0x78>
   b9c14:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b9c18:	e7e6      	b.n	b9be8 <_strtol_l.constprop.0+0x94>
   b9c1a:	f1bc 0f00 	cmp.w	ip, #0
   b9c1e:	da05      	bge.n	b9c2c <_strtol_l.constprop.0+0xd8>
   b9c20:	2322      	movs	r3, #34	; 0x22
   b9c22:	6003      	str	r3, [r0, #0]
   b9c24:	4646      	mov	r6, r8
   b9c26:	b942      	cbnz	r2, b9c3a <_strtol_l.constprop.0+0xe6>
   b9c28:	4630      	mov	r0, r6
   b9c2a:	e79e      	b.n	b9b6a <_strtol_l.constprop.0+0x16>
   b9c2c:	b107      	cbz	r7, b9c30 <_strtol_l.constprop.0+0xdc>
   b9c2e:	4276      	negs	r6, r6
   b9c30:	2a00      	cmp	r2, #0
   b9c32:	d0f9      	beq.n	b9c28 <_strtol_l.constprop.0+0xd4>
   b9c34:	f1bc 0f00 	cmp.w	ip, #0
   b9c38:	d000      	beq.n	b9c3c <_strtol_l.constprop.0+0xe8>
   b9c3a:	1e69      	subs	r1, r5, #1
   b9c3c:	6011      	str	r1, [r2, #0]
   b9c3e:	e7f3      	b.n	b9c28 <_strtol_l.constprop.0+0xd4>
   b9c40:	2430      	movs	r4, #48	; 0x30
   b9c42:	2b00      	cmp	r3, #0
   b9c44:	d1b1      	bne.n	b9baa <_strtol_l.constprop.0+0x56>
   b9c46:	2308      	movs	r3, #8
   b9c48:	e7af      	b.n	b9baa <_strtol_l.constprop.0+0x56>
   b9c4a:	2c30      	cmp	r4, #48	; 0x30
   b9c4c:	d0a5      	beq.n	b9b9a <_strtol_l.constprop.0+0x46>
   b9c4e:	230a      	movs	r3, #10
   b9c50:	e7ab      	b.n	b9baa <_strtol_l.constprop.0+0x56>
   b9c52:	bf00      	nop
   b9c54:	000bc2c9 	.word	0x000bc2c9

000b9c58 <strtol>:
   b9c58:	4613      	mov	r3, r2
   b9c5a:	460a      	mov	r2, r1
   b9c5c:	4601      	mov	r1, r0
   b9c5e:	4802      	ldr	r0, [pc, #8]	; (b9c68 <strtol+0x10>)
   b9c60:	6800      	ldr	r0, [r0, #0]
   b9c62:	f7ff bf77 	b.w	b9b54 <_strtol_l.constprop.0>
   b9c66:	bf00      	nop
   b9c68:	2003e3e8 	.word	0x2003e3e8

000b9c6c <__register_exitproc>:
   b9c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9c70:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9d2c <__register_exitproc+0xc0>
   b9c74:	4606      	mov	r6, r0
   b9c76:	f8d8 0000 	ldr.w	r0, [r8]
   b9c7a:	461f      	mov	r7, r3
   b9c7c:	460d      	mov	r5, r1
   b9c7e:	4691      	mov	r9, r2
   b9c80:	f000 fbc6 	bl	ba410 <__retarget_lock_acquire_recursive>
   b9c84:	4b25      	ldr	r3, [pc, #148]	; (b9d1c <__register_exitproc+0xb0>)
   b9c86:	681c      	ldr	r4, [r3, #0]
   b9c88:	b934      	cbnz	r4, b9c98 <__register_exitproc+0x2c>
   b9c8a:	4c25      	ldr	r4, [pc, #148]	; (b9d20 <__register_exitproc+0xb4>)
   b9c8c:	601c      	str	r4, [r3, #0]
   b9c8e:	4b25      	ldr	r3, [pc, #148]	; (b9d24 <__register_exitproc+0xb8>)
   b9c90:	b113      	cbz	r3, b9c98 <__register_exitproc+0x2c>
   b9c92:	681b      	ldr	r3, [r3, #0]
   b9c94:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9c98:	6863      	ldr	r3, [r4, #4]
   b9c9a:	2b1f      	cmp	r3, #31
   b9c9c:	dd07      	ble.n	b9cae <__register_exitproc+0x42>
   b9c9e:	f8d8 0000 	ldr.w	r0, [r8]
   b9ca2:	f000 fbb7 	bl	ba414 <__retarget_lock_release_recursive>
   b9ca6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9cae:	b34e      	cbz	r6, b9d04 <__register_exitproc+0x98>
   b9cb0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b9cb4:	b988      	cbnz	r0, b9cda <__register_exitproc+0x6e>
   b9cb6:	4b1c      	ldr	r3, [pc, #112]	; (b9d28 <__register_exitproc+0xbc>)
   b9cb8:	b923      	cbnz	r3, b9cc4 <__register_exitproc+0x58>
   b9cba:	f8d8 0000 	ldr.w	r0, [r8]
   b9cbe:	f000 fba8 	bl	ba412 <__retarget_lock_release>
   b9cc2:	e7f0      	b.n	b9ca6 <__register_exitproc+0x3a>
   b9cc4:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9cc8:	f7fc ff9c 	bl	b6c04 <malloc>
   b9ccc:	2800      	cmp	r0, #0
   b9cce:	d0f4      	beq.n	b9cba <__register_exitproc+0x4e>
   b9cd0:	2300      	movs	r3, #0
   b9cd2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b9cd6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9cda:	6863      	ldr	r3, [r4, #4]
   b9cdc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9ce0:	2201      	movs	r2, #1
   b9ce2:	409a      	lsls	r2, r3
   b9ce4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9ce8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9cec:	4313      	orrs	r3, r2
   b9cee:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b9cf2:	2e02      	cmp	r6, #2
   b9cf4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9cf8:	bf02      	ittt	eq
   b9cfa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9cfe:	4313      	orreq	r3, r2
   b9d00:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9d04:	6863      	ldr	r3, [r4, #4]
   b9d06:	f8d8 0000 	ldr.w	r0, [r8]
   b9d0a:	1c5a      	adds	r2, r3, #1
   b9d0c:	3302      	adds	r3, #2
   b9d0e:	6062      	str	r2, [r4, #4]
   b9d10:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9d14:	f000 fb7e 	bl	ba414 <__retarget_lock_release_recursive>
   b9d18:	2000      	movs	r0, #0
   b9d1a:	e7c6      	b.n	b9caa <__register_exitproc+0x3e>
   b9d1c:	2003e7e8 	.word	0x2003e7e8
   b9d20:	2003e75c 	.word	0x2003e75c
   b9d24:	00000000 	.word	0x00000000
   b9d28:	000b6c05 	.word	0x000b6c05
   b9d2c:	2003e44c 	.word	0x2003e44c

000b9d30 <rshift>:
   b9d30:	6903      	ldr	r3, [r0, #16]
   b9d32:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b9d36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9d3a:	ea4f 1261 	mov.w	r2, r1, asr #5
   b9d3e:	f100 0414 	add.w	r4, r0, #20
   b9d42:	dd45      	ble.n	b9dd0 <rshift+0xa0>
   b9d44:	f011 011f 	ands.w	r1, r1, #31
   b9d48:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b9d4c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b9d50:	d10c      	bne.n	b9d6c <rshift+0x3c>
   b9d52:	f100 0710 	add.w	r7, r0, #16
   b9d56:	4629      	mov	r1, r5
   b9d58:	42b1      	cmp	r1, r6
   b9d5a:	d334      	bcc.n	b9dc6 <rshift+0x96>
   b9d5c:	1a9b      	subs	r3, r3, r2
   b9d5e:	009b      	lsls	r3, r3, #2
   b9d60:	1eea      	subs	r2, r5, #3
   b9d62:	4296      	cmp	r6, r2
   b9d64:	bf38      	it	cc
   b9d66:	2300      	movcc	r3, #0
   b9d68:	4423      	add	r3, r4
   b9d6a:	e015      	b.n	b9d98 <rshift+0x68>
   b9d6c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b9d70:	f1c1 0820 	rsb	r8, r1, #32
   b9d74:	40cf      	lsrs	r7, r1
   b9d76:	f105 0e04 	add.w	lr, r5, #4
   b9d7a:	46a1      	mov	r9, r4
   b9d7c:	4576      	cmp	r6, lr
   b9d7e:	46f4      	mov	ip, lr
   b9d80:	d815      	bhi.n	b9dae <rshift+0x7e>
   b9d82:	1a9a      	subs	r2, r3, r2
   b9d84:	0092      	lsls	r2, r2, #2
   b9d86:	3a04      	subs	r2, #4
   b9d88:	3501      	adds	r5, #1
   b9d8a:	42ae      	cmp	r6, r5
   b9d8c:	bf38      	it	cc
   b9d8e:	2200      	movcc	r2, #0
   b9d90:	18a3      	adds	r3, r4, r2
   b9d92:	50a7      	str	r7, [r4, r2]
   b9d94:	b107      	cbz	r7, b9d98 <rshift+0x68>
   b9d96:	3304      	adds	r3, #4
   b9d98:	1b1a      	subs	r2, r3, r4
   b9d9a:	42a3      	cmp	r3, r4
   b9d9c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b9da0:	bf08      	it	eq
   b9da2:	2300      	moveq	r3, #0
   b9da4:	6102      	str	r2, [r0, #16]
   b9da6:	bf08      	it	eq
   b9da8:	6143      	streq	r3, [r0, #20]
   b9daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b9dae:	f8dc c000 	ldr.w	ip, [ip]
   b9db2:	fa0c fc08 	lsl.w	ip, ip, r8
   b9db6:	ea4c 0707 	orr.w	r7, ip, r7
   b9dba:	f849 7b04 	str.w	r7, [r9], #4
   b9dbe:	f85e 7b04 	ldr.w	r7, [lr], #4
   b9dc2:	40cf      	lsrs	r7, r1
   b9dc4:	e7da      	b.n	b9d7c <rshift+0x4c>
   b9dc6:	f851 cb04 	ldr.w	ip, [r1], #4
   b9dca:	f847 cf04 	str.w	ip, [r7, #4]!
   b9dce:	e7c3      	b.n	b9d58 <rshift+0x28>
   b9dd0:	4623      	mov	r3, r4
   b9dd2:	e7e1      	b.n	b9d98 <rshift+0x68>

000b9dd4 <__hexdig_fun>:
   b9dd4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b9dd8:	2b09      	cmp	r3, #9
   b9dda:	d802      	bhi.n	b9de2 <__hexdig_fun+0xe>
   b9ddc:	3820      	subs	r0, #32
   b9dde:	b2c0      	uxtb	r0, r0
   b9de0:	4770      	bx	lr
   b9de2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b9de6:	2b05      	cmp	r3, #5
   b9de8:	d801      	bhi.n	b9dee <__hexdig_fun+0x1a>
   b9dea:	3847      	subs	r0, #71	; 0x47
   b9dec:	e7f7      	b.n	b9dde <__hexdig_fun+0xa>
   b9dee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b9df2:	2b05      	cmp	r3, #5
   b9df4:	d801      	bhi.n	b9dfa <__hexdig_fun+0x26>
   b9df6:	3827      	subs	r0, #39	; 0x27
   b9df8:	e7f1      	b.n	b9dde <__hexdig_fun+0xa>
   b9dfa:	2000      	movs	r0, #0
   b9dfc:	4770      	bx	lr
	...

000b9e00 <__gethex>:
   b9e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9e04:	ed2d 8b02 	vpush	{d8}
   b9e08:	b089      	sub	sp, #36	; 0x24
   b9e0a:	ee08 0a10 	vmov	s16, r0
   b9e0e:	9304      	str	r3, [sp, #16]
   b9e10:	4bb4      	ldr	r3, [pc, #720]	; (ba0e4 <__gethex+0x2e4>)
   b9e12:	681b      	ldr	r3, [r3, #0]
   b9e14:	9301      	str	r3, [sp, #4]
   b9e16:	4618      	mov	r0, r3
   b9e18:	468b      	mov	fp, r1
   b9e1a:	4690      	mov	r8, r2
   b9e1c:	f7ff f83c 	bl	b8e98 <strlen>
   b9e20:	9b01      	ldr	r3, [sp, #4]
   b9e22:	f8db 2000 	ldr.w	r2, [fp]
   b9e26:	4403      	add	r3, r0
   b9e28:	4682      	mov	sl, r0
   b9e2a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b9e2e:	9305      	str	r3, [sp, #20]
   b9e30:	1c93      	adds	r3, r2, #2
   b9e32:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b9e36:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b9e3a:	32fe      	adds	r2, #254	; 0xfe
   b9e3c:	18d1      	adds	r1, r2, r3
   b9e3e:	461f      	mov	r7, r3
   b9e40:	f813 0b01 	ldrb.w	r0, [r3], #1
   b9e44:	9100      	str	r1, [sp, #0]
   b9e46:	2830      	cmp	r0, #48	; 0x30
   b9e48:	d0f8      	beq.n	b9e3c <__gethex+0x3c>
   b9e4a:	f7ff ffc3 	bl	b9dd4 <__hexdig_fun>
   b9e4e:	4604      	mov	r4, r0
   b9e50:	2800      	cmp	r0, #0
   b9e52:	d13a      	bne.n	b9eca <__gethex+0xca>
   b9e54:	9901      	ldr	r1, [sp, #4]
   b9e56:	4652      	mov	r2, sl
   b9e58:	4638      	mov	r0, r7
   b9e5a:	f7ff f825 	bl	b8ea8 <strncmp>
   b9e5e:	4605      	mov	r5, r0
   b9e60:	2800      	cmp	r0, #0
   b9e62:	d168      	bne.n	b9f36 <__gethex+0x136>
   b9e64:	f817 000a 	ldrb.w	r0, [r7, sl]
   b9e68:	eb07 060a 	add.w	r6, r7, sl
   b9e6c:	f7ff ffb2 	bl	b9dd4 <__hexdig_fun>
   b9e70:	2800      	cmp	r0, #0
   b9e72:	d062      	beq.n	b9f3a <__gethex+0x13a>
   b9e74:	4633      	mov	r3, r6
   b9e76:	7818      	ldrb	r0, [r3, #0]
   b9e78:	2830      	cmp	r0, #48	; 0x30
   b9e7a:	461f      	mov	r7, r3
   b9e7c:	f103 0301 	add.w	r3, r3, #1
   b9e80:	d0f9      	beq.n	b9e76 <__gethex+0x76>
   b9e82:	f7ff ffa7 	bl	b9dd4 <__hexdig_fun>
   b9e86:	2301      	movs	r3, #1
   b9e88:	fab0 f480 	clz	r4, r0
   b9e8c:	0964      	lsrs	r4, r4, #5
   b9e8e:	4635      	mov	r5, r6
   b9e90:	9300      	str	r3, [sp, #0]
   b9e92:	463a      	mov	r2, r7
   b9e94:	4616      	mov	r6, r2
   b9e96:	3201      	adds	r2, #1
   b9e98:	7830      	ldrb	r0, [r6, #0]
   b9e9a:	f7ff ff9b 	bl	b9dd4 <__hexdig_fun>
   b9e9e:	2800      	cmp	r0, #0
   b9ea0:	d1f8      	bne.n	b9e94 <__gethex+0x94>
   b9ea2:	9901      	ldr	r1, [sp, #4]
   b9ea4:	4652      	mov	r2, sl
   b9ea6:	4630      	mov	r0, r6
   b9ea8:	f7fe fffe 	bl	b8ea8 <strncmp>
   b9eac:	b980      	cbnz	r0, b9ed0 <__gethex+0xd0>
   b9eae:	b94d      	cbnz	r5, b9ec4 <__gethex+0xc4>
   b9eb0:	eb06 050a 	add.w	r5, r6, sl
   b9eb4:	462a      	mov	r2, r5
   b9eb6:	4616      	mov	r6, r2
   b9eb8:	3201      	adds	r2, #1
   b9eba:	7830      	ldrb	r0, [r6, #0]
   b9ebc:	f7ff ff8a 	bl	b9dd4 <__hexdig_fun>
   b9ec0:	2800      	cmp	r0, #0
   b9ec2:	d1f8      	bne.n	b9eb6 <__gethex+0xb6>
   b9ec4:	1bad      	subs	r5, r5, r6
   b9ec6:	00ad      	lsls	r5, r5, #2
   b9ec8:	e004      	b.n	b9ed4 <__gethex+0xd4>
   b9eca:	2400      	movs	r4, #0
   b9ecc:	4625      	mov	r5, r4
   b9ece:	e7e0      	b.n	b9e92 <__gethex+0x92>
   b9ed0:	2d00      	cmp	r5, #0
   b9ed2:	d1f7      	bne.n	b9ec4 <__gethex+0xc4>
   b9ed4:	7833      	ldrb	r3, [r6, #0]
   b9ed6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b9eda:	2b50      	cmp	r3, #80	; 0x50
   b9edc:	d13b      	bne.n	b9f56 <__gethex+0x156>
   b9ede:	7873      	ldrb	r3, [r6, #1]
   b9ee0:	2b2b      	cmp	r3, #43	; 0x2b
   b9ee2:	d02c      	beq.n	b9f3e <__gethex+0x13e>
   b9ee4:	2b2d      	cmp	r3, #45	; 0x2d
   b9ee6:	d02e      	beq.n	b9f46 <__gethex+0x146>
   b9ee8:	1c71      	adds	r1, r6, #1
   b9eea:	f04f 0900 	mov.w	r9, #0
   b9eee:	7808      	ldrb	r0, [r1, #0]
   b9ef0:	f7ff ff70 	bl	b9dd4 <__hexdig_fun>
   b9ef4:	1e43      	subs	r3, r0, #1
   b9ef6:	b2db      	uxtb	r3, r3
   b9ef8:	2b18      	cmp	r3, #24
   b9efa:	d82c      	bhi.n	b9f56 <__gethex+0x156>
   b9efc:	f1a0 0210 	sub.w	r2, r0, #16
   b9f00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b9f04:	f7ff ff66 	bl	b9dd4 <__hexdig_fun>
   b9f08:	1e43      	subs	r3, r0, #1
   b9f0a:	b2db      	uxtb	r3, r3
   b9f0c:	2b18      	cmp	r3, #24
   b9f0e:	d91d      	bls.n	b9f4c <__gethex+0x14c>
   b9f10:	f1b9 0f00 	cmp.w	r9, #0
   b9f14:	d000      	beq.n	b9f18 <__gethex+0x118>
   b9f16:	4252      	negs	r2, r2
   b9f18:	4415      	add	r5, r2
   b9f1a:	f8cb 1000 	str.w	r1, [fp]
   b9f1e:	b1e4      	cbz	r4, b9f5a <__gethex+0x15a>
   b9f20:	9b00      	ldr	r3, [sp, #0]
   b9f22:	2b00      	cmp	r3, #0
   b9f24:	bf14      	ite	ne
   b9f26:	2700      	movne	r7, #0
   b9f28:	2706      	moveq	r7, #6
   b9f2a:	4638      	mov	r0, r7
   b9f2c:	b009      	add	sp, #36	; 0x24
   b9f2e:	ecbd 8b02 	vpop	{d8}
   b9f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9f36:	463e      	mov	r6, r7
   b9f38:	4625      	mov	r5, r4
   b9f3a:	2401      	movs	r4, #1
   b9f3c:	e7ca      	b.n	b9ed4 <__gethex+0xd4>
   b9f3e:	f04f 0900 	mov.w	r9, #0
   b9f42:	1cb1      	adds	r1, r6, #2
   b9f44:	e7d3      	b.n	b9eee <__gethex+0xee>
   b9f46:	f04f 0901 	mov.w	r9, #1
   b9f4a:	e7fa      	b.n	b9f42 <__gethex+0x142>
   b9f4c:	230a      	movs	r3, #10
   b9f4e:	fb03 0202 	mla	r2, r3, r2, r0
   b9f52:	3a10      	subs	r2, #16
   b9f54:	e7d4      	b.n	b9f00 <__gethex+0x100>
   b9f56:	4631      	mov	r1, r6
   b9f58:	e7df      	b.n	b9f1a <__gethex+0x11a>
   b9f5a:	1bf3      	subs	r3, r6, r7
   b9f5c:	3b01      	subs	r3, #1
   b9f5e:	4621      	mov	r1, r4
   b9f60:	2b07      	cmp	r3, #7
   b9f62:	dc0b      	bgt.n	b9f7c <__gethex+0x17c>
   b9f64:	ee18 0a10 	vmov	r0, s16
   b9f68:	f000 fa68 	bl	ba43c <_Balloc>
   b9f6c:	4604      	mov	r4, r0
   b9f6e:	b940      	cbnz	r0, b9f82 <__gethex+0x182>
   b9f70:	4b5d      	ldr	r3, [pc, #372]	; (ba0e8 <__gethex+0x2e8>)
   b9f72:	4602      	mov	r2, r0
   b9f74:	21de      	movs	r1, #222	; 0xde
   b9f76:	485d      	ldr	r0, [pc, #372]	; (ba0ec <__gethex+0x2ec>)
   b9f78:	f7fc fe74 	bl	b6c64 <__assert_func>
   b9f7c:	3101      	adds	r1, #1
   b9f7e:	105b      	asrs	r3, r3, #1
   b9f80:	e7ee      	b.n	b9f60 <__gethex+0x160>
   b9f82:	f100 0914 	add.w	r9, r0, #20
   b9f86:	f04f 0b00 	mov.w	fp, #0
   b9f8a:	f1ca 0301 	rsb	r3, sl, #1
   b9f8e:	f8cd 9008 	str.w	r9, [sp, #8]
   b9f92:	f8cd b000 	str.w	fp, [sp]
   b9f96:	9306      	str	r3, [sp, #24]
   b9f98:	42b7      	cmp	r7, r6
   b9f9a:	d340      	bcc.n	ba01e <__gethex+0x21e>
   b9f9c:	9802      	ldr	r0, [sp, #8]
   b9f9e:	9b00      	ldr	r3, [sp, #0]
   b9fa0:	f840 3b04 	str.w	r3, [r0], #4
   b9fa4:	eba0 0009 	sub.w	r0, r0, r9
   b9fa8:	1080      	asrs	r0, r0, #2
   b9faa:	0146      	lsls	r6, r0, #5
   b9fac:	6120      	str	r0, [r4, #16]
   b9fae:	4618      	mov	r0, r3
   b9fb0:	f000 fb36 	bl	ba620 <__hi0bits>
   b9fb4:	1a30      	subs	r0, r6, r0
   b9fb6:	f8d8 6000 	ldr.w	r6, [r8]
   b9fba:	42b0      	cmp	r0, r6
   b9fbc:	dd63      	ble.n	ba086 <__gethex+0x286>
   b9fbe:	1b87      	subs	r7, r0, r6
   b9fc0:	4639      	mov	r1, r7
   b9fc2:	4620      	mov	r0, r4
   b9fc4:	f000 feda 	bl	bad7c <__any_on>
   b9fc8:	4682      	mov	sl, r0
   b9fca:	b1a8      	cbz	r0, b9ff8 <__gethex+0x1f8>
   b9fcc:	1e7b      	subs	r3, r7, #1
   b9fce:	1159      	asrs	r1, r3, #5
   b9fd0:	f003 021f 	and.w	r2, r3, #31
   b9fd4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   b9fd8:	f04f 0a01 	mov.w	sl, #1
   b9fdc:	fa0a f202 	lsl.w	r2, sl, r2
   b9fe0:	420a      	tst	r2, r1
   b9fe2:	d009      	beq.n	b9ff8 <__gethex+0x1f8>
   b9fe4:	4553      	cmp	r3, sl
   b9fe6:	dd05      	ble.n	b9ff4 <__gethex+0x1f4>
   b9fe8:	1eb9      	subs	r1, r7, #2
   b9fea:	4620      	mov	r0, r4
   b9fec:	f000 fec6 	bl	bad7c <__any_on>
   b9ff0:	2800      	cmp	r0, #0
   b9ff2:	d145      	bne.n	ba080 <__gethex+0x280>
   b9ff4:	f04f 0a02 	mov.w	sl, #2
   b9ff8:	4639      	mov	r1, r7
   b9ffa:	4620      	mov	r0, r4
   b9ffc:	f7ff fe98 	bl	b9d30 <rshift>
   ba000:	443d      	add	r5, r7
   ba002:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ba006:	42ab      	cmp	r3, r5
   ba008:	da4c      	bge.n	ba0a4 <__gethex+0x2a4>
   ba00a:	ee18 0a10 	vmov	r0, s16
   ba00e:	4621      	mov	r1, r4
   ba010:	f000 fa54 	bl	ba4bc <_Bfree>
   ba014:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba016:	2300      	movs	r3, #0
   ba018:	6013      	str	r3, [r2, #0]
   ba01a:	27a3      	movs	r7, #163	; 0xa3
   ba01c:	e785      	b.n	b9f2a <__gethex+0x12a>
   ba01e:	1e73      	subs	r3, r6, #1
   ba020:	9a05      	ldr	r2, [sp, #20]
   ba022:	9303      	str	r3, [sp, #12]
   ba024:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   ba028:	4293      	cmp	r3, r2
   ba02a:	d019      	beq.n	ba060 <__gethex+0x260>
   ba02c:	f1bb 0f20 	cmp.w	fp, #32
   ba030:	d107      	bne.n	ba042 <__gethex+0x242>
   ba032:	9b02      	ldr	r3, [sp, #8]
   ba034:	9a00      	ldr	r2, [sp, #0]
   ba036:	f843 2b04 	str.w	r2, [r3], #4
   ba03a:	9302      	str	r3, [sp, #8]
   ba03c:	2300      	movs	r3, #0
   ba03e:	9300      	str	r3, [sp, #0]
   ba040:	469b      	mov	fp, r3
   ba042:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   ba046:	f7ff fec5 	bl	b9dd4 <__hexdig_fun>
   ba04a:	9b00      	ldr	r3, [sp, #0]
   ba04c:	f000 000f 	and.w	r0, r0, #15
   ba050:	fa00 f00b 	lsl.w	r0, r0, fp
   ba054:	4303      	orrs	r3, r0
   ba056:	9300      	str	r3, [sp, #0]
   ba058:	f10b 0b04 	add.w	fp, fp, #4
   ba05c:	9b03      	ldr	r3, [sp, #12]
   ba05e:	e00d      	b.n	ba07c <__gethex+0x27c>
   ba060:	9b03      	ldr	r3, [sp, #12]
   ba062:	9a06      	ldr	r2, [sp, #24]
   ba064:	4413      	add	r3, r2
   ba066:	42bb      	cmp	r3, r7
   ba068:	d3e0      	bcc.n	ba02c <__gethex+0x22c>
   ba06a:	4618      	mov	r0, r3
   ba06c:	9901      	ldr	r1, [sp, #4]
   ba06e:	9307      	str	r3, [sp, #28]
   ba070:	4652      	mov	r2, sl
   ba072:	f7fe ff19 	bl	b8ea8 <strncmp>
   ba076:	9b07      	ldr	r3, [sp, #28]
   ba078:	2800      	cmp	r0, #0
   ba07a:	d1d7      	bne.n	ba02c <__gethex+0x22c>
   ba07c:	461e      	mov	r6, r3
   ba07e:	e78b      	b.n	b9f98 <__gethex+0x198>
   ba080:	f04f 0a03 	mov.w	sl, #3
   ba084:	e7b8      	b.n	b9ff8 <__gethex+0x1f8>
   ba086:	da0a      	bge.n	ba09e <__gethex+0x29e>
   ba088:	1a37      	subs	r7, r6, r0
   ba08a:	4621      	mov	r1, r4
   ba08c:	ee18 0a10 	vmov	r0, s16
   ba090:	463a      	mov	r2, r7
   ba092:	f000 fc2f 	bl	ba8f4 <__lshift>
   ba096:	1bed      	subs	r5, r5, r7
   ba098:	4604      	mov	r4, r0
   ba09a:	f100 0914 	add.w	r9, r0, #20
   ba09e:	f04f 0a00 	mov.w	sl, #0
   ba0a2:	e7ae      	b.n	ba002 <__gethex+0x202>
   ba0a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   ba0a8:	42a8      	cmp	r0, r5
   ba0aa:	dd72      	ble.n	ba192 <__gethex+0x392>
   ba0ac:	1b45      	subs	r5, r0, r5
   ba0ae:	42ae      	cmp	r6, r5
   ba0b0:	dc36      	bgt.n	ba120 <__gethex+0x320>
   ba0b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ba0b6:	2b02      	cmp	r3, #2
   ba0b8:	d02a      	beq.n	ba110 <__gethex+0x310>
   ba0ba:	2b03      	cmp	r3, #3
   ba0bc:	d02c      	beq.n	ba118 <__gethex+0x318>
   ba0be:	2b01      	cmp	r3, #1
   ba0c0:	d11c      	bne.n	ba0fc <__gethex+0x2fc>
   ba0c2:	42ae      	cmp	r6, r5
   ba0c4:	d11a      	bne.n	ba0fc <__gethex+0x2fc>
   ba0c6:	2e01      	cmp	r6, #1
   ba0c8:	d112      	bne.n	ba0f0 <__gethex+0x2f0>
   ba0ca:	9a04      	ldr	r2, [sp, #16]
   ba0cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   ba0d0:	6013      	str	r3, [r2, #0]
   ba0d2:	2301      	movs	r3, #1
   ba0d4:	6123      	str	r3, [r4, #16]
   ba0d6:	f8c9 3000 	str.w	r3, [r9]
   ba0da:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba0dc:	2762      	movs	r7, #98	; 0x62
   ba0de:	601c      	str	r4, [r3, #0]
   ba0e0:	e723      	b.n	b9f2a <__gethex+0x12a>
   ba0e2:	bf00      	nop
   ba0e4:	000bc43c 	.word	0x000bc43c
   ba0e8:	000bc3c9 	.word	0x000bc3c9
   ba0ec:	000bc3da 	.word	0x000bc3da
   ba0f0:	1e71      	subs	r1, r6, #1
   ba0f2:	4620      	mov	r0, r4
   ba0f4:	f000 fe42 	bl	bad7c <__any_on>
   ba0f8:	2800      	cmp	r0, #0
   ba0fa:	d1e6      	bne.n	ba0ca <__gethex+0x2ca>
   ba0fc:	ee18 0a10 	vmov	r0, s16
   ba100:	4621      	mov	r1, r4
   ba102:	f000 f9db 	bl	ba4bc <_Bfree>
   ba106:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba108:	2300      	movs	r3, #0
   ba10a:	6013      	str	r3, [r2, #0]
   ba10c:	2750      	movs	r7, #80	; 0x50
   ba10e:	e70c      	b.n	b9f2a <__gethex+0x12a>
   ba110:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba112:	2b00      	cmp	r3, #0
   ba114:	d1f2      	bne.n	ba0fc <__gethex+0x2fc>
   ba116:	e7d8      	b.n	ba0ca <__gethex+0x2ca>
   ba118:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba11a:	2b00      	cmp	r3, #0
   ba11c:	d1d5      	bne.n	ba0ca <__gethex+0x2ca>
   ba11e:	e7ed      	b.n	ba0fc <__gethex+0x2fc>
   ba120:	1e6f      	subs	r7, r5, #1
   ba122:	f1ba 0f00 	cmp.w	sl, #0
   ba126:	d131      	bne.n	ba18c <__gethex+0x38c>
   ba128:	b127      	cbz	r7, ba134 <__gethex+0x334>
   ba12a:	4639      	mov	r1, r7
   ba12c:	4620      	mov	r0, r4
   ba12e:	f000 fe25 	bl	bad7c <__any_on>
   ba132:	4682      	mov	sl, r0
   ba134:	117b      	asrs	r3, r7, #5
   ba136:	2101      	movs	r1, #1
   ba138:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   ba13c:	f007 071f 	and.w	r7, r7, #31
   ba140:	fa01 f707 	lsl.w	r7, r1, r7
   ba144:	421f      	tst	r7, r3
   ba146:	4629      	mov	r1, r5
   ba148:	4620      	mov	r0, r4
   ba14a:	bf18      	it	ne
   ba14c:	f04a 0a02 	orrne.w	sl, sl, #2
   ba150:	1b76      	subs	r6, r6, r5
   ba152:	f7ff fded 	bl	b9d30 <rshift>
   ba156:	f8d8 5004 	ldr.w	r5, [r8, #4]
   ba15a:	2702      	movs	r7, #2
   ba15c:	f1ba 0f00 	cmp.w	sl, #0
   ba160:	d048      	beq.n	ba1f4 <__gethex+0x3f4>
   ba162:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ba166:	2b02      	cmp	r3, #2
   ba168:	d015      	beq.n	ba196 <__gethex+0x396>
   ba16a:	2b03      	cmp	r3, #3
   ba16c:	d017      	beq.n	ba19e <__gethex+0x39e>
   ba16e:	2b01      	cmp	r3, #1
   ba170:	d109      	bne.n	ba186 <__gethex+0x386>
   ba172:	f01a 0f02 	tst.w	sl, #2
   ba176:	d006      	beq.n	ba186 <__gethex+0x386>
   ba178:	f8d9 0000 	ldr.w	r0, [r9]
   ba17c:	ea4a 0a00 	orr.w	sl, sl, r0
   ba180:	f01a 0f01 	tst.w	sl, #1
   ba184:	d10e      	bne.n	ba1a4 <__gethex+0x3a4>
   ba186:	f047 0710 	orr.w	r7, r7, #16
   ba18a:	e033      	b.n	ba1f4 <__gethex+0x3f4>
   ba18c:	f04f 0a01 	mov.w	sl, #1
   ba190:	e7d0      	b.n	ba134 <__gethex+0x334>
   ba192:	2701      	movs	r7, #1
   ba194:	e7e2      	b.n	ba15c <__gethex+0x35c>
   ba196:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba198:	f1c3 0301 	rsb	r3, r3, #1
   ba19c:	9315      	str	r3, [sp, #84]	; 0x54
   ba19e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba1a0:	2b00      	cmp	r3, #0
   ba1a2:	d0f0      	beq.n	ba186 <__gethex+0x386>
   ba1a4:	f8d4 b010 	ldr.w	fp, [r4, #16]
   ba1a8:	f104 0314 	add.w	r3, r4, #20
   ba1ac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   ba1b0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   ba1b4:	f04f 0c00 	mov.w	ip, #0
   ba1b8:	4618      	mov	r0, r3
   ba1ba:	f853 2b04 	ldr.w	r2, [r3], #4
   ba1be:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   ba1c2:	d01c      	beq.n	ba1fe <__gethex+0x3fe>
   ba1c4:	3201      	adds	r2, #1
   ba1c6:	6002      	str	r2, [r0, #0]
   ba1c8:	2f02      	cmp	r7, #2
   ba1ca:	f104 0314 	add.w	r3, r4, #20
   ba1ce:	d13f      	bne.n	ba250 <__gethex+0x450>
   ba1d0:	f8d8 2000 	ldr.w	r2, [r8]
   ba1d4:	3a01      	subs	r2, #1
   ba1d6:	42b2      	cmp	r2, r6
   ba1d8:	d10a      	bne.n	ba1f0 <__gethex+0x3f0>
   ba1da:	1171      	asrs	r1, r6, #5
   ba1dc:	2201      	movs	r2, #1
   ba1de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   ba1e2:	f006 061f 	and.w	r6, r6, #31
   ba1e6:	fa02 f606 	lsl.w	r6, r2, r6
   ba1ea:	421e      	tst	r6, r3
   ba1ec:	bf18      	it	ne
   ba1ee:	4617      	movne	r7, r2
   ba1f0:	f047 0720 	orr.w	r7, r7, #32
   ba1f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba1f6:	601c      	str	r4, [r3, #0]
   ba1f8:	9b04      	ldr	r3, [sp, #16]
   ba1fa:	601d      	str	r5, [r3, #0]
   ba1fc:	e695      	b.n	b9f2a <__gethex+0x12a>
   ba1fe:	4299      	cmp	r1, r3
   ba200:	f843 cc04 	str.w	ip, [r3, #-4]
   ba204:	d8d8      	bhi.n	ba1b8 <__gethex+0x3b8>
   ba206:	68a3      	ldr	r3, [r4, #8]
   ba208:	459b      	cmp	fp, r3
   ba20a:	db19      	blt.n	ba240 <__gethex+0x440>
   ba20c:	6861      	ldr	r1, [r4, #4]
   ba20e:	ee18 0a10 	vmov	r0, s16
   ba212:	3101      	adds	r1, #1
   ba214:	f000 f912 	bl	ba43c <_Balloc>
   ba218:	4681      	mov	r9, r0
   ba21a:	b918      	cbnz	r0, ba224 <__gethex+0x424>
   ba21c:	4b1a      	ldr	r3, [pc, #104]	; (ba288 <__gethex+0x488>)
   ba21e:	4602      	mov	r2, r0
   ba220:	2184      	movs	r1, #132	; 0x84
   ba222:	e6a8      	b.n	b9f76 <__gethex+0x176>
   ba224:	6922      	ldr	r2, [r4, #16]
   ba226:	3202      	adds	r2, #2
   ba228:	f104 010c 	add.w	r1, r4, #12
   ba22c:	0092      	lsls	r2, r2, #2
   ba22e:	300c      	adds	r0, #12
   ba230:	f7fe fde3 	bl	b8dfa <memcpy>
   ba234:	4621      	mov	r1, r4
   ba236:	ee18 0a10 	vmov	r0, s16
   ba23a:	f000 f93f 	bl	ba4bc <_Bfree>
   ba23e:	464c      	mov	r4, r9
   ba240:	6923      	ldr	r3, [r4, #16]
   ba242:	1c5a      	adds	r2, r3, #1
   ba244:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   ba248:	6122      	str	r2, [r4, #16]
   ba24a:	2201      	movs	r2, #1
   ba24c:	615a      	str	r2, [r3, #20]
   ba24e:	e7bb      	b.n	ba1c8 <__gethex+0x3c8>
   ba250:	6922      	ldr	r2, [r4, #16]
   ba252:	455a      	cmp	r2, fp
   ba254:	dd0b      	ble.n	ba26e <__gethex+0x46e>
   ba256:	2101      	movs	r1, #1
   ba258:	4620      	mov	r0, r4
   ba25a:	f7ff fd69 	bl	b9d30 <rshift>
   ba25e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ba262:	3501      	adds	r5, #1
   ba264:	42ab      	cmp	r3, r5
   ba266:	f6ff aed0 	blt.w	ba00a <__gethex+0x20a>
   ba26a:	2701      	movs	r7, #1
   ba26c:	e7c0      	b.n	ba1f0 <__gethex+0x3f0>
   ba26e:	f016 061f 	ands.w	r6, r6, #31
   ba272:	d0fa      	beq.n	ba26a <__gethex+0x46a>
   ba274:	4453      	add	r3, sl
   ba276:	f1c6 0620 	rsb	r6, r6, #32
   ba27a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   ba27e:	f000 f9cf 	bl	ba620 <__hi0bits>
   ba282:	42b0      	cmp	r0, r6
   ba284:	dbe7      	blt.n	ba256 <__gethex+0x456>
   ba286:	e7f0      	b.n	ba26a <__gethex+0x46a>
   ba288:	000bc3c9 	.word	0x000bc3c9

000ba28c <L_shift>:
   ba28c:	f1c2 0208 	rsb	r2, r2, #8
   ba290:	0092      	lsls	r2, r2, #2
   ba292:	b570      	push	{r4, r5, r6, lr}
   ba294:	f1c2 0620 	rsb	r6, r2, #32
   ba298:	6843      	ldr	r3, [r0, #4]
   ba29a:	6804      	ldr	r4, [r0, #0]
   ba29c:	fa03 f506 	lsl.w	r5, r3, r6
   ba2a0:	432c      	orrs	r4, r5
   ba2a2:	40d3      	lsrs	r3, r2
   ba2a4:	6004      	str	r4, [r0, #0]
   ba2a6:	f840 3f04 	str.w	r3, [r0, #4]!
   ba2aa:	4288      	cmp	r0, r1
   ba2ac:	d3f4      	bcc.n	ba298 <L_shift+0xc>
   ba2ae:	bd70      	pop	{r4, r5, r6, pc}

000ba2b0 <__match>:
   ba2b0:	b530      	push	{r4, r5, lr}
   ba2b2:	6803      	ldr	r3, [r0, #0]
   ba2b4:	3301      	adds	r3, #1
   ba2b6:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba2ba:	b914      	cbnz	r4, ba2c2 <__match+0x12>
   ba2bc:	6003      	str	r3, [r0, #0]
   ba2be:	2001      	movs	r0, #1
   ba2c0:	bd30      	pop	{r4, r5, pc}
   ba2c2:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba2c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   ba2ca:	2d19      	cmp	r5, #25
   ba2cc:	bf98      	it	ls
   ba2ce:	3220      	addls	r2, #32
   ba2d0:	42a2      	cmp	r2, r4
   ba2d2:	d0f0      	beq.n	ba2b6 <__match+0x6>
   ba2d4:	2000      	movs	r0, #0
   ba2d6:	e7f3      	b.n	ba2c0 <__match+0x10>

000ba2d8 <__hexnan>:
   ba2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba2dc:	680b      	ldr	r3, [r1, #0]
   ba2de:	115e      	asrs	r6, r3, #5
   ba2e0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   ba2e4:	f013 031f 	ands.w	r3, r3, #31
   ba2e8:	b087      	sub	sp, #28
   ba2ea:	bf18      	it	ne
   ba2ec:	3604      	addne	r6, #4
   ba2ee:	2500      	movs	r5, #0
   ba2f0:	1f37      	subs	r7, r6, #4
   ba2f2:	4690      	mov	r8, r2
   ba2f4:	6802      	ldr	r2, [r0, #0]
   ba2f6:	9301      	str	r3, [sp, #4]
   ba2f8:	4682      	mov	sl, r0
   ba2fa:	f846 5c04 	str.w	r5, [r6, #-4]
   ba2fe:	46b9      	mov	r9, r7
   ba300:	463c      	mov	r4, r7
   ba302:	9502      	str	r5, [sp, #8]
   ba304:	46ab      	mov	fp, r5
   ba306:	7851      	ldrb	r1, [r2, #1]
   ba308:	1c53      	adds	r3, r2, #1
   ba30a:	9303      	str	r3, [sp, #12]
   ba30c:	b341      	cbz	r1, ba360 <__hexnan+0x88>
   ba30e:	4608      	mov	r0, r1
   ba310:	9205      	str	r2, [sp, #20]
   ba312:	9104      	str	r1, [sp, #16]
   ba314:	f7ff fd5e 	bl	b9dd4 <__hexdig_fun>
   ba318:	2800      	cmp	r0, #0
   ba31a:	d14f      	bne.n	ba3bc <__hexnan+0xe4>
   ba31c:	9904      	ldr	r1, [sp, #16]
   ba31e:	9a05      	ldr	r2, [sp, #20]
   ba320:	2920      	cmp	r1, #32
   ba322:	d818      	bhi.n	ba356 <__hexnan+0x7e>
   ba324:	9b02      	ldr	r3, [sp, #8]
   ba326:	459b      	cmp	fp, r3
   ba328:	dd13      	ble.n	ba352 <__hexnan+0x7a>
   ba32a:	454c      	cmp	r4, r9
   ba32c:	d206      	bcs.n	ba33c <__hexnan+0x64>
   ba32e:	2d07      	cmp	r5, #7
   ba330:	dc04      	bgt.n	ba33c <__hexnan+0x64>
   ba332:	462a      	mov	r2, r5
   ba334:	4649      	mov	r1, r9
   ba336:	4620      	mov	r0, r4
   ba338:	f7ff ffa8 	bl	ba28c <L_shift>
   ba33c:	4544      	cmp	r4, r8
   ba33e:	d950      	bls.n	ba3e2 <__hexnan+0x10a>
   ba340:	2300      	movs	r3, #0
   ba342:	f1a4 0904 	sub.w	r9, r4, #4
   ba346:	f844 3c04 	str.w	r3, [r4, #-4]
   ba34a:	f8cd b008 	str.w	fp, [sp, #8]
   ba34e:	464c      	mov	r4, r9
   ba350:	461d      	mov	r5, r3
   ba352:	9a03      	ldr	r2, [sp, #12]
   ba354:	e7d7      	b.n	ba306 <__hexnan+0x2e>
   ba356:	2929      	cmp	r1, #41	; 0x29
   ba358:	d156      	bne.n	ba408 <__hexnan+0x130>
   ba35a:	3202      	adds	r2, #2
   ba35c:	f8ca 2000 	str.w	r2, [sl]
   ba360:	f1bb 0f00 	cmp.w	fp, #0
   ba364:	d050      	beq.n	ba408 <__hexnan+0x130>
   ba366:	454c      	cmp	r4, r9
   ba368:	d206      	bcs.n	ba378 <__hexnan+0xa0>
   ba36a:	2d07      	cmp	r5, #7
   ba36c:	dc04      	bgt.n	ba378 <__hexnan+0xa0>
   ba36e:	462a      	mov	r2, r5
   ba370:	4649      	mov	r1, r9
   ba372:	4620      	mov	r0, r4
   ba374:	f7ff ff8a 	bl	ba28c <L_shift>
   ba378:	4544      	cmp	r4, r8
   ba37a:	d934      	bls.n	ba3e6 <__hexnan+0x10e>
   ba37c:	f1a8 0204 	sub.w	r2, r8, #4
   ba380:	4623      	mov	r3, r4
   ba382:	f853 1b04 	ldr.w	r1, [r3], #4
   ba386:	f842 1f04 	str.w	r1, [r2, #4]!
   ba38a:	429f      	cmp	r7, r3
   ba38c:	d2f9      	bcs.n	ba382 <__hexnan+0xaa>
   ba38e:	1b3b      	subs	r3, r7, r4
   ba390:	f023 0303 	bic.w	r3, r3, #3
   ba394:	3304      	adds	r3, #4
   ba396:	3401      	adds	r4, #1
   ba398:	3e03      	subs	r6, #3
   ba39a:	42b4      	cmp	r4, r6
   ba39c:	bf88      	it	hi
   ba39e:	2304      	movhi	r3, #4
   ba3a0:	4443      	add	r3, r8
   ba3a2:	2200      	movs	r2, #0
   ba3a4:	f843 2b04 	str.w	r2, [r3], #4
   ba3a8:	429f      	cmp	r7, r3
   ba3aa:	d2fb      	bcs.n	ba3a4 <__hexnan+0xcc>
   ba3ac:	683b      	ldr	r3, [r7, #0]
   ba3ae:	b91b      	cbnz	r3, ba3b8 <__hexnan+0xe0>
   ba3b0:	4547      	cmp	r7, r8
   ba3b2:	d127      	bne.n	ba404 <__hexnan+0x12c>
   ba3b4:	2301      	movs	r3, #1
   ba3b6:	603b      	str	r3, [r7, #0]
   ba3b8:	2005      	movs	r0, #5
   ba3ba:	e026      	b.n	ba40a <__hexnan+0x132>
   ba3bc:	3501      	adds	r5, #1
   ba3be:	2d08      	cmp	r5, #8
   ba3c0:	f10b 0b01 	add.w	fp, fp, #1
   ba3c4:	dd06      	ble.n	ba3d4 <__hexnan+0xfc>
   ba3c6:	4544      	cmp	r4, r8
   ba3c8:	d9c3      	bls.n	ba352 <__hexnan+0x7a>
   ba3ca:	2300      	movs	r3, #0
   ba3cc:	f844 3c04 	str.w	r3, [r4, #-4]
   ba3d0:	2501      	movs	r5, #1
   ba3d2:	3c04      	subs	r4, #4
   ba3d4:	6822      	ldr	r2, [r4, #0]
   ba3d6:	f000 000f 	and.w	r0, r0, #15
   ba3da:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   ba3de:	6022      	str	r2, [r4, #0]
   ba3e0:	e7b7      	b.n	ba352 <__hexnan+0x7a>
   ba3e2:	2508      	movs	r5, #8
   ba3e4:	e7b5      	b.n	ba352 <__hexnan+0x7a>
   ba3e6:	9b01      	ldr	r3, [sp, #4]
   ba3e8:	2b00      	cmp	r3, #0
   ba3ea:	d0df      	beq.n	ba3ac <__hexnan+0xd4>
   ba3ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba3f0:	f1c3 0320 	rsb	r3, r3, #32
   ba3f4:	fa22 f303 	lsr.w	r3, r2, r3
   ba3f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   ba3fc:	401a      	ands	r2, r3
   ba3fe:	f846 2c04 	str.w	r2, [r6, #-4]
   ba402:	e7d3      	b.n	ba3ac <__hexnan+0xd4>
   ba404:	3f04      	subs	r7, #4
   ba406:	e7d1      	b.n	ba3ac <__hexnan+0xd4>
   ba408:	2004      	movs	r0, #4
   ba40a:	b007      	add	sp, #28
   ba40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000ba410 <__retarget_lock_acquire_recursive>:
   ba410:	4770      	bx	lr

000ba412 <__retarget_lock_release>:
   ba412:	4770      	bx	lr

000ba414 <__retarget_lock_release_recursive>:
   ba414:	4770      	bx	lr

000ba416 <__ascii_mbtowc>:
   ba416:	b082      	sub	sp, #8
   ba418:	b901      	cbnz	r1, ba41c <__ascii_mbtowc+0x6>
   ba41a:	a901      	add	r1, sp, #4
   ba41c:	b142      	cbz	r2, ba430 <__ascii_mbtowc+0x1a>
   ba41e:	b14b      	cbz	r3, ba434 <__ascii_mbtowc+0x1e>
   ba420:	7813      	ldrb	r3, [r2, #0]
   ba422:	600b      	str	r3, [r1, #0]
   ba424:	7812      	ldrb	r2, [r2, #0]
   ba426:	1e10      	subs	r0, r2, #0
   ba428:	bf18      	it	ne
   ba42a:	2001      	movne	r0, #1
   ba42c:	b002      	add	sp, #8
   ba42e:	4770      	bx	lr
   ba430:	4610      	mov	r0, r2
   ba432:	e7fb      	b.n	ba42c <__ascii_mbtowc+0x16>
   ba434:	f06f 0001 	mvn.w	r0, #1
   ba438:	e7f8      	b.n	ba42c <__ascii_mbtowc+0x16>
	...

000ba43c <_Balloc>:
   ba43c:	b570      	push	{r4, r5, r6, lr}
   ba43e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ba440:	4604      	mov	r4, r0
   ba442:	460d      	mov	r5, r1
   ba444:	b976      	cbnz	r6, ba464 <_Balloc+0x28>
   ba446:	2010      	movs	r0, #16
   ba448:	f7fc fbdc 	bl	b6c04 <malloc>
   ba44c:	4602      	mov	r2, r0
   ba44e:	6260      	str	r0, [r4, #36]	; 0x24
   ba450:	b920      	cbnz	r0, ba45c <_Balloc+0x20>
   ba452:	4b18      	ldr	r3, [pc, #96]	; (ba4b4 <_Balloc+0x78>)
   ba454:	4818      	ldr	r0, [pc, #96]	; (ba4b8 <_Balloc+0x7c>)
   ba456:	2166      	movs	r1, #102	; 0x66
   ba458:	f7fc fc04 	bl	b6c64 <__assert_func>
   ba45c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   ba460:	6006      	str	r6, [r0, #0]
   ba462:	60c6      	str	r6, [r0, #12]
   ba464:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba466:	68f3      	ldr	r3, [r6, #12]
   ba468:	b183      	cbz	r3, ba48c <_Balloc+0x50>
   ba46a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba46c:	68db      	ldr	r3, [r3, #12]
   ba46e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   ba472:	b9b8      	cbnz	r0, ba4a4 <_Balloc+0x68>
   ba474:	2101      	movs	r1, #1
   ba476:	fa01 f605 	lsl.w	r6, r1, r5
   ba47a:	1d72      	adds	r2, r6, #5
   ba47c:	0092      	lsls	r2, r2, #2
   ba47e:	4620      	mov	r0, r4
   ba480:	f000 fc9d 	bl	badbe <_calloc_r>
   ba484:	b160      	cbz	r0, ba4a0 <_Balloc+0x64>
   ba486:	e9c0 5601 	strd	r5, r6, [r0, #4]
   ba48a:	e00e      	b.n	ba4aa <_Balloc+0x6e>
   ba48c:	2221      	movs	r2, #33	; 0x21
   ba48e:	2104      	movs	r1, #4
   ba490:	4620      	mov	r0, r4
   ba492:	f000 fc94 	bl	badbe <_calloc_r>
   ba496:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba498:	60f0      	str	r0, [r6, #12]
   ba49a:	68db      	ldr	r3, [r3, #12]
   ba49c:	2b00      	cmp	r3, #0
   ba49e:	d1e4      	bne.n	ba46a <_Balloc+0x2e>
   ba4a0:	2000      	movs	r0, #0
   ba4a2:	bd70      	pop	{r4, r5, r6, pc}
   ba4a4:	6802      	ldr	r2, [r0, #0]
   ba4a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   ba4aa:	2300      	movs	r3, #0
   ba4ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
   ba4b0:	e7f7      	b.n	ba4a2 <_Balloc+0x66>
   ba4b2:	bf00      	nop
   ba4b4:	000bc201 	.word	0x000bc201
   ba4b8:	000bc44e 	.word	0x000bc44e

000ba4bc <_Bfree>:
   ba4bc:	b570      	push	{r4, r5, r6, lr}
   ba4be:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ba4c0:	4605      	mov	r5, r0
   ba4c2:	460c      	mov	r4, r1
   ba4c4:	b976      	cbnz	r6, ba4e4 <_Bfree+0x28>
   ba4c6:	2010      	movs	r0, #16
   ba4c8:	f7fc fb9c 	bl	b6c04 <malloc>
   ba4cc:	4602      	mov	r2, r0
   ba4ce:	6268      	str	r0, [r5, #36]	; 0x24
   ba4d0:	b920      	cbnz	r0, ba4dc <_Bfree+0x20>
   ba4d2:	4b09      	ldr	r3, [pc, #36]	; (ba4f8 <_Bfree+0x3c>)
   ba4d4:	4809      	ldr	r0, [pc, #36]	; (ba4fc <_Bfree+0x40>)
   ba4d6:	218a      	movs	r1, #138	; 0x8a
   ba4d8:	f7fc fbc4 	bl	b6c64 <__assert_func>
   ba4dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   ba4e0:	6006      	str	r6, [r0, #0]
   ba4e2:	60c6      	str	r6, [r0, #12]
   ba4e4:	b13c      	cbz	r4, ba4f6 <_Bfree+0x3a>
   ba4e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   ba4e8:	6862      	ldr	r2, [r4, #4]
   ba4ea:	68db      	ldr	r3, [r3, #12]
   ba4ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   ba4f0:	6021      	str	r1, [r4, #0]
   ba4f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   ba4f6:	bd70      	pop	{r4, r5, r6, pc}
   ba4f8:	000bc201 	.word	0x000bc201
   ba4fc:	000bc44e 	.word	0x000bc44e

000ba500 <__multadd>:
   ba500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba504:	690d      	ldr	r5, [r1, #16]
   ba506:	4607      	mov	r7, r0
   ba508:	460c      	mov	r4, r1
   ba50a:	461e      	mov	r6, r3
   ba50c:	f101 0c14 	add.w	ip, r1, #20
   ba510:	2000      	movs	r0, #0
   ba512:	f8dc 3000 	ldr.w	r3, [ip]
   ba516:	b299      	uxth	r1, r3
   ba518:	fb02 6101 	mla	r1, r2, r1, r6
   ba51c:	0c1e      	lsrs	r6, r3, #16
   ba51e:	0c0b      	lsrs	r3, r1, #16
   ba520:	fb02 3306 	mla	r3, r2, r6, r3
   ba524:	b289      	uxth	r1, r1
   ba526:	3001      	adds	r0, #1
   ba528:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   ba52c:	4285      	cmp	r5, r0
   ba52e:	f84c 1b04 	str.w	r1, [ip], #4
   ba532:	ea4f 4613 	mov.w	r6, r3, lsr #16
   ba536:	dcec      	bgt.n	ba512 <__multadd+0x12>
   ba538:	b30e      	cbz	r6, ba57e <__multadd+0x7e>
   ba53a:	68a3      	ldr	r3, [r4, #8]
   ba53c:	42ab      	cmp	r3, r5
   ba53e:	dc19      	bgt.n	ba574 <__multadd+0x74>
   ba540:	6861      	ldr	r1, [r4, #4]
   ba542:	4638      	mov	r0, r7
   ba544:	3101      	adds	r1, #1
   ba546:	f7ff ff79 	bl	ba43c <_Balloc>
   ba54a:	4680      	mov	r8, r0
   ba54c:	b928      	cbnz	r0, ba55a <__multadd+0x5a>
   ba54e:	4602      	mov	r2, r0
   ba550:	4b0c      	ldr	r3, [pc, #48]	; (ba584 <__multadd+0x84>)
   ba552:	480d      	ldr	r0, [pc, #52]	; (ba588 <__multadd+0x88>)
   ba554:	21b5      	movs	r1, #181	; 0xb5
   ba556:	f7fc fb85 	bl	b6c64 <__assert_func>
   ba55a:	6922      	ldr	r2, [r4, #16]
   ba55c:	3202      	adds	r2, #2
   ba55e:	f104 010c 	add.w	r1, r4, #12
   ba562:	0092      	lsls	r2, r2, #2
   ba564:	300c      	adds	r0, #12
   ba566:	f7fe fc48 	bl	b8dfa <memcpy>
   ba56a:	4621      	mov	r1, r4
   ba56c:	4638      	mov	r0, r7
   ba56e:	f7ff ffa5 	bl	ba4bc <_Bfree>
   ba572:	4644      	mov	r4, r8
   ba574:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   ba578:	3501      	adds	r5, #1
   ba57a:	615e      	str	r6, [r3, #20]
   ba57c:	6125      	str	r5, [r4, #16]
   ba57e:	4620      	mov	r0, r4
   ba580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba584:	000bc3c9 	.word	0x000bc3c9
   ba588:	000bc44e 	.word	0x000bc44e

000ba58c <__s2b>:
   ba58c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba590:	460c      	mov	r4, r1
   ba592:	4615      	mov	r5, r2
   ba594:	461f      	mov	r7, r3
   ba596:	2209      	movs	r2, #9
   ba598:	3308      	adds	r3, #8
   ba59a:	4606      	mov	r6, r0
   ba59c:	fb93 f3f2 	sdiv	r3, r3, r2
   ba5a0:	2100      	movs	r1, #0
   ba5a2:	2201      	movs	r2, #1
   ba5a4:	429a      	cmp	r2, r3
   ba5a6:	db09      	blt.n	ba5bc <__s2b+0x30>
   ba5a8:	4630      	mov	r0, r6
   ba5aa:	f7ff ff47 	bl	ba43c <_Balloc>
   ba5ae:	b940      	cbnz	r0, ba5c2 <__s2b+0x36>
   ba5b0:	4602      	mov	r2, r0
   ba5b2:	4b19      	ldr	r3, [pc, #100]	; (ba618 <__s2b+0x8c>)
   ba5b4:	4819      	ldr	r0, [pc, #100]	; (ba61c <__s2b+0x90>)
   ba5b6:	21ce      	movs	r1, #206	; 0xce
   ba5b8:	f7fc fb54 	bl	b6c64 <__assert_func>
   ba5bc:	0052      	lsls	r2, r2, #1
   ba5be:	3101      	adds	r1, #1
   ba5c0:	e7f0      	b.n	ba5a4 <__s2b+0x18>
   ba5c2:	9b08      	ldr	r3, [sp, #32]
   ba5c4:	6143      	str	r3, [r0, #20]
   ba5c6:	2d09      	cmp	r5, #9
   ba5c8:	f04f 0301 	mov.w	r3, #1
   ba5cc:	6103      	str	r3, [r0, #16]
   ba5ce:	dd16      	ble.n	ba5fe <__s2b+0x72>
   ba5d0:	f104 0909 	add.w	r9, r4, #9
   ba5d4:	46c8      	mov	r8, r9
   ba5d6:	442c      	add	r4, r5
   ba5d8:	f818 3b01 	ldrb.w	r3, [r8], #1
   ba5dc:	4601      	mov	r1, r0
   ba5de:	3b30      	subs	r3, #48	; 0x30
   ba5e0:	220a      	movs	r2, #10
   ba5e2:	4630      	mov	r0, r6
   ba5e4:	f7ff ff8c 	bl	ba500 <__multadd>
   ba5e8:	45a0      	cmp	r8, r4
   ba5ea:	d1f5      	bne.n	ba5d8 <__s2b+0x4c>
   ba5ec:	f1a5 0408 	sub.w	r4, r5, #8
   ba5f0:	444c      	add	r4, r9
   ba5f2:	1b2d      	subs	r5, r5, r4
   ba5f4:	1963      	adds	r3, r4, r5
   ba5f6:	42bb      	cmp	r3, r7
   ba5f8:	db04      	blt.n	ba604 <__s2b+0x78>
   ba5fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba5fe:	340a      	adds	r4, #10
   ba600:	2509      	movs	r5, #9
   ba602:	e7f6      	b.n	ba5f2 <__s2b+0x66>
   ba604:	f814 3b01 	ldrb.w	r3, [r4], #1
   ba608:	4601      	mov	r1, r0
   ba60a:	3b30      	subs	r3, #48	; 0x30
   ba60c:	220a      	movs	r2, #10
   ba60e:	4630      	mov	r0, r6
   ba610:	f7ff ff76 	bl	ba500 <__multadd>
   ba614:	e7ee      	b.n	ba5f4 <__s2b+0x68>
   ba616:	bf00      	nop
   ba618:	000bc3c9 	.word	0x000bc3c9
   ba61c:	000bc44e 	.word	0x000bc44e

000ba620 <__hi0bits>:
   ba620:	0c03      	lsrs	r3, r0, #16
   ba622:	041b      	lsls	r3, r3, #16
   ba624:	b9d3      	cbnz	r3, ba65c <__hi0bits+0x3c>
   ba626:	0400      	lsls	r0, r0, #16
   ba628:	2310      	movs	r3, #16
   ba62a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   ba62e:	bf04      	itt	eq
   ba630:	0200      	lsleq	r0, r0, #8
   ba632:	3308      	addeq	r3, #8
   ba634:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   ba638:	bf04      	itt	eq
   ba63a:	0100      	lsleq	r0, r0, #4
   ba63c:	3304      	addeq	r3, #4
   ba63e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   ba642:	bf04      	itt	eq
   ba644:	0080      	lsleq	r0, r0, #2
   ba646:	3302      	addeq	r3, #2
   ba648:	2800      	cmp	r0, #0
   ba64a:	db05      	blt.n	ba658 <__hi0bits+0x38>
   ba64c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   ba650:	f103 0301 	add.w	r3, r3, #1
   ba654:	bf08      	it	eq
   ba656:	2320      	moveq	r3, #32
   ba658:	4618      	mov	r0, r3
   ba65a:	4770      	bx	lr
   ba65c:	2300      	movs	r3, #0
   ba65e:	e7e4      	b.n	ba62a <__hi0bits+0xa>

000ba660 <__lo0bits>:
   ba660:	6803      	ldr	r3, [r0, #0]
   ba662:	f013 0207 	ands.w	r2, r3, #7
   ba666:	4601      	mov	r1, r0
   ba668:	d00b      	beq.n	ba682 <__lo0bits+0x22>
   ba66a:	07da      	lsls	r2, r3, #31
   ba66c:	d423      	bmi.n	ba6b6 <__lo0bits+0x56>
   ba66e:	0798      	lsls	r0, r3, #30
   ba670:	bf49      	itett	mi
   ba672:	085b      	lsrmi	r3, r3, #1
   ba674:	089b      	lsrpl	r3, r3, #2
   ba676:	2001      	movmi	r0, #1
   ba678:	600b      	strmi	r3, [r1, #0]
   ba67a:	bf5c      	itt	pl
   ba67c:	600b      	strpl	r3, [r1, #0]
   ba67e:	2002      	movpl	r0, #2
   ba680:	4770      	bx	lr
   ba682:	b298      	uxth	r0, r3
   ba684:	b9a8      	cbnz	r0, ba6b2 <__lo0bits+0x52>
   ba686:	0c1b      	lsrs	r3, r3, #16
   ba688:	2010      	movs	r0, #16
   ba68a:	b2da      	uxtb	r2, r3
   ba68c:	b90a      	cbnz	r2, ba692 <__lo0bits+0x32>
   ba68e:	3008      	adds	r0, #8
   ba690:	0a1b      	lsrs	r3, r3, #8
   ba692:	071a      	lsls	r2, r3, #28
   ba694:	bf04      	itt	eq
   ba696:	091b      	lsreq	r3, r3, #4
   ba698:	3004      	addeq	r0, #4
   ba69a:	079a      	lsls	r2, r3, #30
   ba69c:	bf04      	itt	eq
   ba69e:	089b      	lsreq	r3, r3, #2
   ba6a0:	3002      	addeq	r0, #2
   ba6a2:	07da      	lsls	r2, r3, #31
   ba6a4:	d403      	bmi.n	ba6ae <__lo0bits+0x4e>
   ba6a6:	085b      	lsrs	r3, r3, #1
   ba6a8:	f100 0001 	add.w	r0, r0, #1
   ba6ac:	d005      	beq.n	ba6ba <__lo0bits+0x5a>
   ba6ae:	600b      	str	r3, [r1, #0]
   ba6b0:	4770      	bx	lr
   ba6b2:	4610      	mov	r0, r2
   ba6b4:	e7e9      	b.n	ba68a <__lo0bits+0x2a>
   ba6b6:	2000      	movs	r0, #0
   ba6b8:	4770      	bx	lr
   ba6ba:	2020      	movs	r0, #32
   ba6bc:	4770      	bx	lr
	...

000ba6c0 <__i2b>:
   ba6c0:	b510      	push	{r4, lr}
   ba6c2:	460c      	mov	r4, r1
   ba6c4:	2101      	movs	r1, #1
   ba6c6:	f7ff feb9 	bl	ba43c <_Balloc>
   ba6ca:	4602      	mov	r2, r0
   ba6cc:	b928      	cbnz	r0, ba6da <__i2b+0x1a>
   ba6ce:	4b05      	ldr	r3, [pc, #20]	; (ba6e4 <__i2b+0x24>)
   ba6d0:	4805      	ldr	r0, [pc, #20]	; (ba6e8 <__i2b+0x28>)
   ba6d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   ba6d6:	f7fc fac5 	bl	b6c64 <__assert_func>
   ba6da:	2301      	movs	r3, #1
   ba6dc:	6144      	str	r4, [r0, #20]
   ba6de:	6103      	str	r3, [r0, #16]
   ba6e0:	bd10      	pop	{r4, pc}
   ba6e2:	bf00      	nop
   ba6e4:	000bc3c9 	.word	0x000bc3c9
   ba6e8:	000bc44e 	.word	0x000bc44e

000ba6ec <__multiply>:
   ba6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba6f0:	4691      	mov	r9, r2
   ba6f2:	690a      	ldr	r2, [r1, #16]
   ba6f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   ba6f8:	429a      	cmp	r2, r3
   ba6fa:	bfb8      	it	lt
   ba6fc:	460b      	movlt	r3, r1
   ba6fe:	460c      	mov	r4, r1
   ba700:	bfbc      	itt	lt
   ba702:	464c      	movlt	r4, r9
   ba704:	4699      	movlt	r9, r3
   ba706:	6927      	ldr	r7, [r4, #16]
   ba708:	f8d9 a010 	ldr.w	sl, [r9, #16]
   ba70c:	68a3      	ldr	r3, [r4, #8]
   ba70e:	6861      	ldr	r1, [r4, #4]
   ba710:	eb07 060a 	add.w	r6, r7, sl
   ba714:	42b3      	cmp	r3, r6
   ba716:	b085      	sub	sp, #20
   ba718:	bfb8      	it	lt
   ba71a:	3101      	addlt	r1, #1
   ba71c:	f7ff fe8e 	bl	ba43c <_Balloc>
   ba720:	b930      	cbnz	r0, ba730 <__multiply+0x44>
   ba722:	4602      	mov	r2, r0
   ba724:	4b44      	ldr	r3, [pc, #272]	; (ba838 <__multiply+0x14c>)
   ba726:	4845      	ldr	r0, [pc, #276]	; (ba83c <__multiply+0x150>)
   ba728:	f240 115d 	movw	r1, #349	; 0x15d
   ba72c:	f7fc fa9a 	bl	b6c64 <__assert_func>
   ba730:	f100 0514 	add.w	r5, r0, #20
   ba734:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   ba738:	462b      	mov	r3, r5
   ba73a:	2200      	movs	r2, #0
   ba73c:	4543      	cmp	r3, r8
   ba73e:	d321      	bcc.n	ba784 <__multiply+0x98>
   ba740:	f104 0314 	add.w	r3, r4, #20
   ba744:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   ba748:	f109 0314 	add.w	r3, r9, #20
   ba74c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   ba750:	9202      	str	r2, [sp, #8]
   ba752:	1b3a      	subs	r2, r7, r4
   ba754:	3a15      	subs	r2, #21
   ba756:	f022 0203 	bic.w	r2, r2, #3
   ba75a:	3204      	adds	r2, #4
   ba75c:	f104 0115 	add.w	r1, r4, #21
   ba760:	428f      	cmp	r7, r1
   ba762:	bf38      	it	cc
   ba764:	2204      	movcc	r2, #4
   ba766:	9201      	str	r2, [sp, #4]
   ba768:	9a02      	ldr	r2, [sp, #8]
   ba76a:	9303      	str	r3, [sp, #12]
   ba76c:	429a      	cmp	r2, r3
   ba76e:	d80c      	bhi.n	ba78a <__multiply+0x9e>
   ba770:	2e00      	cmp	r6, #0
   ba772:	dd03      	ble.n	ba77c <__multiply+0x90>
   ba774:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   ba778:	2b00      	cmp	r3, #0
   ba77a:	d05a      	beq.n	ba832 <__multiply+0x146>
   ba77c:	6106      	str	r6, [r0, #16]
   ba77e:	b005      	add	sp, #20
   ba780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba784:	f843 2b04 	str.w	r2, [r3], #4
   ba788:	e7d8      	b.n	ba73c <__multiply+0x50>
   ba78a:	f8b3 a000 	ldrh.w	sl, [r3]
   ba78e:	f1ba 0f00 	cmp.w	sl, #0
   ba792:	d024      	beq.n	ba7de <__multiply+0xf2>
   ba794:	f104 0e14 	add.w	lr, r4, #20
   ba798:	46a9      	mov	r9, r5
   ba79a:	f04f 0c00 	mov.w	ip, #0
   ba79e:	f85e 2b04 	ldr.w	r2, [lr], #4
   ba7a2:	f8d9 1000 	ldr.w	r1, [r9]
   ba7a6:	fa1f fb82 	uxth.w	fp, r2
   ba7aa:	b289      	uxth	r1, r1
   ba7ac:	fb0a 110b 	mla	r1, sl, fp, r1
   ba7b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   ba7b4:	f8d9 2000 	ldr.w	r2, [r9]
   ba7b8:	4461      	add	r1, ip
   ba7ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   ba7be:	fb0a c20b 	mla	r2, sl, fp, ip
   ba7c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   ba7c6:	b289      	uxth	r1, r1
   ba7c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   ba7cc:	4577      	cmp	r7, lr
   ba7ce:	f849 1b04 	str.w	r1, [r9], #4
   ba7d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   ba7d6:	d8e2      	bhi.n	ba79e <__multiply+0xb2>
   ba7d8:	9a01      	ldr	r2, [sp, #4]
   ba7da:	f845 c002 	str.w	ip, [r5, r2]
   ba7de:	9a03      	ldr	r2, [sp, #12]
   ba7e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   ba7e4:	3304      	adds	r3, #4
   ba7e6:	f1b9 0f00 	cmp.w	r9, #0
   ba7ea:	d020      	beq.n	ba82e <__multiply+0x142>
   ba7ec:	6829      	ldr	r1, [r5, #0]
   ba7ee:	f104 0c14 	add.w	ip, r4, #20
   ba7f2:	46ae      	mov	lr, r5
   ba7f4:	f04f 0a00 	mov.w	sl, #0
   ba7f8:	f8bc b000 	ldrh.w	fp, [ip]
   ba7fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
   ba800:	fb09 220b 	mla	r2, r9, fp, r2
   ba804:	4492      	add	sl, r2
   ba806:	b289      	uxth	r1, r1
   ba808:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   ba80c:	f84e 1b04 	str.w	r1, [lr], #4
   ba810:	f85c 2b04 	ldr.w	r2, [ip], #4
   ba814:	f8be 1000 	ldrh.w	r1, [lr]
   ba818:	0c12      	lsrs	r2, r2, #16
   ba81a:	fb09 1102 	mla	r1, r9, r2, r1
   ba81e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   ba822:	4567      	cmp	r7, ip
   ba824:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   ba828:	d8e6      	bhi.n	ba7f8 <__multiply+0x10c>
   ba82a:	9a01      	ldr	r2, [sp, #4]
   ba82c:	50a9      	str	r1, [r5, r2]
   ba82e:	3504      	adds	r5, #4
   ba830:	e79a      	b.n	ba768 <__multiply+0x7c>
   ba832:	3e01      	subs	r6, #1
   ba834:	e79c      	b.n	ba770 <__multiply+0x84>
   ba836:	bf00      	nop
   ba838:	000bc3c9 	.word	0x000bc3c9
   ba83c:	000bc44e 	.word	0x000bc44e

000ba840 <__pow5mult>:
   ba840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba844:	4615      	mov	r5, r2
   ba846:	f012 0203 	ands.w	r2, r2, #3
   ba84a:	4606      	mov	r6, r0
   ba84c:	460f      	mov	r7, r1
   ba84e:	d007      	beq.n	ba860 <__pow5mult+0x20>
   ba850:	4c25      	ldr	r4, [pc, #148]	; (ba8e8 <__pow5mult+0xa8>)
   ba852:	3a01      	subs	r2, #1
   ba854:	2300      	movs	r3, #0
   ba856:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   ba85a:	f7ff fe51 	bl	ba500 <__multadd>
   ba85e:	4607      	mov	r7, r0
   ba860:	10ad      	asrs	r5, r5, #2
   ba862:	d03d      	beq.n	ba8e0 <__pow5mult+0xa0>
   ba864:	6a74      	ldr	r4, [r6, #36]	; 0x24
   ba866:	b97c      	cbnz	r4, ba888 <__pow5mult+0x48>
   ba868:	2010      	movs	r0, #16
   ba86a:	f7fc f9cb 	bl	b6c04 <malloc>
   ba86e:	4602      	mov	r2, r0
   ba870:	6270      	str	r0, [r6, #36]	; 0x24
   ba872:	b928      	cbnz	r0, ba880 <__pow5mult+0x40>
   ba874:	4b1d      	ldr	r3, [pc, #116]	; (ba8ec <__pow5mult+0xac>)
   ba876:	481e      	ldr	r0, [pc, #120]	; (ba8f0 <__pow5mult+0xb0>)
   ba878:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   ba87c:	f7fc f9f2 	bl	b6c64 <__assert_func>
   ba880:	e9c0 4401 	strd	r4, r4, [r0, #4]
   ba884:	6004      	str	r4, [r0, #0]
   ba886:	60c4      	str	r4, [r0, #12]
   ba888:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   ba88c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   ba890:	b94c      	cbnz	r4, ba8a6 <__pow5mult+0x66>
   ba892:	f240 2171 	movw	r1, #625	; 0x271
   ba896:	4630      	mov	r0, r6
   ba898:	f7ff ff12 	bl	ba6c0 <__i2b>
   ba89c:	2300      	movs	r3, #0
   ba89e:	f8c8 0008 	str.w	r0, [r8, #8]
   ba8a2:	4604      	mov	r4, r0
   ba8a4:	6003      	str	r3, [r0, #0]
   ba8a6:	f04f 0900 	mov.w	r9, #0
   ba8aa:	07eb      	lsls	r3, r5, #31
   ba8ac:	d50a      	bpl.n	ba8c4 <__pow5mult+0x84>
   ba8ae:	4639      	mov	r1, r7
   ba8b0:	4622      	mov	r2, r4
   ba8b2:	4630      	mov	r0, r6
   ba8b4:	f7ff ff1a 	bl	ba6ec <__multiply>
   ba8b8:	4639      	mov	r1, r7
   ba8ba:	4680      	mov	r8, r0
   ba8bc:	4630      	mov	r0, r6
   ba8be:	f7ff fdfd 	bl	ba4bc <_Bfree>
   ba8c2:	4647      	mov	r7, r8
   ba8c4:	106d      	asrs	r5, r5, #1
   ba8c6:	d00b      	beq.n	ba8e0 <__pow5mult+0xa0>
   ba8c8:	6820      	ldr	r0, [r4, #0]
   ba8ca:	b938      	cbnz	r0, ba8dc <__pow5mult+0x9c>
   ba8cc:	4622      	mov	r2, r4
   ba8ce:	4621      	mov	r1, r4
   ba8d0:	4630      	mov	r0, r6
   ba8d2:	f7ff ff0b 	bl	ba6ec <__multiply>
   ba8d6:	6020      	str	r0, [r4, #0]
   ba8d8:	f8c0 9000 	str.w	r9, [r0]
   ba8dc:	4604      	mov	r4, r0
   ba8de:	e7e4      	b.n	ba8aa <__pow5mult+0x6a>
   ba8e0:	4638      	mov	r0, r7
   ba8e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba8e6:	bf00      	nop
   ba8e8:	000bc598 	.word	0x000bc598
   ba8ec:	000bc201 	.word	0x000bc201
   ba8f0:	000bc44e 	.word	0x000bc44e

000ba8f4 <__lshift>:
   ba8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba8f8:	460c      	mov	r4, r1
   ba8fa:	6849      	ldr	r1, [r1, #4]
   ba8fc:	6923      	ldr	r3, [r4, #16]
   ba8fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
   ba902:	68a3      	ldr	r3, [r4, #8]
   ba904:	4607      	mov	r7, r0
   ba906:	4691      	mov	r9, r2
   ba908:	ea4f 1a62 	mov.w	sl, r2, asr #5
   ba90c:	f108 0601 	add.w	r6, r8, #1
   ba910:	42b3      	cmp	r3, r6
   ba912:	db0b      	blt.n	ba92c <__lshift+0x38>
   ba914:	4638      	mov	r0, r7
   ba916:	f7ff fd91 	bl	ba43c <_Balloc>
   ba91a:	4605      	mov	r5, r0
   ba91c:	b948      	cbnz	r0, ba932 <__lshift+0x3e>
   ba91e:	4602      	mov	r2, r0
   ba920:	4b2a      	ldr	r3, [pc, #168]	; (ba9cc <__lshift+0xd8>)
   ba922:	482b      	ldr	r0, [pc, #172]	; (ba9d0 <__lshift+0xdc>)
   ba924:	f240 11d9 	movw	r1, #473	; 0x1d9
   ba928:	f7fc f99c 	bl	b6c64 <__assert_func>
   ba92c:	3101      	adds	r1, #1
   ba92e:	005b      	lsls	r3, r3, #1
   ba930:	e7ee      	b.n	ba910 <__lshift+0x1c>
   ba932:	2300      	movs	r3, #0
   ba934:	f100 0114 	add.w	r1, r0, #20
   ba938:	f100 0210 	add.w	r2, r0, #16
   ba93c:	4618      	mov	r0, r3
   ba93e:	4553      	cmp	r3, sl
   ba940:	db37      	blt.n	ba9b2 <__lshift+0xbe>
   ba942:	6920      	ldr	r0, [r4, #16]
   ba944:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   ba948:	f104 0314 	add.w	r3, r4, #20
   ba94c:	f019 091f 	ands.w	r9, r9, #31
   ba950:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   ba954:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   ba958:	d02f      	beq.n	ba9ba <__lshift+0xc6>
   ba95a:	f1c9 0e20 	rsb	lr, r9, #32
   ba95e:	468a      	mov	sl, r1
   ba960:	f04f 0c00 	mov.w	ip, #0
   ba964:	681a      	ldr	r2, [r3, #0]
   ba966:	fa02 f209 	lsl.w	r2, r2, r9
   ba96a:	ea42 020c 	orr.w	r2, r2, ip
   ba96e:	f84a 2b04 	str.w	r2, [sl], #4
   ba972:	f853 2b04 	ldr.w	r2, [r3], #4
   ba976:	4298      	cmp	r0, r3
   ba978:	fa22 fc0e 	lsr.w	ip, r2, lr
   ba97c:	d8f2      	bhi.n	ba964 <__lshift+0x70>
   ba97e:	1b03      	subs	r3, r0, r4
   ba980:	3b15      	subs	r3, #21
   ba982:	f023 0303 	bic.w	r3, r3, #3
   ba986:	3304      	adds	r3, #4
   ba988:	f104 0215 	add.w	r2, r4, #21
   ba98c:	4290      	cmp	r0, r2
   ba98e:	bf38      	it	cc
   ba990:	2304      	movcc	r3, #4
   ba992:	f841 c003 	str.w	ip, [r1, r3]
   ba996:	f1bc 0f00 	cmp.w	ip, #0
   ba99a:	d001      	beq.n	ba9a0 <__lshift+0xac>
   ba99c:	f108 0602 	add.w	r6, r8, #2
   ba9a0:	3e01      	subs	r6, #1
   ba9a2:	4638      	mov	r0, r7
   ba9a4:	612e      	str	r6, [r5, #16]
   ba9a6:	4621      	mov	r1, r4
   ba9a8:	f7ff fd88 	bl	ba4bc <_Bfree>
   ba9ac:	4628      	mov	r0, r5
   ba9ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba9b2:	f842 0f04 	str.w	r0, [r2, #4]!
   ba9b6:	3301      	adds	r3, #1
   ba9b8:	e7c1      	b.n	ba93e <__lshift+0x4a>
   ba9ba:	3904      	subs	r1, #4
   ba9bc:	f853 2b04 	ldr.w	r2, [r3], #4
   ba9c0:	f841 2f04 	str.w	r2, [r1, #4]!
   ba9c4:	4298      	cmp	r0, r3
   ba9c6:	d8f9      	bhi.n	ba9bc <__lshift+0xc8>
   ba9c8:	e7ea      	b.n	ba9a0 <__lshift+0xac>
   ba9ca:	bf00      	nop
   ba9cc:	000bc3c9 	.word	0x000bc3c9
   ba9d0:	000bc44e 	.word	0x000bc44e

000ba9d4 <__mcmp>:
   ba9d4:	b530      	push	{r4, r5, lr}
   ba9d6:	6902      	ldr	r2, [r0, #16]
   ba9d8:	690c      	ldr	r4, [r1, #16]
   ba9da:	1b12      	subs	r2, r2, r4
   ba9dc:	d10e      	bne.n	ba9fc <__mcmp+0x28>
   ba9de:	f100 0314 	add.w	r3, r0, #20
   ba9e2:	3114      	adds	r1, #20
   ba9e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   ba9e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   ba9ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   ba9f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   ba9f4:	42a5      	cmp	r5, r4
   ba9f6:	d003      	beq.n	baa00 <__mcmp+0x2c>
   ba9f8:	d305      	bcc.n	baa06 <__mcmp+0x32>
   ba9fa:	2201      	movs	r2, #1
   ba9fc:	4610      	mov	r0, r2
   ba9fe:	bd30      	pop	{r4, r5, pc}
   baa00:	4283      	cmp	r3, r0
   baa02:	d3f3      	bcc.n	ba9ec <__mcmp+0x18>
   baa04:	e7fa      	b.n	ba9fc <__mcmp+0x28>
   baa06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   baa0a:	e7f7      	b.n	ba9fc <__mcmp+0x28>

000baa0c <__mdiff>:
   baa0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   baa10:	460c      	mov	r4, r1
   baa12:	4606      	mov	r6, r0
   baa14:	4611      	mov	r1, r2
   baa16:	4620      	mov	r0, r4
   baa18:	4690      	mov	r8, r2
   baa1a:	f7ff ffdb 	bl	ba9d4 <__mcmp>
   baa1e:	1e05      	subs	r5, r0, #0
   baa20:	d110      	bne.n	baa44 <__mdiff+0x38>
   baa22:	4629      	mov	r1, r5
   baa24:	4630      	mov	r0, r6
   baa26:	f7ff fd09 	bl	ba43c <_Balloc>
   baa2a:	b930      	cbnz	r0, baa3a <__mdiff+0x2e>
   baa2c:	4b3a      	ldr	r3, [pc, #232]	; (bab18 <__mdiff+0x10c>)
   baa2e:	4602      	mov	r2, r0
   baa30:	f240 2132 	movw	r1, #562	; 0x232
   baa34:	4839      	ldr	r0, [pc, #228]	; (bab1c <__mdiff+0x110>)
   baa36:	f7fc f915 	bl	b6c64 <__assert_func>
   baa3a:	2301      	movs	r3, #1
   baa3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   baa40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   baa44:	bfa4      	itt	ge
   baa46:	4643      	movge	r3, r8
   baa48:	46a0      	movge	r8, r4
   baa4a:	4630      	mov	r0, r6
   baa4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   baa50:	bfa6      	itte	ge
   baa52:	461c      	movge	r4, r3
   baa54:	2500      	movge	r5, #0
   baa56:	2501      	movlt	r5, #1
   baa58:	f7ff fcf0 	bl	ba43c <_Balloc>
   baa5c:	b920      	cbnz	r0, baa68 <__mdiff+0x5c>
   baa5e:	4b2e      	ldr	r3, [pc, #184]	; (bab18 <__mdiff+0x10c>)
   baa60:	4602      	mov	r2, r0
   baa62:	f44f 7110 	mov.w	r1, #576	; 0x240
   baa66:	e7e5      	b.n	baa34 <__mdiff+0x28>
   baa68:	f8d8 7010 	ldr.w	r7, [r8, #16]
   baa6c:	6926      	ldr	r6, [r4, #16]
   baa6e:	60c5      	str	r5, [r0, #12]
   baa70:	f104 0914 	add.w	r9, r4, #20
   baa74:	f108 0514 	add.w	r5, r8, #20
   baa78:	f100 0e14 	add.w	lr, r0, #20
   baa7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   baa80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   baa84:	f108 0210 	add.w	r2, r8, #16
   baa88:	46f2      	mov	sl, lr
   baa8a:	2100      	movs	r1, #0
   baa8c:	f859 3b04 	ldr.w	r3, [r9], #4
   baa90:	f852 bf04 	ldr.w	fp, [r2, #4]!
   baa94:	fa1f f883 	uxth.w	r8, r3
   baa98:	fa11 f18b 	uxtah	r1, r1, fp
   baa9c:	0c1b      	lsrs	r3, r3, #16
   baa9e:	eba1 0808 	sub.w	r8, r1, r8
   baaa2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   baaa6:	eb03 4328 	add.w	r3, r3, r8, asr #16
   baaaa:	fa1f f888 	uxth.w	r8, r8
   baaae:	1419      	asrs	r1, r3, #16
   baab0:	454e      	cmp	r6, r9
   baab2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   baab6:	f84a 3b04 	str.w	r3, [sl], #4
   baaba:	d8e7      	bhi.n	baa8c <__mdiff+0x80>
   baabc:	1b33      	subs	r3, r6, r4
   baabe:	3b15      	subs	r3, #21
   baac0:	f023 0303 	bic.w	r3, r3, #3
   baac4:	3304      	adds	r3, #4
   baac6:	3415      	adds	r4, #21
   baac8:	42a6      	cmp	r6, r4
   baaca:	bf38      	it	cc
   baacc:	2304      	movcc	r3, #4
   baace:	441d      	add	r5, r3
   baad0:	4473      	add	r3, lr
   baad2:	469e      	mov	lr, r3
   baad4:	462e      	mov	r6, r5
   baad6:	4566      	cmp	r6, ip
   baad8:	d30e      	bcc.n	baaf8 <__mdiff+0xec>
   baada:	f10c 0203 	add.w	r2, ip, #3
   baade:	1b52      	subs	r2, r2, r5
   baae0:	f022 0203 	bic.w	r2, r2, #3
   baae4:	3d03      	subs	r5, #3
   baae6:	45ac      	cmp	ip, r5
   baae8:	bf38      	it	cc
   baaea:	2200      	movcc	r2, #0
   baaec:	441a      	add	r2, r3
   baaee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   baaf2:	b17b      	cbz	r3, bab14 <__mdiff+0x108>
   baaf4:	6107      	str	r7, [r0, #16]
   baaf6:	e7a3      	b.n	baa40 <__mdiff+0x34>
   baaf8:	f856 8b04 	ldr.w	r8, [r6], #4
   baafc:	fa11 f288 	uxtah	r2, r1, r8
   bab00:	1414      	asrs	r4, r2, #16
   bab02:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bab06:	b292      	uxth	r2, r2
   bab08:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bab0c:	f84e 2b04 	str.w	r2, [lr], #4
   bab10:	1421      	asrs	r1, r4, #16
   bab12:	e7e0      	b.n	baad6 <__mdiff+0xca>
   bab14:	3f01      	subs	r7, #1
   bab16:	e7ea      	b.n	baaee <__mdiff+0xe2>
   bab18:	000bc3c9 	.word	0x000bc3c9
   bab1c:	000bc44e 	.word	0x000bc44e

000bab20 <__ulp>:
   bab20:	b082      	sub	sp, #8
   bab22:	ed8d 0b00 	vstr	d0, [sp]
   bab26:	9b01      	ldr	r3, [sp, #4]
   bab28:	4912      	ldr	r1, [pc, #72]	; (bab74 <__ulp+0x54>)
   bab2a:	4019      	ands	r1, r3
   bab2c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bab30:	2900      	cmp	r1, #0
   bab32:	dd05      	ble.n	bab40 <__ulp+0x20>
   bab34:	2200      	movs	r2, #0
   bab36:	460b      	mov	r3, r1
   bab38:	ec43 2b10 	vmov	d0, r2, r3
   bab3c:	b002      	add	sp, #8
   bab3e:	4770      	bx	lr
   bab40:	4249      	negs	r1, r1
   bab42:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bab46:	ea4f 5021 	mov.w	r0, r1, asr #20
   bab4a:	f04f 0200 	mov.w	r2, #0
   bab4e:	f04f 0300 	mov.w	r3, #0
   bab52:	da04      	bge.n	bab5e <__ulp+0x3e>
   bab54:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bab58:	fa41 f300 	asr.w	r3, r1, r0
   bab5c:	e7ec      	b.n	bab38 <__ulp+0x18>
   bab5e:	f1a0 0114 	sub.w	r1, r0, #20
   bab62:	291e      	cmp	r1, #30
   bab64:	bfda      	itte	le
   bab66:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bab6a:	fa20 f101 	lsrle.w	r1, r0, r1
   bab6e:	2101      	movgt	r1, #1
   bab70:	460a      	mov	r2, r1
   bab72:	e7e1      	b.n	bab38 <__ulp+0x18>
   bab74:	7ff00000 	.word	0x7ff00000

000bab78 <__b2d>:
   bab78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bab7a:	6905      	ldr	r5, [r0, #16]
   bab7c:	f100 0714 	add.w	r7, r0, #20
   bab80:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bab84:	1f2e      	subs	r6, r5, #4
   bab86:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bab8a:	4620      	mov	r0, r4
   bab8c:	f7ff fd48 	bl	ba620 <__hi0bits>
   bab90:	f1c0 0320 	rsb	r3, r0, #32
   bab94:	280a      	cmp	r0, #10
   bab96:	f8df c07c 	ldr.w	ip, [pc, #124]	; bac14 <__b2d+0x9c>
   bab9a:	600b      	str	r3, [r1, #0]
   bab9c:	dc14      	bgt.n	babc8 <__b2d+0x50>
   bab9e:	f1c0 0e0b 	rsb	lr, r0, #11
   baba2:	fa24 f10e 	lsr.w	r1, r4, lr
   baba6:	42b7      	cmp	r7, r6
   baba8:	ea41 030c 	orr.w	r3, r1, ip
   babac:	bf34      	ite	cc
   babae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   babb2:	2100      	movcs	r1, #0
   babb4:	3015      	adds	r0, #21
   babb6:	fa04 f000 	lsl.w	r0, r4, r0
   babba:	fa21 f10e 	lsr.w	r1, r1, lr
   babbe:	ea40 0201 	orr.w	r2, r0, r1
   babc2:	ec43 2b10 	vmov	d0, r2, r3
   babc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   babc8:	42b7      	cmp	r7, r6
   babca:	bf3a      	itte	cc
   babcc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   babd0:	f1a5 0608 	subcc.w	r6, r5, #8
   babd4:	2100      	movcs	r1, #0
   babd6:	380b      	subs	r0, #11
   babd8:	d017      	beq.n	bac0a <__b2d+0x92>
   babda:	f1c0 0c20 	rsb	ip, r0, #32
   babde:	fa04 f500 	lsl.w	r5, r4, r0
   babe2:	42be      	cmp	r6, r7
   babe4:	fa21 f40c 	lsr.w	r4, r1, ip
   babe8:	ea45 0504 	orr.w	r5, r5, r4
   babec:	bf8c      	ite	hi
   babee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   babf2:	2400      	movls	r4, #0
   babf4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   babf8:	fa01 f000 	lsl.w	r0, r1, r0
   babfc:	fa24 f40c 	lsr.w	r4, r4, ip
   bac00:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bac04:	ea40 0204 	orr.w	r2, r0, r4
   bac08:	e7db      	b.n	babc2 <__b2d+0x4a>
   bac0a:	ea44 030c 	orr.w	r3, r4, ip
   bac0e:	460a      	mov	r2, r1
   bac10:	e7d7      	b.n	babc2 <__b2d+0x4a>
   bac12:	bf00      	nop
   bac14:	3ff00000 	.word	0x3ff00000

000bac18 <__d2b>:
   bac18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bac1c:	4689      	mov	r9, r1
   bac1e:	2101      	movs	r1, #1
   bac20:	ec57 6b10 	vmov	r6, r7, d0
   bac24:	4690      	mov	r8, r2
   bac26:	f7ff fc09 	bl	ba43c <_Balloc>
   bac2a:	4604      	mov	r4, r0
   bac2c:	b930      	cbnz	r0, bac3c <__d2b+0x24>
   bac2e:	4602      	mov	r2, r0
   bac30:	4b25      	ldr	r3, [pc, #148]	; (bacc8 <__d2b+0xb0>)
   bac32:	4826      	ldr	r0, [pc, #152]	; (baccc <__d2b+0xb4>)
   bac34:	f240 310a 	movw	r1, #778	; 0x30a
   bac38:	f7fc f814 	bl	b6c64 <__assert_func>
   bac3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bac40:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bac44:	bb35      	cbnz	r5, bac94 <__d2b+0x7c>
   bac46:	2e00      	cmp	r6, #0
   bac48:	9301      	str	r3, [sp, #4]
   bac4a:	d028      	beq.n	bac9e <__d2b+0x86>
   bac4c:	4668      	mov	r0, sp
   bac4e:	9600      	str	r6, [sp, #0]
   bac50:	f7ff fd06 	bl	ba660 <__lo0bits>
   bac54:	9900      	ldr	r1, [sp, #0]
   bac56:	b300      	cbz	r0, bac9a <__d2b+0x82>
   bac58:	9a01      	ldr	r2, [sp, #4]
   bac5a:	f1c0 0320 	rsb	r3, r0, #32
   bac5e:	fa02 f303 	lsl.w	r3, r2, r3
   bac62:	430b      	orrs	r3, r1
   bac64:	40c2      	lsrs	r2, r0
   bac66:	6163      	str	r3, [r4, #20]
   bac68:	9201      	str	r2, [sp, #4]
   bac6a:	9b01      	ldr	r3, [sp, #4]
   bac6c:	61a3      	str	r3, [r4, #24]
   bac6e:	2b00      	cmp	r3, #0
   bac70:	bf14      	ite	ne
   bac72:	2202      	movne	r2, #2
   bac74:	2201      	moveq	r2, #1
   bac76:	6122      	str	r2, [r4, #16]
   bac78:	b1d5      	cbz	r5, bacb0 <__d2b+0x98>
   bac7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bac7e:	4405      	add	r5, r0
   bac80:	f8c9 5000 	str.w	r5, [r9]
   bac84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bac88:	f8c8 0000 	str.w	r0, [r8]
   bac8c:	4620      	mov	r0, r4
   bac8e:	b003      	add	sp, #12
   bac90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bac94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bac98:	e7d5      	b.n	bac46 <__d2b+0x2e>
   bac9a:	6161      	str	r1, [r4, #20]
   bac9c:	e7e5      	b.n	bac6a <__d2b+0x52>
   bac9e:	a801      	add	r0, sp, #4
   baca0:	f7ff fcde 	bl	ba660 <__lo0bits>
   baca4:	9b01      	ldr	r3, [sp, #4]
   baca6:	6163      	str	r3, [r4, #20]
   baca8:	2201      	movs	r2, #1
   bacaa:	6122      	str	r2, [r4, #16]
   bacac:	3020      	adds	r0, #32
   bacae:	e7e3      	b.n	bac78 <__d2b+0x60>
   bacb0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bacb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bacb8:	f8c9 0000 	str.w	r0, [r9]
   bacbc:	6918      	ldr	r0, [r3, #16]
   bacbe:	f7ff fcaf 	bl	ba620 <__hi0bits>
   bacc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bacc6:	e7df      	b.n	bac88 <__d2b+0x70>
   bacc8:	000bc3c9 	.word	0x000bc3c9
   baccc:	000bc44e 	.word	0x000bc44e

000bacd0 <__ratio>:
   bacd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bacd4:	4688      	mov	r8, r1
   bacd6:	4669      	mov	r1, sp
   bacd8:	4681      	mov	r9, r0
   bacda:	f7ff ff4d 	bl	bab78 <__b2d>
   bacde:	a901      	add	r1, sp, #4
   bace0:	4640      	mov	r0, r8
   bace2:	ec55 4b10 	vmov	r4, r5, d0
   bace6:	f7ff ff47 	bl	bab78 <__b2d>
   bacea:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bacee:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bacf2:	eba3 0c02 	sub.w	ip, r3, r2
   bacf6:	e9dd 3200 	ldrd	r3, r2, [sp]
   bacfa:	1a9b      	subs	r3, r3, r2
   bacfc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bad00:	ec51 0b10 	vmov	r0, r1, d0
   bad04:	2b00      	cmp	r3, #0
   bad06:	bfd6      	itet	le
   bad08:	460a      	movle	r2, r1
   bad0a:	462a      	movgt	r2, r5
   bad0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bad10:	468b      	mov	fp, r1
   bad12:	462f      	mov	r7, r5
   bad14:	bfd4      	ite	le
   bad16:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bad1a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bad1e:	4620      	mov	r0, r4
   bad20:	ee10 2a10 	vmov	r2, s0
   bad24:	465b      	mov	r3, fp
   bad26:	4639      	mov	r1, r7
   bad28:	f7fd fe1a 	bl	b8960 <__aeabi_ddiv>
   bad2c:	ec41 0b10 	vmov	d0, r0, r1
   bad30:	b003      	add	sp, #12
   bad32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bad36 <__copybits>:
   bad36:	3901      	subs	r1, #1
   bad38:	b570      	push	{r4, r5, r6, lr}
   bad3a:	1149      	asrs	r1, r1, #5
   bad3c:	6914      	ldr	r4, [r2, #16]
   bad3e:	3101      	adds	r1, #1
   bad40:	f102 0314 	add.w	r3, r2, #20
   bad44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bad48:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bad4c:	1f05      	subs	r5, r0, #4
   bad4e:	42a3      	cmp	r3, r4
   bad50:	d30c      	bcc.n	bad6c <__copybits+0x36>
   bad52:	1aa3      	subs	r3, r4, r2
   bad54:	3b11      	subs	r3, #17
   bad56:	f023 0303 	bic.w	r3, r3, #3
   bad5a:	3211      	adds	r2, #17
   bad5c:	42a2      	cmp	r2, r4
   bad5e:	bf88      	it	hi
   bad60:	2300      	movhi	r3, #0
   bad62:	4418      	add	r0, r3
   bad64:	2300      	movs	r3, #0
   bad66:	4288      	cmp	r0, r1
   bad68:	d305      	bcc.n	bad76 <__copybits+0x40>
   bad6a:	bd70      	pop	{r4, r5, r6, pc}
   bad6c:	f853 6b04 	ldr.w	r6, [r3], #4
   bad70:	f845 6f04 	str.w	r6, [r5, #4]!
   bad74:	e7eb      	b.n	bad4e <__copybits+0x18>
   bad76:	f840 3b04 	str.w	r3, [r0], #4
   bad7a:	e7f4      	b.n	bad66 <__copybits+0x30>

000bad7c <__any_on>:
   bad7c:	f100 0214 	add.w	r2, r0, #20
   bad80:	6900      	ldr	r0, [r0, #16]
   bad82:	114b      	asrs	r3, r1, #5
   bad84:	4298      	cmp	r0, r3
   bad86:	b510      	push	{r4, lr}
   bad88:	db11      	blt.n	badae <__any_on+0x32>
   bad8a:	dd0a      	ble.n	bada2 <__any_on+0x26>
   bad8c:	f011 011f 	ands.w	r1, r1, #31
   bad90:	d007      	beq.n	bada2 <__any_on+0x26>
   bad92:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bad96:	fa24 f001 	lsr.w	r0, r4, r1
   bad9a:	fa00 f101 	lsl.w	r1, r0, r1
   bad9e:	428c      	cmp	r4, r1
   bada0:	d10b      	bne.n	badba <__any_on+0x3e>
   bada2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bada6:	4293      	cmp	r3, r2
   bada8:	d803      	bhi.n	badb2 <__any_on+0x36>
   badaa:	2000      	movs	r0, #0
   badac:	bd10      	pop	{r4, pc}
   badae:	4603      	mov	r3, r0
   badb0:	e7f7      	b.n	bada2 <__any_on+0x26>
   badb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   badb6:	2900      	cmp	r1, #0
   badb8:	d0f5      	beq.n	bada6 <__any_on+0x2a>
   badba:	2001      	movs	r0, #1
   badbc:	e7f6      	b.n	badac <__any_on+0x30>

000badbe <_calloc_r>:
   badbe:	b513      	push	{r0, r1, r4, lr}
   badc0:	434a      	muls	r2, r1
   badc2:	4611      	mov	r1, r2
   badc4:	9201      	str	r2, [sp, #4]
   badc6:	f7fb ff3d 	bl	b6c44 <_malloc_r>
   badca:	4604      	mov	r4, r0
   badcc:	b118      	cbz	r0, badd6 <_calloc_r+0x18>
   badce:	9a01      	ldr	r2, [sp, #4]
   badd0:	2100      	movs	r1, #0
   badd2:	f7fe f820 	bl	b8e16 <memset>
   badd6:	4620      	mov	r0, r4
   badd8:	b002      	add	sp, #8
   badda:	bd10      	pop	{r4, pc}
   baddc:	0000      	movs	r0, r0
	...

000bade0 <nan>:
   bade0:	ed9f 0b01 	vldr	d0, [pc, #4]	; bade8 <nan+0x8>
   bade4:	4770      	bx	lr
   bade6:	bf00      	nop
   bade8:	00000000 	.word	0x00000000
   badec:	7ff80000 	.word	0x7ff80000

000badf0 <__ascii_wctomb>:
   badf0:	b149      	cbz	r1, bae06 <__ascii_wctomb+0x16>
   badf2:	2aff      	cmp	r2, #255	; 0xff
   badf4:	bf85      	ittet	hi
   badf6:	238a      	movhi	r3, #138	; 0x8a
   badf8:	6003      	strhi	r3, [r0, #0]
   badfa:	700a      	strbls	r2, [r1, #0]
   badfc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bae00:	bf98      	it	ls
   bae02:	2001      	movls	r0, #1
   bae04:	4770      	bx	lr
   bae06:	4608      	mov	r0, r1
   bae08:	4770      	bx	lr
	...

000bae0c <__aeabi_d2lz>:
   bae0c:	b538      	push	{r3, r4, r5, lr}
   bae0e:	2200      	movs	r2, #0
   bae10:	2300      	movs	r3, #0
   bae12:	4604      	mov	r4, r0
   bae14:	460d      	mov	r5, r1
   bae16:	f7fd feeb 	bl	b8bf0 <__aeabi_dcmplt>
   bae1a:	b928      	cbnz	r0, bae28 <__aeabi_d2lz+0x1c>
   bae1c:	4620      	mov	r0, r4
   bae1e:	4629      	mov	r1, r5
   bae20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bae24:	f7fd bfba 	b.w	b8d9c <__aeabi_d2ulz>
   bae28:	4620      	mov	r0, r4
   bae2a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bae2e:	f7fd ffb5 	bl	b8d9c <__aeabi_d2ulz>
   bae32:	4240      	negs	r0, r0
   bae34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bae38:	bd38      	pop	{r3, r4, r5, pc}
   bae3a:	bf00      	nop

000bae3c <dynalib_user>:
   bae3c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bae4c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   bae5c:	7620 7269 7574 6c61 2500 0069 6c25 0069      virtual.%i.%li.
   bae6c:	0043 0046 6d41 6962 6e65 2074 696c 6867     C.F.Ambient ligh
   bae7c:	2074 656c 6576 3a6c 0020 6e69 6f00 7475     t level: .in.out
   bae8c:	7000 6d77 6400 0077 7761 5100 796f 3134     .pwm.dw.aw.Qoy41
   bae9c:	4d58 4a77 4330 444c 3239 5936 7a4c 6449     XMwJ0CLD926YLzId
   baeac:	6b72 5a46 5761 4931 5176 0058 7776 2500     rkFZaW1IvQX.vw.%
   baebc:	0075 694d 696e 756d 206d 6d41 6962 6e65     u.Minimum Ambien
   baecc:	2074 694c 6867 3a74 4d00 7861 6d69 6d75     t Light:.Maximum
   baedc:	4120 626d 6569 746e 4c20 6769 7468 003a      Ambient Light:.
   baeec:	694d 6867 2074 6177 746e 7420 206f 6863     Might want to ch
   baefc:	6365 206b 6874 7369 6f20 7475 202c 6d61     eck this out, am
   baf0c:	6962 6e65 2074 696c 6867 2074 7369 7420     bient light is t
   baf1c:	6f6f 6820 6769 2168 5700 7461 6863 6f20     oo high!.Watch o
   baf2c:	7475 202c 6d61 6962 6e65 2074 696c 6867     ut, ambient ligh
   baf3c:	2074 6f74 206f 6f6c 0077 6144 7772 6e69     t too low.Darwin
   baf4c:	7327 4920 6870 6e6f 0065 614c 3a74 0020     's Iphone.Lat: .
   baf5c:	6f4c 3a6e 0020 6c41 6974 7574 6574 203a     Lon: .Altitute: 
	...

000baf6d <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   baf6d:	6c62 6b6e 6e69 0066 6576 0072 2e31 2e31     blnkinf.ver.1.1.
   baf7d:	0030 2d68 6562 7461 3400 0035 7562 6666     0.h-beat.45.buff
   baf8d:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
   baf9d:	6974 6c63 2065 7241 6f67 006e 7562 6c69     ticle Argon.buil
   bafad:	0064 754a 206c 3420 3220 3230 2032 3930     d.Jul  4 2022 09
   bafbd:	323a 3a30 3333 0000                          :20:33...

000bafc6 <_ZL4font>:
   bafc6:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   bafd6:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   bafe6:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   baff6:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   bb006:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   bb016:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   bb026:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   bb036:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   bb046:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   bb056:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   bb066:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   bb076:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   bb086:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   bb096:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   bb0a6:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   bb0b6:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   bb0c6:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   bb0d6:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   bb0e6:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   bb0f6:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   bb106:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   bb116:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   bb126:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   bb136:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   bb146:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   bb156:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   bb166:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   bb176:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   bb186:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   bb196:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   bb1a6:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   bb1b6:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   bb1c6:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   bb1d6:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   bb1e6:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   bb1f6:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   bb206:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   bb216:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   bb226:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   bb236:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   bb246:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   bb256:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   bb266:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   bb276:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   bb286:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   bb296:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   bb2a6:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   bb2b6:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   bb2c6:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   bb2d6:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   bb2e6:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   bb2f6:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   bb306:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   bb316:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   bb326:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   bb336:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   bb346:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   bb356:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   bb366:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   bb376:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   bb386:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   bb396:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   bb3a6:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   bb3b6:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   bb3c6:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   bb3d6:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   bb3e6:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   bb3f6:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   bb406:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   bb416:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   bb426:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   bb436:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   bb446:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   bb456:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   bb466:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   bb476:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   bb486:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   bb496:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   bb4a6:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   bb4b6:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000bb4c8 <_ZTV12Adafruit_GFX>:
	...
   bb4d8:	577d 000b 70dd 000b 40a5 000b 5183 000b     }W...p...@...Q..
   bb4e8:	5185 000b 51b7 000b 5193 000b 51a5 000b     .Q...Q...Q...Q..
   bb4f8:	50c5 000b 5183 000b 53af 000b 53ad 000b     .P...Q...S...S..
   bb508:	51cf 000b 520d 000b 5247 000b 528d 000b     .Q...R..GR...R..
   bb518:	52a9 000b 532d 000b 6564 6166 6c75 2074     .R..-S..default 
   bb528:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   bb538:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   bb548:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   bb558:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000bb564 <_ZTVN8particle11SPISettingsE>:
	...
   bb56c:	58b9 000b 588b 000b 588d 000b               .X...X...X..

000bb578 <_ZL12splash1_data>:
   bb578:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   bb588:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   bb598:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   bb5a8:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   bb5b8:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   bb5c8:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   bb5e0:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   bb5f0:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   bb600:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   bb610:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   bb620:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   bb630:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   bb640:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   bb650:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   bb660:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   bb670:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   bb680:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   bb690:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   bb6a0:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   bb6b0:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   bb6c0:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   bb6d0:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   bb6e0:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   bb6f0:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   bb708:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   bb720:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   bb730:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   bb740:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   bb750:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   bb760:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   bb770:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   bb780:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   bb790:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   bb7a0:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   bb7b0:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   bb7c0:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   bb7d0:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   bb7e0:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   bb7f0:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   bb800:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   bb810:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   bb820:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   bb830:	fdff 5b6b 6adb c0fd                         ..k[.j..

000bb838 <_ZL12splash2_data>:
   bb838:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   bb848:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   bb858:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   bb874:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   bb884:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   bb894:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   bb8a4:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   bb8b4:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   bb8c4:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   bb8d4:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   bb8e4:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   bb8f4:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   bb904:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   bb914:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   bb924:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   bb934:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   bb944:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   bb954:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   bb964:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   bb974:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   bb984:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   bb994:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   bb9a4:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   bb9b4:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   bb9cc:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   bb9dc:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   bb9ec:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   bb9fc:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   bba0c:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000bba18 <_ZTV16Adafruit_SSD1306>:
	...
   bba20:	590d 000b 5925 000b 577d 000b 70dd 000b     .Y..%Y..}W...p..
   bba30:	5939 000b 5183 000b 5185 000b 51b7 000b     9Y...Q...Q...Q..
   bba40:	5193 000b 51a5 000b 50c5 000b 5183 000b     .Q...Q...P...Q..
   bba50:	53af 000b 5ad7 000b 607f 000b 6031 000b     .S...Z...`..1`..
   bba60:	5247 000b 528d 000b 52a9 000b 532d 000b     GR...R...R..-S..

000bba70 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   bba70:	8000 e0c0 f8f0 fefc                         ........

000bba78 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   bba78:	0100 0703 1f0f 7f3f                         ......?.

000bba80 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   bba80:	d5ae a880                                   ....

000bba84 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   bba84:	00d3 8d40                                   ..@.

000bba88 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   bba88:	0020 c8a1                                    ...

000bba8c <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   bba8c:	40db a6a4 af2e                              .@....

000bba92 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   bba92:	02da 8f81                                   ....

000bba96 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   bba96:	12da                                         ...

000bba99 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   bba99:	02da                                         ...

000bba9c <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   bba9c:	0022 21ff 0000 0000                         "..!....

000bbaa4 <_ZL22BlynkReadHandlerVector>:
   bbaa4:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbab4:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbac4:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbad4:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbae4:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbaf4:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbb04:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbb14:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbb24:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbb34:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbb44:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbb54:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbb64:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbb74:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbb84:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbb94:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbba4:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbbb4:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbbc4:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbbd4:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbbe4:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbbf4:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbc04:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbc14:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbc24:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbc34:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbc44:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbc54:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbc64:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbc74:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbc84:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..
   bbc94:	656f 000b 656f 000b 656f 000b 656f 000b     oe..oe..oe..oe..

000bbca4 <_ZL23BlynkWriteHandlerVector>:
   bbca4:	6571 000b 4235 000b 4fe1 000b 6571 000b     qe..5B...O..qe..
   bbcb4:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbcc4:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbcd4:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbce4:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbcf4:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbd04:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbd14:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbd24:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbd34:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbd44:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbd54:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbd64:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbd74:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbd84:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbd94:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbda4:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbdb4:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbdc4:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbdd4:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbde4:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbdf4:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbe04:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbe14:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbe24:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbe34:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbe44:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbe54:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbe64:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbe74:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbe84:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..
   bbe94:	6571 000b 6571 000b 6571 000b 6571 000b     qe..qe..qe..qe..

000bbea4 <_ZTV16OledWingAdafruit>:
	...
   bbeac:	659d 000b 65bd 000b 577d 000b 70dd 000b     .e...e..}W...p..
   bbebc:	5939 000b 5183 000b 5185 000b 51b7 000b     9Y...Q...Q...Q..
   bbecc:	5193 000b 51a5 000b 50c5 000b 5183 000b     .Q...Q...P...Q..
   bbedc:	53af 000b 5ad7 000b 607f 000b 6031 000b     .S...Z...`..1`..
   bbeec:	5247 000b 528d 000b 52a9 000b 532d 000b     GR...R...R..-S..

000bbefc <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000bbf04 <_ZTVN5spark13EthernetClassE>:
	...
   bbf0c:	6d13 000b 6d09 000b 6cff 000b 6cf5 000b     .m...m...l...l..
   bbf1c:	6ce9 000b 6cdd 000b 6fb9 000b 6fc1 000b     .l...l...o...o..
   bbf2c:	6cd1 000b 6cc9 000b 6cbf 000b 6cb5 000b     .l...l...l...l..
   bbf3c:	6ff1 000b                                   .o..

000bbf40 <_ZTV7TwoWire>:
	...
   bbf48:	6d31 000b 6d7b 000b 6d53 000b 6d33 000b     1m..{m..Sm..3m..
   bbf58:	6d5b 000b 6d63 000b 6d6b 000b 6d73 000b     [m..cm..km..sm..

000bbf68 <_ZTV9IPAddress>:
	...
   bbf70:	6e45 000b 6e35 000b 6e37 000b 7061 0070     En..5n..7n..app.

000bbf80 <_ZTVN5spark12NetworkClassE>:
	...
   bbf88:	6f79 000b 6f83 000b 6f8d 000b 6f97 000b     yo...o...o...o..
   bbf98:	6fa1 000b 6fad 000b 6fb9 000b 6fc1 000b     .o...o...o...o..
   bbfa8:	6fc9 000b 6fd5 000b 6fdd 000b 6fe7 000b     .o...o...o...o..
   bbfb8:	6ff1 000b 616e 006e 6e69 0066 766f 0066     .o..nan.inf.ovf.
   bbfc8:	002e                                        ..

000bbfca <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bbfca:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   bbfda:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..
	...

000bbfec <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bbff4:	763d 000b 7661 000b 7b93 000b 766f 000b     =v..av...{..ov..
   bc004:	7641 000b                                   Av..

000bc008 <_ZTV9TCPClient>:
	...
   bc010:	76ed 000b 7721 000b 75b9 000b 75d3 000b     .v..!w...u...u..
   bc020:	7a29 000b 75fd 000b 789f 000b 7631 000b     )z...u...x..1v..
   bc030:	7931 000b 7771 000b 78cd 000b 7add 000b     1y..qw...x...z..
   bc040:	786d 000b 7633 000b 75e5 000b 7675 000b     mx..3v...u..uv..
   bc050:	7751 000b 5925 252d 2d6d 6425 2554 3a48     Qw..%Y-%m-%dT%H:
   bc060:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bc070 <_ZTV11USARTSerial>:
	...
   bc078:	7bad 000b 7c19 000b 7bf1 000b 70dd 000b     .{...|...{...p..
   bc088:	7bc1 000b 7bdd 000b 7bcf 000b 7beb 000b     .{...{...{...{..
   bc098:	7baf 000b 7bb3 000b                         .{...{..

000bc0a0 <_ZTV9USBSerial>:
	...
   bc0a8:	7c57 000b 7cbf 000b 7c95 000b 70dd 000b     W|...|...|...p..
   bc0b8:	7c87 000b 7c59 000b 7c69 000b 7cb9 000b     .|..Y|..i|...|..
   bc0c8:	7c79 000b 7c51 000b                         y|..Q|..

000bc0d0 <_ZTVN5spark9WiFiClassE>:
	...
   bc0d8:	7daf 000b 7da5 000b 7d9b 000b 7d51 000b     .}...}...}..Q}..
   bc0e8:	7d8f 000b 7d83 000b 6fb9 000b 6fc1 000b     .}...}...o...o..
   bc0f8:	7d77 000b 7d6f 000b 7d65 000b 7d5b 000b     w}..o}..e}..[}..
   bc108:	6ff1 000b                                   .o..

000bc10c <_ZSt7nothrow>:
	...

000bc10d <_ZTSSt19_Sp_make_shared_tag>:
   bc10d:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bc11d:	6572 5f64 6174 0067 0000                     red_tag....

000bc128 <_ZTISt19_Sp_make_shared_tag>:
   bc128:	c168 000b c10d 000b                         h.......

000bc130 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bc130:	c1c8 000b c13c 000b c1ec 000b               ....<.......

000bc13c <_ZTSN10__cxxabiv117__class_type_infoE>:
   bc13c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bc14c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bc15c:	0045 0000                                   E...

000bc160 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bc160:	0000 0000 c130 000b 81bd 000b 81d1 000b     ....0...........
   bc170:	8365 000b 8365 000b 823b 000b 817d 000b     e...e...;...}...
   bc180:	8223 000b 81e5 000b 81af 000b               #...........

000bc18c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bc18c:	c1c8 000b c198 000b c130 000b               ........0...

000bc198 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bc198:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bc1a8:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bc1b8:	666e 456f 0000 0000                         nfoE....

000bc1c0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bc1c0:	0000 0000 c18c 000b 8265 000b 8279 000b     ........e...y...
   bc1d0:	8365 000b 8365 000b 823b 000b 817d 000b     e...e...;...}...
   bc1e0:	8339 000b 82c5 000b 828d 000b               9...........

000bc1ec <_ZTISt9type_info>:
   bc1ec:	c168 000b c1f4 000b                         h.......

000bc1f4 <_ZTSSt9type_info>:
   bc1f4:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bc204:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bc214:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   bc224:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bc234:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bc244:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bc254:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bc264:	6474 696c 2f62 6172 646e 632e 6900 696e     tdlib/rand.c.ini
   bc274:	7974 0000                                   ty..

000bc278 <fpi.1>:
   bc278:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bc288:	0000 0000                                   ....

000bc28c <fpinan.0>:
   bc28c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   bc29c:	0000 0000                                   ....

000bc2a0 <tinytens>:
   bc2a0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bc2b0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bc2c0:	6f43 64ac 0628 1168                         Co.d(.h.

000bc2c8 <_ctype_>:
   bc2c8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bc2d8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bc2e8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bc2f8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bc308:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bc318:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bc328:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bc338:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bc348:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bc3c8:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bc3d8:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   bc3e8:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   bc3f8:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   bc408:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   bc418:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   bc428:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   bc438:	632e 0000                                   .c..

000bc43c <_C_numeric_locale>:
   bc43c:	bfc8 000b af6c 000b e450 2003 4f50 4953     ....l...P.. POSI
   bc44c:	0058 742f 706d 6a2f 6e65 696b 736e 472d     X./tmp/jenkins-G
   bc45c:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   bc46c:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   bc47c:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   bc48c:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   bc49c:	696c 2f62 706d 6572 2e63 0063               lib/mprec.c.

000bc4a8 <__mprec_bigtens>:
   bc4a8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bc4b8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bc4c8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bc4d0 <__mprec_tens>:
   bc4d0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bc4e0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bc4f0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bc500:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bc510:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bc520:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bc530:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bc540:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bc550:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bc560:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bc570:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bc580:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bc590:	9db4 79d9 7843 44ea                         ...yCx.D

000bc598 <p05.0>:
   bc598:	0005 0000 0019 0000 007d 0000               ........}...

000bc5a4 <link_const_variable_data_end>:
   bc5a4:	000b5071 	.word	0x000b5071
   bc5a8:	000b6ca5 	.word	0x000b6ca5
   bc5ac:	000b6d1d 	.word	0x000b6d1d
   bc5b0:	000b6f69 	.word	0x000b6f69
   bc5b4:	000b70c9 	.word	0x000b70c9
   bc5b8:	000b73d1 	.word	0x000b73d1
   bc5bc:	000b7595 	.word	0x000b7595
   bc5c0:	000b7b99 	.word	0x000b7b99
   bc5c4:	000b7db9 	.word	0x000b7db9

000bc5c8 <link_constructors_end>:
	...
